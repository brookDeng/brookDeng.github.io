<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-14T01:42:11.209Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go learning 1 变量与运算</title>
    <link href="http://example.com/2022/07/04/1%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97/"/>
    <id>http://example.com/2022/07/04/1%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97/</id>
    <published>2022-07-04T03:06:05.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>当一个变量被声明之后，系统自动赋予它该类型的零值：<code>int</code> 为 <code>0</code>，<code>float32(64)</code> 为 <code>0.0</code>，bool 为 <code>false</code>，<code>string</code> 为空字符串，指针为 <code>nil</code>。记住，所有的内存在 Go 中都是经过初始化的。</p><p>变量命名：驼峰式命名   若想为外部可见，则需首字母也大写</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p><strong>全局变量</strong>:在函数体外声明，允许声明但不使用。</p><p><strong>局部变量</strong>：在函数体内声明，作用域只在相应的代码块内，声明变量必须使用。</p><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><pre><code>var identifier [type] = valuevar str string = "Go says hello to the world!"</code></pre><p>Go编译器可以自动判断变量类型</p><p>函数体内声明变量使用简短声明语法  <code>:=</code> 。这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 <code>:=</code> 可以高效地创建一个新的变量，称之为初始化声明。</p><p>当使用等号 <code>=</code> 将一个变量的值赋值给另一个变量时，如：<code>j = i</code>，实际上是在内存中将 <code>i</code> 的值进行了拷贝：</p><p>你可以通过 <code>&amp;i</code> 来获取变量 <code>i</code> 的内存地址，值类型的变量的值存储在栈中。</p><p>在 Go 语言中，指针属于引用类型，其它的引用类型还包括 slices，maps和 channel。被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。</p><h3 id="多变量并行-或-同时-赋值"><a href="#多变量并行-或-同时-赋值" class="headerlink" title="多变量并行 或 同时 赋值"></a>多变量<strong>并行</strong> 或 <strong>同时</strong> 赋值</h3><p>多变量声明及赋值可以在同一行进行。</p><p>如果你想要交换两个变量的值，则可以简单地使用 <code>a, b = b, a</code>。</p><h2 id="打印Printf"><a href="#打印Printf" class="headerlink" title="打印Printf"></a>打印Printf</h2><p>函数 <code>Printf</code> 可以在 <code>fmt</code> 包外部使用，这是因为它以大写字母 P 开头。</p><pre><code>func Printf(format string, list of variables to be printed)</code></pre><p>格式化字符串为：<code>"The operating system is: %s\n"</code>。</p><p>这个格式化字符串可以含有一个或多个的格式化标识符，例如：<code>%..</code>，其中 <code>..</code> 可以被不同类型所对应的标识符替换，如 <code>%s</code> 代表字符串标识符、<code>%v</code> 代表使用类型的默认输出格式的标识符。这些标识符所对应的值从格式化字符串后的第一个逗号开始按照相同顺序添加，如果参数超过 1 个则同样需要使用逗号分隔。使用这些占位符可以很好地控制格式化输出的文本。</p><p>函数 <code>fmt.Sprintf</code> 与 <code>Printf</code> 的作用是完全相同的，不过前者将格式化后的字符串以返回值的形式返回给调用者，因此你可以在程序中使用包含变量的字符串。</p><h3 id="格式化说明符"><a href="#格式化说明符" class="headerlink" title="格式化说明符"></a><strong>格式化说明符</strong></h3><p>在格式化字符串里，</p><p><code>%d</code> 用于格式化整数（<code>%x</code> 和 <code>%X</code> 用于格式化 16 进制表示的数字），</p><p><code>%g</code> 用于格式化浮点型</p><p><code>%f</code> 输出浮点数，</p><p><code>%c</code> 输出字符，</p><p><code>%e</code> 输出科学计数表示法，</p><p><code>%0nd</code> 用于规定输出长度为 n 的整数，其中开头的数字 0 是必须的。</p><p><code>%n.mg</code> 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 <code>%5.2e</code> 来输出 3.4 的结果为 <code>3.40e+00</code>。</p><h2 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h2><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="整型int"><a href="#整型int" class="headerlink" title="整型int"></a>整型int</h3><p>Go 也有基于架构的类型，例如：<code>int</code>、<code>uint</code> 和 <code>uintptr</code>。</p><p>这些类型的长度都是根据运行程序所在的操作系统类型所决定的：</p><ul><li><code>int</code> 和 <code>uint</code> 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。</li><li><code>uintptr</code> 的长度被设定为足够存放一个指针即可。</li></ul><p>整数：</p><ul><li><code>int8</code>（-128 -&gt; 127）</li><li><code>int16</code>（-32768 -&gt; 32767）</li><li><code>int32</code>（-2,147,483,648 -&gt; 2,147,483,647）</li><li><code>int64</code>（-9,223,372,036,854,775,808 -&gt; 9,223,372,036,854,775,807）</li></ul><p>无符号整数：</p><ul><li><code>uint8</code>（0 -&gt; 255）</li><li><code>uint16</code>（0 -&gt; 65,535）</li><li><code>uint32</code>（0 -&gt; 4,294,967,295）</li><li><code>uint64</code>（0 -&gt; 18,446,744,073,709,551,615）</li></ul><p>浮点型（IEEE-754 标准）：</p><ul><li><code>float32</code>（+- 1e-45 -&gt; +- 3.4 * 1e38）</li><li><code>float64</code>（+- 5 * 1e-324 -&gt; 107 * 1e308）</li></ul><p><code>int</code> 型是计算最快的一种类型。</p><p>整型的零值为 <code>0</code>，浮点型的零值为 <code>0.0</code>。</p><p><code>float32</code> 精确到小数点后 7 位，<code>float64</code> 精确到小数点后 15 位。应该尽可能地使用 <code>float64</code>，因为 <code>math</code> 包中所有有关数学运算的函数都会要求接收这个类型。</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>Go 拥有以下复数类型：</p><pre><code>complex64 (32 位实数和虚数)complex128 (64 位实数和虚数)</code></pre><p>复数使用 <code>re+imI</code> 来表示，其中 <code>re</code> 代表实数部分，<code>im</code> 代表虚数部分，<code>I</code> 代表根号负 1。</p><p>示例：</p><pre><code>var c1 complex64 = 5 + 10ifmt.Printf("The value is: %v", c1)// 输出： 5 + 10i</code></pre><p>如果 <code>re</code> 和 <code>im</code> 的类型均为 <code>float32</code>，那么类型为 <code>complex64</code> 的复数 <code>c</code> 可以通过以下方式来获得：</p><pre><code>c = complex(re, im)</code></pre><p>函数 <code>real(c)</code> 和 <code>imag(c)</code> 可以分别获得相应的实数和虚数部分。</p><p>在使用格式化说明符时，可以使用 <code>%v</code> 来表示复数，但当你希望只表示其中的一个部分的时候需要使用 <code>%f</code>。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算只能用于整数类型的变量，且需当它们拥有等长位模式时。</p><p><code>%b</code> 是用于表示位的格式化标识符。</p><h3 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a><strong>二元运算符</strong></h3><ul><li>按位与 <code>&amp;</code>：同1则为1</li><li>按位或 <code>|</code>：有1则为1</li><li>按位异或 <code>^</code>：同样则为0</li><li>位清除 <code>&amp;^</code>：将指定位置上的值设置为 <code>0</code>。</li></ul><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a><strong>一元运算符</strong></h3><ul><li><p>按位补足 <code>^</code>：</p><p>该运算符与异或运算符一同使用，即 <code>m^x</code>，对于无符号 <code>x</code> 使用 “全部位设置为 1” 的规则，对于有符号 <code>x</code> 时使用 <code>m=-1</code>。例如：</p><pre><code>  ^10 = -01 ^ 10 = -11</code></pre></li><li><p>位左移 <code>&lt;&lt;</code>：</p></li><li><p>位右移 <code>&gt;&gt;</code>：</p></li><li><p><strong>位左移常见实现存储单位的用例</strong></p><p>使用位左移与 <code>iota</code> 计数配合可优雅地实现存储单位的常量枚举：</p><pre><code>type ByteSize float64const (    _ = iota // 通过赋值给空白标识符来忽略值    KB ByteSize = 1&lt;&lt;(10*iota)    MB    GB    TB    PB    EB    ZB    YB)</code></pre></li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>Go 中拥有以下逻辑运算符：<code>==</code>、<code>!=</code>（第 4.5.1 节）、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>。</p><p>它们之所以被称为逻辑运算符是因为它们的运算结果总是为布尔值 <code>bool</code>。例如：</p><pre><code>b3 := 10 &gt; 5 // b3 is true</code></pre><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>常见可用于整数和浮点数的二元运算符有 <code>+</code>、<code>-</code>、<code>*</code> 和 <code>/</code>。</p><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>一些像游戏或者统计学类的应用需要用到随机数。<code>rand</code> 包实现了伪随机数的生成。</p><p>函数 <code>rand.Float32</code> 和 <code>rand.Float64</code> 返回介于 [0.0,1.0) 之间的伪随机数，其中包括 <code>0.0</code> 但不包括 <code>1.0</code>。函数 <code>rand.Intn</code> 返回介于 [0,n) 之间的伪随机数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;当一个变量被声明之后，系统自动赋予它该类型的零值：&lt;code&gt;int&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;float</summary>
      
    
    
    
    <category term="Go" scheme="http://example.com/categories/Go/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
    <category term="learning" scheme="http://example.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>加密算法学习</title>
    <link href="http://example.com/2021/12/20/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/12/20/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-12-20T15:11:01.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<p>在项目开发中经常用到一些加密算法，其应用场景常包括用户登录，通讯，支付等。</p><p>常见的加密算法可以分成三类，对称加密算法，非对称加密算法和Hash算法。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a><strong>对称加密</strong></h2><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29S4VsGiaXx_OVU-W/root/content"></p><p>指加密和解密使用相同密钥的加密算法。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。假设两个用户需要使用对称加密方法加密然后交换数据，则用户最少需要2个密钥并交换使用，如果企业内用户有n个，则整个企业共需要n×(n-1) 个密钥。对称加密算法的安全性取决于加密密钥的保存情况。</p><p>一段明文通过密钥进行加密，可以生成一段密文；这段密文通过同样的密钥进行解密，可以还原成明文。这样一来，只要双方事先约定好了密钥，就可以使用密文进行往来通信。</p><p>除了通信过程中的加密以外，数据库存储的敏感信息也可以通过这种方式进行加密。这样即使数据泄露到了外界，泄露出去的也都是密文。</p><p><strong>常见的对称加密算法：</strong>DES、3DES、DESX、Blowfish、IDEA、RC4、RC5、RC6和AES</p><p><strong>DES</strong>（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合。DES 加密算法是一种 分组密码，以 64 位为 分组对数据 加密，它的 密钥长度 是 56 位，加密解密 用 同一算法。</p><p>DES 加密算法是对 密钥 进行保密，而 公开算法，包括加密和解密算法。这样，只有掌握了和发送方 相同密钥 的人才能解读由 DES加密算法加密的密文数据。因此，破译 DES 加密算法实际上就是 搜索密钥的编码。对于 56 位长度的 密钥 来说，如果用 穷举法 来进行搜索的话，其运算次数为 2 ^ 56 次。</p><p><strong>3DES</strong>（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高。</p><p><strong>AES</strong>（Advanced Encryption Standard）：AES 加密算法是密码学中的 高级加密标准，该加密算法采用 对称分组密码体制，密钥长度的最少支持为 128 位、 192 位、256 位，分组长度 128 位，算法应易于各种硬件和软件实现。这种加密算法是美国联邦政府采用的 区块加密标准。</p><p>AES 本身就是为了取代 DES 的，AES 具有更好的 安全性、效率 和 灵活性。</p><h3 id="AES与3DES的比较"><a href="#AES与3DES的比较" class="headerlink" title="AES与3DES的比较"></a>AES与3DES的比较</h3><table><thead><tr><th>算法名称</th><th>算法类型</th><th>密钥长度</th><th>速度</th><th>解密时间（建设机器每秒尝试255个密钥）</th><th>资源消耗</th></tr></thead><tbody><tr><td>AES</td><td>对称block密码</td><td>128、192、256位</td><td>高</td><td>1490000亿年</td><td>低</td></tr><tr><td>3DES</td><td>对称feistel密码</td><td>112位或168位</td><td>低</td><td>46亿年</td><td>中</td></tr></tbody></table><p>对称算法的好处是加密解密的效率比较高。相应的，对称算法的缺点是不够安全。为什么呢？通信双方约定的密钥是相同的，只要密钥本身被任何一方泄露出去，通信的密文就会被破解；此外，在双方建立通信之初，服务端把密钥告诉给客户端的时候，也有被拦截到的危险。</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a><strong>非对称加密</strong></h2><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29S83L4FNy1LSl8C1/root/content"></p><p>指加密和解密使用不同密钥的加密算法，也称为公私钥加密。假设两个用户要加密交换数据，双方交换公钥，使用时一方用对方的公钥加密，另一方即可用自己的私钥解密。如果企业中有n个用户，企业需要生成n对密钥，并分发n个公钥。由于公钥是可以公开的，用户只要保管好自己的私钥即可，因此加密密钥的分发将变得十分简单。同时，由于每个用户的私钥是唯一的，其他用户除了可以可以通过信息发送者的公钥来验证信息的来源是否真实，还可以确保发送者无法否认曾发送过该信息。非对称加密的缺点是加解密速度要远远慢于对称加密，在某些极端情况下，甚至能比非对称加密慢上1000倍。</p><h3 id="通信的过程"><a href="#通信的过程" class="headerlink" title="通信的过程"></a>通信的过程</h3><p>1.在双方建立通信的时候，服务端只要把公钥告诉给客户端，自己保留私钥。</p><p>2.客户端利用获得的公钥。加密另外一个密钥X（可以是对称加密的密钥），发送给服务端。</p><p>3.服务端获得消息后，用自己的私钥解密，得到里面隐含的密钥X。</p><p>4.从此以后，双方可以利用密钥X进行对称加密的通信了。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TAA1WE2z_L34wy3/root/content"></p><p><strong>常见的非对称加密算法：</strong>RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）</p><p>RSA：由 RSA 公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的。RSA 加密算法是目前最有影响力的 公钥加密算法，并且被普遍认为是目前 最优秀的公钥方案 之一。RSA 是第一个能同时用于 加密 和 数字签名 的算法，它能够 抵抗 到目前为止已知的 所有密码攻击，已被 ISO 推荐为公钥数据加密标准。</p><p>RSA 加密算法 基于一个十分简单的数论事实：将两个大 素数 相乘十分容易，但想要对其乘积进行 因式分解 却极其困难，因此可以将 乘积 公开作为 加密密钥。</p><p>DSA（Digital Signature Algorithm）：数字签名算法，是一种标准的 DSS（数字签名标准）；</p><p>ECC（Elliptic Curves Cryptography）：椭圆曲线密码编码学。</p><p><code>ECC</code> 也是一种 <strong>非对称加密算法</strong>，主要优势是在某些情况下，它比其他的方法使用 <strong>更小的密钥</strong>，比如 <code>RSA</code> <strong>加密算法</strong>，提供 <strong>相当的或更高等级</strong> 的安全级别。不过一个缺点是 <strong>加密和解密操作</strong> 的实现比其他机制 <strong>时间长</strong> (相比 <code>RSA</code> 算法，该算法对 <code>CPU</code> 消耗严重)。</p><p>ECC和RSA相比，在许多方面都有对绝对的优势，主要体现在以下方面：</p><p>抗攻击性强。相同的密钥长度，其抗攻击性要强很多倍。</p><p>计算量小，处理速度快。ECC总的速度比RSA、DSA要快得多。</p><p>存储空间占用小。ECC的密钥尺寸和系统参数与RSA、DSA相比要小得多，意味着它所占的存贮空间要小得多。这对于加密算法在IC卡上的应用具有特别重要的意义。</p><p>带宽要求低。当对长消息进行加解密时，三类密码系统有相同的带宽要求，但应用于短消息时ECC带宽要求却低得多。带宽要求低使ECC在无线网络领域具有广泛的应用前景。</p><h2 id="Hash算法（散列算法）"><a href="#Hash算法（散列算法）" class="headerlink" title="Hash算法（散列算法）"></a><strong>Hash算法</strong>（<strong>散列算法</strong>）</h2><p>Hash算法特别的地方在于它是一种单向算法，用户可以通过Hash算法对目标信息生成一段特定长度的唯一的Hash值，却不能通过这个Hash值重新获得目标信息。其中一个重要的作用就是<strong>生成信息摘要</strong>，用以验证原信息的完整性和来源的可靠性。因此Hash算法常用在不可还原的密码存储、信息完整性校验等。</p><p><strong>常见的Hash算法：</strong>MD2、MD4、MD5、HAVAL、SHA、SHA-1、HMAC、HMAC-MD5、HMAC-SHA1</p><p> 单向散列函数一般用于产生消息摘要，密钥加密等，常见的有：</p><p><strong>MD5</strong>（Message Digest Algorithm 5）128位：是RSA数据安全公司开发的一种单向散列算法，非可逆，相同的明文产生相同的密文。<code>MD5</code> 用的是 <strong>哈希函数</strong>，它的典型应用是对一段信息产生 <strong>信息摘要</strong>，以 <strong>防止被篡改</strong>。严格来说，<code>MD5</code> 不是一种 <strong>加密算法</strong> 而是 <strong>摘要算法</strong>。无论是多长的输入，<code>MD5</code> 都会输出长度为 <code>128bits</code> 的一个串 (通常用 <code>16</code> <strong>进制</strong> 表示为 <code>32</code> 个字符)。</p><p><strong>SHA</strong>（Secure Hash Algorithm）：SHA1 是和 MD5 一样流行的 消息摘要算法，然而 SHA1 比 MD5 的 安全性更强。对于长度小于 2 ^ 64 位的消息，SHA1 会产生一个 160 位的 消息摘要。基于 MD5、SHA1 的信息摘要特性以及 不可逆 (一般而言)，可以被应用在检查 文件完整性 以及 数字签名 等场景。</p><h3 id="SHA-1与MD5的比较"><a href="#SHA-1与MD5的比较" class="headerlink" title="SHA-1与MD5的比较"></a><strong>SHA-1与MD5的比较</strong></h3><p>因为二者均由MD4导出，SHA-1和MD5彼此很相似。相应的，他们的强度和其他特性也是相似，但还有以下几点不同：</p><p><strong>对强行供给的安全性</strong>：最显著和最重要的区别是SHA-1摘要比MD5摘要长32 位。使用强行技术，产生任何一个报文使其摘要等于给定报摘要的难度对MD5是2128数量级的操作，而对SHA-1则是2160数量级的操作。这样，SHA-1对强行攻击有更大的强度。</p><p><strong>对密码分析的安全性</strong>：由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击。</p><p><strong>速度</strong>：在相同的硬件上，SHA-1的运行速度比MD5慢。</p><h2 id="加密算法的选择"><a href="#加密算法的选择" class="headerlink" title="加密算法的选择"></a><strong>加密算法的选择</strong></h2><p>由于非对称加密算法的运行速度比对称加密算法的速度慢很多，当我们需要加密大量的数据时，建议采用对称加密算法，提高加解密速度。</p><p>对称加密算法不能实现签名，因此签名只能非对称算法。</p><p>由于对称加密算法的密钥管理是一个复杂的过程，密钥的管理直接决定着他的安全性，因此当数据量很小时，我们可以考虑采用非对称加密算法。</p><p>在实际的操作过程中，我们通常采用的方式是：采用非对称加密算法管理对称算法的密钥，然后用对称加密算法加密数据，这样我们就集成了两类加密算法的优点，既实现了加密速度快的优点，又实现了安全方便管理密钥的优点。</p><p>那采用多少位的密钥呢？ RSA建议采用1024位的数字，ECC建议采用160位，AES采用128为即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在项目开发中经常用到一些加密算法，其应用场景常包括用户登录，通讯，支付等。&lt;/p&gt;
&lt;p&gt;常见的加密算法可以分成三类，对称加密算法，非对称加密算法和Hash算法。&lt;/p&gt;
&lt;h2 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="learn" scheme="http://example.com/tags/learn/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="加密" scheme="http://example.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>阿里云部署单机服务</title>
    <link href="http://example.com/2021/11/21/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BA%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2021/11/21/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BA%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-11-21T12:47:14.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<p>​       之前白嫖的阿里云学生服务器到期了，所以重新买了一年的阿里云轻量应用服务器来部署之前的服务，今天特意把整个过程记录下来，以备查看。</p><p>​        该服务所需安装的服务有不少，分别是nginx，maven，tomcat，elasticsearch，kafka，mysql，redis</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Rsfbj-qx3p03uur/root/content"></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>yum install -y wget &amp;&amp; wget -O install.sh <a class="link" href="http://download.bt.cn/install/install_6.0.sh">http://download.bt.cn/install/install_6.0.sh<i class="fas fa-external-link-alt"></i></a> &amp;&amp; sh install.sh 6dca892c</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>bt </p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29RzU7G3djYH44uIx/root/content"></p><h2 id="Jre"><a href="#Jre" class="headerlink" title="Jre"></a>Jre</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>yum list java*</p><p>yum install -y java-latest-openjdk.x86_64</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29R0MZYO1ZODuMw03/root/content"></p><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p> tar -zvxf apache-maven-3.8.2-bin.tar.gz -C /opt</p><pre><code>[root@iZbp1e959bxugmpmsl1j1cZ ~]# cd /opt[root@iZbp1e959bxugmpmsl1j1cZ opt]# lsapache-maven-3.8.2</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>vim /etc/profile</p><p>export PATH=$PATH:/opt/apache-maven-3.8.2/bin</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29R4TYHIOhgKANuX2/root/content"></p><p>重新加载</p><p>source /etc/profile</p><p>mvn -vesion</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29R9UgqXW9ekY8BIn/root/content"></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>C:\Program Files\Java\apache-maven-3.8.1\conf</p><pre><code>   &lt;mirror&gt;        &lt;id&gt;nexus-aliyun&lt;/id&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;name&gt;Nexus aliyun&lt;/name&gt;        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>插入到/opt/apache-maven-3.8.2/conf</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>yum list mysql*</p><p>yum install -y mysql-community-server.x86_64</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>systemctl start mysqld</p><p>systemctl statusmysqld</p><h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><p>grep ‘password’  /var/log/mysqld.log</p><p>alter user root@localhost identified by ‘Xinyu_521’;</p><h3 id="windows数据库导出备份Linux还原"><a href="#windows数据库导出备份Linux还原" class="headerlink" title="windows数据库导出备份Linux还原"></a>windows数据库导出备份Linux还原</h3><p>cmd&gt; cd D:\Java\MySQL\bin</p><p>mysqldump -u root -p community &gt; community.sql</p><p>bin目录下有coummuity.sql文件，上传到linux服务器</p><p>进入mysql创建新数据库community并导入备份</p><p>source /root/community.sql</p><h3 id="数据库增加表情支持emoji"><a href="#数据库增加表情支持emoji" class="headerlink" title="数据库增加表情支持emoji"></a>数据库增加表情支持emoji</h3><p>表情是4个字节的奇葩，而utf8只能存3字节数据，所以我们要改数据库、表、存表情的字段的编码为utf8mb4</p><p>alter table discuss_post convert to character set utf8mb4 collate utf8mb4_general_ci;</p><p>alter table comment convert to character set utf8mb4 collate utf8mb4_general_ci;</p><p>alter table message convert to character set utf8mb4 collate utf8mb4_general_ci;</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SC9VPXBy7nomJvN/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SG-Bj8DAOoK0WXb/root/content"></p><p>这样就支持了</p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><p>yum install -y redis.x86_64</p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>启动redis服务器</p><p>systemctl start redis</p><pre><code>redis-server /etc/redis.conf</code></pre><p>访问redis  <code>redis-cli</code></p><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><p>tar -zvxf kafka_2.13-2.8.0.tgz -C /opt</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><a class="link" href="https://www.cnblogs.com/miamianfighting/p/14087091.html">https://www.cnblogs.com/miamianfighting/p/14087091.html<i class="fas fa-external-link-alt"></i></a></p><p><strong>firewall-cmd –state</strong>查看防火墙</p><p>启动</p><p>cd /opt/kafka_2.13-2.8.0</p><p>bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</p><p>nohup bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;</p><ul><li>查看kafka topic列表，使用–list参数</li></ul><p>bin/kafka-topics.sh –zookeeper 127.0.0.1:2181 –list</p><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><p>tar -zxvf elasticsearch-7.12.1-linux-x86_64.tar.gz -C /opt</p><p>解压缩分词插件</p><p>unzip -d /opt/elasticsearch-7.12.1/plugins/ik elasticsearch-analysis-ik-7.12.1.zip</p><h3 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h3><p>E:\Javastudy\elasticsearch-7.12.1\config\elasticsearch.yml</p><p>然后更改一下占用内存jvmoptions</p><pre><code>-Xms256m-Xmx512m</code></pre><p>elastic不允许root用户  需要新建普通用户</p><p>groupadd community</p><p>useradd brook -p xinyu521 -g community</p><p>设置权限</p><p>cd /opt</p><p>chown -R brook:community *</p><p> cd /tmp</p><p>chown -R brook:community *</p><h3 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h3><p>su - brook</p><p>cd /opt/elasticsearch-7.12.1</p><p>bin/elasticsearch -d</p><p>curl <a class="link" href="http://localhost:9200/_cat/health?v">http://localhost:9200/_cat/health?v<i class="fas fa-external-link-alt"></i></a></p><h2 id="wkhtmltopdf"><a href="#wkhtmltopdf" class="headerlink" title="wkhtmltopdf"></a>wkhtmltopdf</h2><p>yum list wkhtmltopdf*</p><p>yum install wkhtmltopdf.x86_64</p><p>linux没有gui  需要安装虚拟gui</p><p>yum install xorg-x11-server-Xvfb.x86_64</p><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><h3 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h3><p> tar -zxvf apache-tomcat-9.0.52.tar.gz -C /opt</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>/opt/apache-tomcat-9.0.52/bin</p><p>打开ip:8080</p><p>打不开就是防火墙问题</p><p><strong>systemctl stop firewalld service</strong></p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>反向代理</p><pre><code>upstream myserver {           server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;}server {        listen 80;        server_name 47.113.190.16;        location / {          proxy_pass http://myserver;}}</code></pre><p>配置完别忘了云服务器安全组放行端口</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SK1xFtIBvqNAiSL/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SOprbqT7ElXlWkr/root/content"></p><p>默认访问的是tomcat下的ROOT</p><p>如果要访问examples，则在浏览器网址改为：域名/examples</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SSyzfAM5fwc0k4P/root/content"></p><p>将root路径删除 打包war  对项目路径做出修改</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SW8n524MNkLf5sP/root/content"></p><p>将统一项目名改为空值</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SZQ92E97gxANeqG/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Se6Tu_NgPHNnTCu/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29ShMng_xBpybpgmm/root/content"></p><p>打包war包</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SnJoJD1YJ4z9a9S/root/content"></p><p>打包名ROOT</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Srr3ZIehsfaCFRB/root/content"></p><p>多套配置文件</p><p>生产一套</p><p>部署一套</p><p>将之前开发的appliaction.properties和logback-spring.xml各复制两份</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29StjN37z338B3mba/root/content"></p><p>然后载application。properties中定义哪一个配置文件生效</p><pre><code class="xml"># profilespring.profiles.active=produce# logbacklogging.config=classpath:logback-spring-${spring.profiles.active}.xml</code></pre><p>启动文件配置</p><pre><code>package com.nowcoder.community;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;public class CommuntityServletInitializer extends SpringBootServletInitializer {    @Override    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {        return builder.sources(CommunityApplication.class);    }}</code></pre><p>清除target 文件包小</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29SzrS9HN933SECV9/root/content"></p><p>找到项目位置并打包上传到服务器</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29S3biRt0YzINTSjL/root/content"></p><p>startup.sh  </p><p>然后访问主页</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​       之前白嫖的阿里云学生服务器到期了，所以重新买了一年的阿里云轻量应用服务器来部署之前的服务，今天特意把整个过程记录下来，以备查看。&lt;/p&gt;
&lt;p&gt;​        该服务所需安装的服务有不少，分别是nginx，maven，tomcat，elasticsearc</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="aliyun" scheme="http://example.com/tags/aliyun/"/>
    
    <category term="project" scheme="http://example.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>线上kafka问题Timeout</title>
    <link href="http://example.com/2021/09/07/%E7%BA%BF%E4%B8%8Akafka%E9%97%AE%E9%A2%98Timeout/"/>
    <id>http://example.com/2021/09/07/%E7%BA%BF%E4%B8%8Akafka%E9%97%AE%E9%A2%98Timeout/</id>
    <published>2021-09-07T14:52:19.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>kafka 版本2.13-2.8.0</p><p>今天查看论坛项目，发现点赞和回复的时候出现502服务器问题。</p><p>仔细查看发现点赞和回复数据库操作能成功，但是并没有触发Kafka producer发送消息，windows本地部署是成功的，代码层面没有问题。</p><p>查看项目日志cd /tmp/community   </p><p>vim log_error.log发现</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29mTbThREkZZix3a_/root/content"></p><p>发送消息代码</p><pre><code>public String addComment(@PathVariable("discussPostId")int discussPostId, Comment comment){        //添加评论        comment.setUserId(hostHolder.getUser().getId());        comment.setStatus(0);        comment.setCreateTime(new Date());        commentService.addComment(comment);//触发评论事件        Event event = new Event()                .setTopic(TOPIC_COMMENT)                .setUserId(hostHolder.getUser().getId())                .setEntityType(comment.getEntityType())                .setEntityId(comment.getEntityId())                .setData("postId",discussPostId);        if (comment.getEntityType()== ENTITY_TYPE_POST){            DiscussPost target = discussPostService.findDiscussPostById(comment.getEntityId());            event.setEntityUserId(target.getUserId())                    .setData("sortNo",comment.getId());        }        eventProducer.fireEvent(event);}</code></pre><p>写入评论成功，但是eventProducer.fireEvent(event)执行失败，应该是kafka和zookeeper连接问题。</p><p>config/server.config有如下描述：</p><blockquote><p># The address the socket server listens on. It will get the value returned from </p><p># java.net.InetAddress.getCanonicalHostName() if not configured.</p><p># FORMAT:</p><p>#  listeners = listener_name://host_name:port</p><p># EXAMPLE:</p><p>#  listeners = PLAINTEXT://your.host.name:9092</p><p>#listeners=PLAINTEXT://:9092</p></blockquote><p>将#listeners=PLAINTEXT://:9092,改成</p><blockquote><p>listeners=PLAINTEXT://localhost:9092</p></blockquote><p>重启kafaka,再次尝试写消息，成功了。</p><h2 id="kafka常用操作"><a href="#kafka常用操作" class="headerlink" title="kafka常用操作"></a>kafka常用操作</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a class="link" href="https://www.cnblogs.com/miamianfighting/p/14087091.html">https://www.cnblogs.com/miamianfighting/p/14087091.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>cd /opt/kafka</p><pre><code>bin/zookeeper-server-start.sh -daemon config/zookeeper.propertiesnohup bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;  //后台启动zookeeper和kafka</code></pre><h3 id="查看kafka进程"><a href="#查看kafka进程" class="headerlink" title="查看kafka进程"></a>查看kafka进程</h3><pre><code>ps -ef|grep kafka</code></pre><h3 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h3><pre><code>bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic my_topic</code></pre><h3 id="查看topic"><a href="#查看topic" class="headerlink" title="查看topic"></a>查看topic</h3><pre><code>bin/kafka-topics.sh --list --zookeeper localhost:2181</code></pre><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><pre><code>bin/kafka-console-producer.sh --broker-list 192.168.38.131:9092 --topic my_topic</code></pre><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><pre><code>bin/kafka-console-consumer.sh --bootstrap-server 192.168.38.131:9092 --topic my_topic </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题解决&quot;&gt;&lt;a href=&quot;#问题解决&quot; class=&quot;headerlink&quot; title=&quot;问题解决&quot;&gt;&lt;/a&gt;问题解决&lt;/h2&gt;&lt;p&gt;kafka 版本2.13-2.8.0&lt;/p&gt;
&lt;p&gt;今天查看论坛项目，发现点赞和回复的时候出现502服务器问题。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="tool" scheme="http://example.com/tags/tool/"/>
    
    <category term="kafka" scheme="http://example.com/tags/kafka/"/>
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>使用coding CI服务实现hexo自动化发布部署</title>
    <link href="http://example.com/2021/09/01/%E4%BD%BF%E7%94%A8coding%20CI%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0hexo%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2021/09/01/%E4%BD%BF%E7%94%A8coding%20CI%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0hexo%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83%E9%83%A8%E7%BD%B2/</id>
    <published>2021-09-01T14:57:04.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>hexo是一个操作简单方便的静态网页式博客，但是这也带来了几个问题。</p><ul><li>每次<code>hexo new post ""</code>写作好以后，都要进行生成网页部署网页的操作，这种重复操作是程序员极为讨厌的行为。</li><li>同样，每次想要在新的设备上写作就更加麻烦，新设备上要和原设备上有一样的环境，重新配置环境的时候还有可能出现各种问题。花费了一段时间配好环境，开始写作了，又要经历上一个问题。</li></ul><p>而各家的持续集成服务就能解决这样的问题，这里推荐coding的CI服务，每个月有1000次的免费持续集成次数，而且提供的服务器配置也很可以了。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29VU3qY_5Un28Ajdj/root/content"></p><p>下面介绍一些基本概念，不需要的朋友可以直接向下调到教程。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>在软件工程中，持续集成（CI）是指将所有开发者的工作副本每天多次合并到主干的做法。持续集成在现代软件研发流程中，扮演了十分重要的角色。通过对每次提交的代码进行自动化的单元测试、代码检查、编译构建、契约测试，甚至自动部署，能够大大降低了开发人员的工作负担，减少了许多不必要的重复劳动，持续提升代码质量和开发效率。毫无疑问，持续集成是开发者和研发团队的福音。</p><p>持续集成是指软件发布流程的构建和单元测试阶段。提交的每一个修订都会触发自动化的构建和测试操作。</p><p>采用<a class="link" href="https://aws.amazon.com/cn/devops/continuous-delivery/">持续交付<i class="fas fa-external-link-alt"></i></a>时，系统会自动构建、测试并准备代码变更，以便发布到生产环境中。持续交付通过在构建阶段后将所有代码变更部署到测试环境和/或生产环境中，实现对持续集成的扩展。</p><p>当然我们想要实现自动部署并不需要完整的持续集成功能，只需要自动构建。</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p><p>没错，它就是一个具体的持续集成解决方案。基于 Java 实现。 可以实现：</p><ol><li>持续版本发布/测试；</li><li>监控外部调用执行的工作；</li></ol><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>能够正常发布使用的hexo本地项目。</li><li>coding账户</li><li>Git</li></ol><h2 id="coding访问令牌"><a href="#coding访问令牌" class="headerlink" title="coding访问令牌"></a>coding访问令牌</h2><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Vbp_Rej8lA87Vvp/root/content"></p><p>新建访问令牌</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Vfoo1OCCjuuJ2xn/root/content"></p><p>保存好令牌和用户名备用。</p><h2 id="coding项目"><a href="#coding项目" class="headerlink" title="coding项目"></a>coding项目</h2><p>本项目中需要一个git仓库，可以使用github||gitee||coding。建议使用coding，因为是采用的coding的集成服务，同平台稳定性高一些。</p><p>首先直接创建一个全功能DevOps项目。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Viw44joEveG6NbD/root/content"></p><p>进入项目</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Vk3MMRsfrRuNG-3/root/content"></p><p>进入代码仓库，新建一个仓库，因为里面会有配置文件，含有密码等敏感信息，请选择私有仓库。</p><p>创建完成后本地文件夹绑定远程仓库。</p><pre><code>git remote set-url origin https://e.coding.net/仓库地址.git</code></pre><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29VprZXjOY_dwW_9i/root/content"></p><p>本地hexo目录，编辑——config.yml配置文件。找到deploy</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Vsy3p2dQ5xQBLti/root/content"></p><p>采用coding 免费CI构建部署时候每次都是一个新的环境，相当于新的设备，每次都要输入凭证才可以成功部署。我是同时部署在github和gitee，格式为：</p><pre><code> github: https://username:token@github.com/项目地址.git gitee: https://用户名:密码@gitee.com/项目地址.git</code></pre><p>github需要采用用户名加token的方式访问，不要使用密码！不要使用密码！会构建失败！</p><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p>在<a class="link" href="https://github.com登录你的帐号,登录以后点击右上角你的头像的settings/">https://github.com登录你的帐号，登录以后点击右上角你的头像的Settings<i class="fas fa-external-link-alt"></i></a></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29Vyxwy2n0RbzsdAK/root/content"></p><p>2、 点击Developer settings下的Personal access tokens</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29V2U_bRddj1_cs1q/root/content"></p><p>3、点击<a class="link" href="https://github.com/settings/tokens/new%E8%BF%99%E4%B8%AA%E8%B6%85%E9%93%BE%E6%8E%A5%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84token%E3%80%82">https://github.com/settings/tokens/new这个超链接，就是创建你的token。<i class="fas fa-external-link-alt"></i></a></p><p>!<img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29V4tTyGS6fFDkHBJ/root/content"></p><p>4、在Token description中随便填一个描述名称，下面的复选框是你这个token需要的权限，全部勾上就可以了。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29V-7kAJBkvBPH6m2/root/content"></p><p>然后点击下面这个绿色的按钮：</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29WDe8061HpMLmCaT/root/content"></p><p>5、下面这个就是你的token了，可以直接复制使用。将其填入配置文件。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29WHFpK3ICtyWV8Rv/root/content"></p><h2 id="配置持续集成"><a href="#配置持续集成" class="headerlink" title="配置持续集成"></a>配置持续集成</h2><p>进入coding项目选择持续集成–构建计划–创建构建计划</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29WJa2YrVolLg-zO_/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29WOv-k2e9fNvyg4w/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29WR83hFKnGmy4xGs/root/content"></p><p>上文提到的仓库是新建了coding仓库，在代码仓库中选择你创建的仓库，如果你是放在githu或者其他仓库服务，请选择相应的仓库并授权。之后点击确定。</p><p>之后在流程设置中进行设置。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29WVC0V5czptZfjHZ/root/content"></p><p>下面贴上代码</p><pre><code>pipeline {    agent any    stages  {       stage("pull") {            steps {               sh 'ls'              sh 'git config --global user.name "username"'               sh 'git config --global user.email "email"'              sh 'ls'              sh 'git clone https://用户名:令牌@e.coding.net/仓库地址.git .'//输入上面提到的coding用户名和令牌            }                }        stage("hexo")         {           steps           {              sh 'npm install -g hexo-cli'                sh 'npm install hexo --save'              //如果你的hexo项目有其他特别功能需要的服务，可以在此添加相应指令           }         }         stage("发布")         {             steps           {           sh 'hexo cl'  //hexo clean           sh 'hexo g'  //hexo generate                      sh 'hexo d'  //hexo deploy           }         }            }}</code></pre><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29WZ2nB-Itjh-A3bg/root/content"></p><p>开启缓存，加快部署速度。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29W3QgSMazHvn3V1l/root/content"></p><p>之后就可以构建了，确认上述操作无误后。点击保存。</p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>将hexo本地项目git push到你绑定的的仓库，coding就会自动帮你构建啦。</p><p>成功截图。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29W7qbi9YcW5TzN_d/root/content"></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>1.</p><p>fatal: unable to access ‘<a class="link" href="https://-----@github.com/----.git/'">https://-----@github.com/----.git/'<i class="fas fa-external-link-alt"></i></a>: Failed to connect to  port 443: Connection timed out</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29W_22XZCZiYQNEkb/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29XCPcX9ipQ21MqyX/root/content"></p><p>一般是config文件中部署设置的用户名或密码错误。</p><p>2.fatal: could not read Username for ‘<a class="link" href="https://gitee.com/">https://gitee.com<i class="fas fa-external-link-alt"></i></a>‘: No such device or address</p><p>同上 用户名错误</p><p>3.!<img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29XGCtK64F8MTW7An/root/content"></p><p>将config中highlight enable改为false</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29XJusC-zdtbc8Kut/root/content"></p><p>如有疑问欢迎与我沟通。</p><p>我的博客：</p><p><a class="link" href="https://brook2bubble.gitee.io/">https://brook2bubble.gitee.io/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://brookdeng.github.io/">https://brookdeng.github.io/<i class="fas fa-external-link-alt"></i></a></p><h1 id="多端协作"><a href="#多端协作" class="headerlink" title="多端协作"></a>多端协作</h1><p>关于多端写作，网上有Hexo同步语雀文章，感兴趣的可以搜一搜看一看，但是这样的方法会导致每次写作都要使用语雀来写作，配置起来也更加麻烦。</p><h3 id="常用电脑"><a href="#常用电脑" class="headerlink" title="常用电脑"></a>常用电脑</h3><p>写作后直接push到仓库</p><h3 id="其他电脑"><a href="#其他电脑" class="headerlink" title="其他电脑"></a>其他电脑</h3><p>编辑md文档后，上传到仓库_post文件夹。注意文档格式。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29XNLGVt9_T3YojyG/root/content"></p><p>md文档头文件</p><pre><code>---title: 使用coding CI服务实现hexo自动化发布部署date: yyyy-MM-dd HH:mm:sscategories: [Hexo]tags: [CI,Coding,hexo,git]---</code></pre><h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><p>同上，比较麻烦，不过也很少有手机写博客的吧。</p><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a class="link" href="https://help.coding.net/docs/ci/intro.html">持续集成介绍<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="http://www.misaka10013.cn/p/1967088261.html">hexo利用coding自动化持续集成云端部署多平台<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://www.cnblogs.com/antmoe/p/12287711.html">Hexo+coding实现自动化部署<i class="fas fa-external-link-alt"></i></a></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;hexo是一个操作简单方便的静态网页式博客，但是这也带来了几个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次&lt;code&gt;hexo new post </summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="CI" scheme="http://example.com/tags/CI/"/>
    
    <category term="Coding" scheme="http://example.com/tags/Coding/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>FactoryBean和BeanFactory的区别</title>
    <link href="http://example.com/2021/08/20/FactoryBean%E5%92%8CBeanFactory%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/08/20/FactoryBean%E5%92%8CBeanFactory%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-08-20T10:06:05.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeanFactory、FactoryBean和ObjectFactory"><a href="#BeanFactory、FactoryBean和ObjectFactory" class="headerlink" title="BeanFactory、FactoryBean和ObjectFactory"></a>BeanFactory、FactoryBean和ObjectFactory</h1><ul><li>BeanFactory就是对象工厂，用于实例化和保存对象。</li><li>FactoryBean是一个工厂对象，用于实例化创建过程比较复杂的对象。</li><li>ObjectFactory是某个特定的工厂，用于在项目启动时，延迟实例化对象，解决循环依赖问题。</li></ul><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>是一个接口，<code>public interface BeanFactory</code>，提供如下方法：</p><ul><li><code>Object getBean(String name)</code></li><li><code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType)</code></li><li><code>&lt;T&gt; T getBean(Class&lt;T&gt; requiredType)</code></li><li><code>Object getBean(String name, Object... args)</code></li><li><code>boolean containsBean(String name)</code></li><li><code>boolean isSingleton(String name)</code></li><li><code>boolean isPrototype(String name)</code></li><li><code>boolean isTypeMatch(String name, Class&lt;?&gt; targetType)</code></li><li><code>Class&lt;?&gt; getType(String name)</code></li><li><code>String[] getAliases(String name)</code></li></ul><p>在 Spring 中，<code>BeanFactory</code>是 IoC 容器的核心接口。它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。</p><p><code>BeanFactory</code> 提供的高级配置机制，使得管理任何性质的对象成为可能。<br> <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的扩展，功能得到了进一步增强，比如更易与 Spring AOP 集成、消息资源处理(国际化处理)、事件传递及各种不同应用层的 context 实现(如针对 web 应用的<code>WebApplicationContext</code>)。</p><p>用的比较多的 <code>BeanFactory</code> 的子类是 <code>ClassPathXmlApplicationContext</code>，这是   <code>ApplicationContext</code>接口的一个子类，<code>ClassPathXmlApplicationContext</code>从 xml 的配置文件中获取 bean 并且管理他们，例如：</p><pre><code class="java">public static void main(String[] args) throws Exception {    BeanFactory bf = new ClassPathXmlApplicationContext("student.xml");    Student studentBean = (Student) bf.getBean("studentBean");    studentBean.print();}</code></pre><p>XML配置如下：</p><pre><code class="jsx">&lt;bean id="studentBean" class="advanced.Student"&gt;    &lt;property name="name" value="Tom"/&gt;    &lt;property name="age" value="18"/&gt;&lt;/bean&gt;</code></pre><h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><p>Spring 中为我们提供了两种类型的 bean，一种就是普通的 bean，我们通过 <code>getBean(id)</code> 方法获得是该 bean 的实际类型，另外还有一种 bean 是 <code>FactoryBean</code>，也就是工厂 bean，我们通过 <code>getBean(id)</code> 获得是该工厂所产生的 Bean 的实例，而不是该 <code>FactoryBean</code> 的实例。</p><p><code>FactoryBean</code> 从名字上能看出这是一个Bean。Bean就是Spring对对象的一种定义，一个Bean就是一个或者一些同类型的对象。<br>FactoryBean是一个接口。</p><p>实现了 <code>FactoryBean</code> 接口的类有能力改变 bean，<code>FactoryBean</code> 希望你实现了它之后返回一些内容，Spring 会按照这些内容去注册 bean。<br> <code>public interface FactoryBean&lt;T&gt;</code>，提供如下方法：</p><pre><code class="java">public interface FactoryBean&lt;T&gt; {    //返回的对象实例    T getObject() throws Exception;    //Bean的类型    Class&lt;?&gt; getObjectType();    //true是单例，false是非单例  在Spring5.0中此方法利用了JDK1.8的新特性变成了default方法，返回true    boolean isSingleton();}</code></pre><p> <code>getObject</code>用来返回实例化后的对象。<br> <code>getObjectType</code>用来返回对象的类型。<br> <code>isSingleton</code>用来标识对象是否为单例的，这里默认为true，Spring会将实例化后的对象放入BeanFactory容器中。</p><p>通常情况下，bean 无须自己实现工厂模式，Spring 容器担任工厂 角色；但少数情况下，容器中的 bean 本身就是工厂，作用是产生其他 bean 实例。由工厂 bean 产生的其他 bean 实例，不再由 Spring 容器产生，因此与普通 bean 的配置不同，不再需要提供 class 元素。</p><p>凡是实现了FactoryBean接口的类，负责返回这个java类的实例化对象。<br>从设计模式的角度来看这就是典型的工厂方法模式。由一个特定的工厂来生产特定的java类的实例化对象。</p><p>那么这种写法有哪些好处呢？<br> 正常情况下，Spring中在实例化对象的时候，都是由BeanFactory从上下文中获取BeanDefinition信息，然后通过反射，调用这个java类的构造方法进行实例化。而现在这种形式，我们相当于将实例化的功能交给了FactoryBean去实现。这种方式主要使用在一些比较复杂的实例化过程中，并非简单地设置一些参数或者设置的参数过多，过程中可能需要做一些复杂的解析、判断和逻辑处理，这个时候交由Spring去通过反射进行实例化可能就不太灵活了，</p><p>Spring容器中有两种Bean，一种是普通的Bean对象，一种是实现了FactoryBean的工厂Bean对象。如果从BeanFactory中getBean的时候，获取到的Bean对象是工厂Bean，会自动的调用它的getObject方法返回真实实例化对象。<br> 如果就是需要获取FactoryBean对象，需要在getBean的时候加上前缀’&amp;’。</p><p>Spring自身就对FactoryBean有70多种实现，比较常见的就是Proxy，Jndi等场景。AOP中使用的ProxyFactoryBean。<br> Dubbo中使用的ReferenceBean。<br> Mybatis中使用的SqlSessionFactoryBean。</p><p>示例：<br> 构造一个 <code>FactoryBean</code> 的实现：</p><pre><code class="java">public class StudentFactoryBean implements FactoryBean&lt;Student&gt; {    private String name;    private int age;    @Override    public Student getObject() throws Exception {        return new Student(name, age);    }    @Override    public Class&lt;?&gt; getObjectType() {        return Student.class;    }    /**     * 工厂所管理的对象是否为单例的     * 即如果该方法返回true，那么通过getObject()方法返回的对象都是同一个对象     */    @Override    public boolean isSingleton() {        return true;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }}</code></pre><p>XML配置如下：</p><pre><code class="jsx">&lt;bean id="studentFactoryBean" class="spring.StudentFactoryBean"&gt;    &lt;property name="name" value="Tom"/&gt;    &lt;property name="age" value="28"/&gt;&lt;/bean&gt;</code></pre><p>使用：</p><pre><code class="java">public static void main(String[] args) throws Exception {    BeanFactory bf = new ClassPathXmlApplicationContext("student.xml");    Student studentBean = (Student) bf.getBean("studentFactoryBean");    studentBean.print();}</code></pre><h2 id="ObjectFactory"><a href="#ObjectFactory" class="headerlink" title="ObjectFactory"></a>ObjectFactory</h2><pre><code class="java">public interface ObjectFactory&lt;T&gt; {    //返回的对象实例    T getObject() throws BeansException;}</code></pre><p>这用于延迟查找的场景，它就是一个普通工厂，当得到 ObjectFactory 对象时，相当于 Bean 没有被创建，只有当 getObject() 方法时，才会触发 Bean 实例化等生命周期。<br> 主要用于暂时性地获取某个 Bean Holder 对象，如果过早的加载，可能会引起一些意外的情况，比如当 Bean A 依赖 Bean B 时，如果过早地初始化 A，那么 B 里面的状态可能是中间状态，这时候使用 A 容易导致一些错误。</p><blockquote><p>引用：<br><a class="link" href="https://www.jianshu.com/p/05c909c9beb0">https://www.jianshu.com/p/05c909c9beb0<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://www.jianshu.com/p/a2807797fed0">https://www.jianshu.com/p/a2807797fed0<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BeanFactory、FactoryBean和ObjectFactory&quot;&gt;&lt;a href=&quot;#BeanFactory、FactoryBean和ObjectFactory&quot; class=&quot;headerlink&quot; title=&quot;BeanFactory、Factor</summary>
      
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://example.com/tags/Spring/"/>
    
    <category term="BeanFactory" scheme="http://example.com/tags/BeanFactory/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2021/08/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/08/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-08-19T14:57:04.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<p>\b代表着单词的开头或结尾，也就是单词的分界处。</p><p>.是另一个元字符，匹配除了换行符以外的任意字符。</p><p>*<em>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定</em>前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.*连在一起就意味着任意数量的不包含换行的字符。</p><p>\d是个新的元字符，匹配一位数字(0，或1，或2，或……)。</p><p>0\d{2}-\d{8}。这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)。</p><table><thead><tr><th align="left">代码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">.</td><td align="center">匹配除换行符以外的任意字符</td></tr><tr><td align="left">\w</td><td align="center">匹配字母或数字或下划线或汉字</td></tr><tr><td align="left">\s</td><td align="center">匹配任意的空白符</td></tr><tr><td align="left">\d</td><td align="center">匹配数字</td></tr><tr><td align="left">\b</td><td align="center">匹配单词的开始或结束</td></tr><tr><td align="left">^</td><td align="center">匹配字符串的开始</td></tr><tr><td align="left">$</td><td align="center">匹配字符串的结束</td></tr><tr><td align="left">*</td><td align="center">重复零次或更多次</td></tr><tr><td align="left">+</td><td align="center">重复一次或更多次</td></tr><tr><td align="left">?</td><td align="center">重复零次或一次</td></tr><tr><td align="left">{n}</td><td align="center">重复n次</td></tr><tr><td align="left">{n,}</td><td align="center">重复n次或更多次</td></tr><tr><td align="left">{n,m}</td><td align="center">重复n到m次</td></tr><tr><td align="left">\W</td><td align="center">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td align="left">\S</td><td align="center">匹配任意不是空白符的字符</td></tr><tr><td align="left">\D</td><td align="center">匹配任意非数字的字符</td></tr><tr><td align="left">\B</td><td align="center">匹配不是单词开头或结束的位置</td></tr><tr><td align="left">[^x]</td><td align="center">匹配除了x以外的任意字符</td></tr><tr><td align="left">[^aeiou]</td><td align="center">匹配除了aeiou这几个字母以外的任意字符</td></tr><tr><td align="left"></td><td align="center"></td></tr><tr><td align="left"></td><td align="center"></td></tr><tr><td align="left"></td><td align="center"></td></tr><tr><td align="left"></td><td align="center"></td></tr><tr><td align="left"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="left">分类</th><th align="left">代码/语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">捕获</td><td align="left">(exp)</td><td align="left">匹配exp,并捕获文本到自动命名的组里</td></tr><tr><td align="left">(?<name>exp)</name></td><td align="left">匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td><td align="left"></td></tr><tr><td align="left">(?:exp)</td><td align="left">匹配exp,不捕获匹配的文本，也不给此分组分配组号</td><td align="left"></td></tr><tr><td align="left">零宽断言</td><td align="left">(?=exp)</td><td align="left">匹配exp前面的位置</td></tr><tr><td align="left">(?&lt;=exp)</td><td align="left">匹配exp后面的位置</td><td align="left"></td></tr><tr><td align="left">(?!exp)</td><td align="left">匹配后面跟的不是exp的位置</td><td align="left"></td></tr><tr><td align="left">(?&lt;!exp)</td><td align="left">匹配前面不是exp的位置</td><td align="left"></td></tr><tr><td align="left">注释</td><td align="left">(?#comment)</td><td align="left">这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><p>常用正则表达式</p><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$"等字符：**[^%&amp;’,;=?$\x22]+**</li><li>禁止输入含有<del>的字符：**[^</del>\x22]+**</li></ul><hr><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名：**[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?**</li><li>InternetURL：**[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$**</li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：**(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)**</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式：**[\u4e00-\u9fa5]**</li><li>双字节字符：**[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))**</li><li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：**&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)**</li><li>腾讯QQ号：**[1-9][0-9]{4,} (腾讯QQ号从10000开始)**</li><li>中国邮政编码：**[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)**</li><li>IPv4地址：**((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}**</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;\b代表着单词的开头或结尾，也就是单词的分界处。&lt;/p&gt;
&lt;p&gt;.是另一个元字符，匹配除了换行符以外的任意字符。&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定&lt;/em&gt;前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此</summary>
      
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="tool" scheme="http://example.com/tags/tool/"/>
    
    <category term="learn" scheme="http://example.com/tags/learn/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>任务执行和调度</title>
    <link href="http://example.com/2021/08/19/%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%92%8C%E8%B0%83%E5%BA%A6/"/>
    <id>http://example.com/2021/08/19/%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%92%8C%E8%B0%83%E5%BA%A6/</id>
    <published>2021-08-19T13:17:31.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<p>任务调度组件基于多线程，但凡用多线程，一定会用到线程池，因为创建线程是有开销的，且开销较大。使用线程池来管理线程，能够让线程复用，提高处理能力，节约资源。</p><h2 id="线程池思想概述"><a href="#线程池思想概述" class="headerlink" title="线程池思想概述"></a>线程池思想概述</h2><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：</p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p><p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p><p>在Java中可以通过线程池来达到这样的效果。</p><h2 id="线程池概念"><a href="#线程池概念" class="headerlink" title="线程池概念"></a>线程池概念</h2><ul><li><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li></ul><p>​    线程池的工作原理：</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UAjQlROOYSJDFl5/root/content"></p><p>合理利用线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><h2 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h2><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有个创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li></ul><p>获取到了一个线程池ExecutorService 对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下：</p><ul><li><p><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</p><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用。</p></blockquote></li></ul><p>使用线程池中线程对象的步骤：</p><ol><li>创建线程池对象。</li><li>创建Runnable接口子类对象。(task)</li><li>提交Runnable接口子类对象。(take task)</li><li>关闭线程池(一般不做)。</li></ol><h2 id="JDK线程池"><a href="#JDK线程池" class="headerlink" title="JDK线程池"></a>JDK线程池</h2><pre><code class="Java">public class ThreadPoolTest {    private static final Logger logger = LoggerFactory.getLogger(ThreadPoolTest.class);    // JDK普通线程池    private ExecutorService executorService = Executors.newFixedThreadPool(5);//通过工厂Executors来实例化，实例化后包含五个线程，反复复用这五个线程    // JDK可执行定时任务的线程池    private ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5);    // Spring普通线程池    @Autowired    private ThreadPoolTaskExecutor taskExecutor;    // Spring可执行定时任务的线程池    @Autowired    private ThreadPoolTaskScheduler taskScheduler;    @Autowired    private AlphaService alphaService;       /* ThreadPoolTest是junit测试方法，其和main方法不一样，如果在main方法里启动线程，该线程不挂掉的话，   main会挡着ThreadPoolTest执行，使得main会挡着ThreadPoolTest执行，不会立刻结束。    但是junit测试方法 每启动一个子线程，和当前线程是并发的，如果test方法没有逻辑，立刻就结束了，不管启动的线程有没有完成。    因此当test方法启动完一个线程以后，等其执行完以后在关闭线程。则让当前主线程sleep（阻塞）一会儿*/   private void sleep(long m) {//m单位是毫秒       try {           Thread.sleep(m);//当前线程阻塞       } catch (InterruptedException e) {           e.printStackTrace();       }   }}</code></pre><h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><pre><code class="java">// 1.JDK普通线程池@Testpublic void testExecutorService() {//需要给线程池一个任务 来使得线程池 分配一个线程去执行。任务即是线程体。    Runnable task = new Runnable() {        @Override        public void run() {            logger.debug("Hello ExecutorService");        }    };    for (int i = 0; i &lt; 10; i++) {//执行10次        executorService.submit(task);//每调用一个submit方法，线程池都会给其分配一个线程以执行线程体。    }    sleep(10000);//不然，线程还没执行完，方法就结束了。1w毫秒就是10s}</code></pre><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UH5olRNXh6dQqQw/root/content"></p><h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><pre><code class="java">// 2.JDK定时任务线程池（设置时间间隔不断执行，要提供一个线程体）@Testpublic void testScheduledExecutorService() {    Runnable task = new Runnable() {        @Override        public void run() {            logger.debug("Hello ScheduledExecutorService");        }    };    scheduledExecutorService.scheduleAtFixedRate(task, 10000, 1000, TimeUnit.MILLISECONDS);    //第一个参数是任务。第二个参数是该任务延迟多少ms才执行。第三个参数是时间间隔ms，第三个参数是声明时间单位TimeUnit.MILLISECONDS    sleep(30000);}</code></pre><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UIhyBroVAOfMX2N/root/content"></p><h2 id="Spring线程池"><a href="#Spring线程池" class="headerlink" title="Spring线程池"></a>Spring线程池</h2><p>在application properties中增加</p><pre><code class="xml"># TaskExecutionProperties spring普通线程池的配置# 线程池中有几个核心线程spring.task.execution.pool.core-size=5# 当核心线程不够用，最多扩展到15个spring.task.execution.pool.max-size=15#queue-capacity指队列容量，当15个线程还是不够用，需要将其放在队列中等候。设置队列能缓冲一百个任务spring.task.execution.pool.queue-capacity=100# TaskSchedulingProperties spring能启动定时任务的线程池的配置spring.task.scheduling.pool.size=5</code></pre><h3 id="ThreadPoolTaskExecutor"><a href="#ThreadPoolTaskExecutor" class="headerlink" title="ThreadPoolTaskExecutor"></a>ThreadPoolTaskExecutor</h3><pre><code class="java">// Spring普通线程池@Autowiredprivate ThreadPoolTaskExecutor taskExecutor;// 3.Spring普通线程池@Testpublic void testThreadPoolTaskExecutor() {    Runnable task = new Runnable() {//声明线程体        @Override        public void run() {            logger.debug("Hello ThreadPoolTaskExecutor");        }    };    for (int i = 0; i &lt; 10; i++) {        taskExecutor.submit(task);    }    sleep(10000);}</code></pre><p>执行的时候会报错</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UN7bZ2z1ygRZgK9/root/content"></p><pre><code>@Configuration@EnableScheduling//如果不加EnableScheduling，则表明定时任务没有开启@EnableAsync//使AlphaService中的@Async注解生效public class ThreadPoolConfig {}</code></pre><p>执行结果：<img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29USWCgTlEPXs4k1r/root/content"></p><p><strong>Spring普通线程池 比jdk线程池更灵活，因为可以设置 核心线程个数，扩展线程个数</strong></p><h3 id="ThreadPoolTaskScheduler"><a href="#ThreadPoolTaskScheduler" class="headerlink" title="ThreadPoolTaskScheduler"></a>ThreadPoolTaskScheduler</h3><pre><code class="java">// Spring可执行定时任务的线程池//@Autowired//private ThreadPoolTaskScheduler taskScheduler;// 4.Spring定时任务线程池@Testpublic void testThreadPoolTaskScheduler() {    Runnable task = new Runnable() {        @Override        public void run() {            logger.debug("Hello ThreadPoolTaskScheduler");        }    };    Date startTime = new Date(System.currentTimeMillis() + 10000);//当前时间延迟一万毫秒，就是现在的时间    taskScheduler.scheduleAtFixedRate(task, startTime, 1000);//以固定频率执行，执行时间间隔    sleep(30000);//阻塞三十秒}</code></pre><p>结果：<img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UW_b0gq-Vu7aLHf/root/content"></p><p>jdk线程池是jdk自带的，spring线程池是spring自带的， 其中ExecutorService和ThreadPoolTaskExecutor是普通线程池。</p><p>ScheduledExecutorService以及ThreadPoolTaskScheduler所创建的线程可以执行定时任务。但是分布式的时候，这俩是有问题的，scheduler不合适，因为scheduler程序运行所依赖的参数都是存在数据库中的，scheduler没有解决分布式的问题。<br>比如，每隔十分钟，删掉一个临时文件，两个都会这样做，会产生一定冲突。<br>jdk和spring的定时任务组件，都是基于内存的，配置多长时间运行一次，配置参数都在内存中，但是服务器1和2内存不共享，不能知道各自正在干嘛，因此会产生一定冲突。因此分布式下用Quartz更多。</p><p>Quartz程序运行所依赖的参数都是存在数据库（DB）里面的，因此不管部署多少个Quartz，都会访问同一个数据库。（服务器可以有多个，但是数据库只有一个）。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UanjULNbCoAQXbA/root/content"></p><p>浏览器把请求发给Nginx，Nginx依据一定策略，选择服务器对请求进行处理，如果是普通请求，则是分配给controller处理。如果改为Quartz，可以对不同的请求进行排队操作。</p><h2 id="分布式定时任务"><a href="#分布式定时任务" class="headerlink" title="分布式定时任务"></a>分布式定时任务</h2><h3 id="Spring-Quartz"><a href="#Spring-Quartz" class="headerlink" title="Spring Quartz"></a>Spring Quartz</h3><p>DB有一套表，需要我们提前创建。这个表就是Quartz 所需要的表<br>该表即为Quartz依赖的表</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UdF3mPl7u1ywGCP/root/content"></p><p>在maven里导入Quartz的包</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UhjBni3rt7-uciA/root/content"></p><pre><code class="xml"> &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre><p>然后看看源码：<br>job、Scheduler、jobdetail（用来配置job）、trigger触发器（设置以什么样的频率反复运行）</p><p>通过job接口定义一个任务，通过jobdetail以及trigger接口来配置job，主要做这三个事情。<br>配置好，重新启动，Quartz就会重新启动配置信息，并将读到的配置信息存到数据库（表）中，Quartz以后都会读取表中这些信息，来执行任务。<br>trigger第一次启动服务时用，以后就不用了<br>通过jobdetail配置的信息，都存到这个表里。</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29UmQrRwDs2RH705b/root/content"></p><p>任务的名字<br>job的名字<br>job的分组<br>job的描述<br>job对应的类<br>…</p><h3 id="QuartzConfig"><a href="#QuartzConfig" class="headerlink" title="QuartzConfig"></a>QuartzConfig</h3><pre><code class="java">// 配置（仅在第一次被读取到） -&gt; 信息被初始化到数据库 -&gt; quartz访问数据库去调用该任务，不在访问配置文件@Configurationpublic class QuartzConfig {    //FactoryBean和之前一开始学的IOC 学到的 BeanFactory有本质区别；BeanFactory是整个IOC容器的顶层接口    // FactoryBean主要目的是 简化Bean的实例化过程，因为有的Bean实例化过程比较复杂:    // 1.通过FactoryBean封装Bean的实例化过程.    // 2.将FactoryBean装配到Spring容器里.    // 3.将FactoryBean注入给其他的Bean.    // 4.该Bean得到的是FactoryBean所管理的对象实例.// 配置JobDetail// @Beanpublic JobDetailFactoryBean alphaJobDetail() {//Bean的名字是alphaJobDetail。初始化该bean，想当于将其装配到容器中    JobDetailFactoryBean factoryBean = new JobDetailFactoryBean();//实例化对象    factoryBean.setJobClass(AlphaJob.class);    factoryBean.setName("alphaJob");//声明job任务的名字    factoryBean.setGroup("alphaJobGroup");//声明任务的组    factoryBean.setDurability(true);//声明任务是否长久保存，哪怕任务不再运行。连触发器都没有了，也会一直报存    factoryBean.setRequestsRecovery(true);//声明任务是否可恢复    return factoryBean;}// 配置Trigger(SimpleTriggerFactoryBean比较简单，每十天要做...； CronTriggerFactoryBean复杂，每个月月底前两天要做...)// @Beanpublic SimpleTriggerFactoryBean alphaTrigger(JobDetail alphaJobDetail) {//Trigger依赖于JobDetail，因此需要读取    SimpleTriggerFactoryBean factoryBean = new SimpleTriggerFactoryBean();    factoryBean.setJobDetail(alphaJobDetail);    factoryBean.setName("alphaTrigger");    factoryBean.setGroup("alphaTriggerGroup");    factoryBean.setRepeatInterval(3000);//多长时间执行一次任务    factoryBean.setJobDataMap(new JobDataMap());//Trigger底层需要存储一些状态，新建JobDataMap对象来存储    return factoryBean;}</code></pre><p>测试：<img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29VAFa8eYLWbJCLyJ/root/content"></p><p>Quartz底层也依赖于线程池，线程池有一默认配置，如果想重新配置底层线程池，需要在application properties中进行配置。</p><pre><code class="c"># QuartzPropertiesspring.quartz.job-store-type=jdbc//任务用jdbc来存储spring.quartz.scheduler-name=communityScheduler//调度器的名字spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO//调度器的id 自动生成spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTXspring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate//驱动StdJDBCDelegatespring.quartz.properties.org.quartz.jobStore.isClustered=true//是否采用集群方式，是spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool//用org.quartz.simpl.SimpleThreadPool线程池spring.quartz.properties.org.quartz.threadPool.threadCount=5//线程数量</code></pre><p>做了如上配置以后，<br>表里出现了如下信息：</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29VH7JbtJ1b_m7xBv/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29VIB-YTAd8pUQtyS/root/content"></p><p>新建QuartzTests</p><pre><code>@RunWith(SpringRunner.class)@SpringBootTest@ContextConfiguration(classes = CommunityApplication.class)public class QuartzTests {@Autowiredprivate Scheduler scheduler;@Testpublic void testDeleteJob() {    try {        boolean result = scheduler.deleteJob(new JobKey("alphaJob", "alphaJobGroup"));        System.out.println(result);    } catch (SchedulerException e) {        e.printStackTrace();    }}}</code></pre><p>返回true<br>确实删除了<br><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29VMSEVKpwBrm5h7u/root/content"><br>这里面存着不是job，而是scheduler，所以东西还在<br><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29VT4CNbMlAlcQ5ox/root/content"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;任务调度组件基于多线程，但凡用多线程，一定会用到线程池，因为创建线程是有开销的，且开销较大。使用线程池来管理线程，能够让线程复用，提高处理能力，节约资源。&lt;/p&gt;
&lt;h2 id=&quot;线程池思想概述&quot;&gt;&lt;a href=&quot;#线程池思想概述&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="Quartz" scheme="http://example.com/tags/Quartz/"/>
    
    <category term="线程池" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>github hexo搭建博客</title>
    <link href="http://example.com/2021/08/19/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/08/19/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-08-19T13:00:02.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><pre><code class="bash">$ cd /f/Workspaces/hexo/$ hexo init</code></pre><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="http://image.liuxianan.com/201608/20160818_115922_773_1148.png" alt="img"></p><pre><code class="bash">$ hexo g # 生成$ hexo s # 启动服务</code></pre><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p><img src="http://image.liuxianan.com/201608/20160818_120700_028_2426.png" alt="img"></p><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a class="link" href="http://localhost:4000/">http://localhost:4000<i class="fas fa-external-link-alt"></i></a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p><p><a class="link" href="http://blog.liuxianan.com/windows-port-bind.html">http://blog.liuxianan.com/windows-port-bind.html<i class="fas fa-external-link-alt"></i></a></p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><pre><code>deploy:  type: git  repository: git@github.com:liuxianan/liuxianan.github.io.git  branch: master</code></pre><p>错误写法：</p><pre><code>deploy:  type: github  repository: https://github.com/liuxianan/liuxianan.github.io.git  branch: master</code></pre><p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报如下错误：</p><pre><code>Deployer not found: github 或者 Deployer not found: git</code></pre><p>原因是还需要安装一个插件：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><h2 id="保留CNAME、README-md等文件"><a href="#保留CNAME、README-md等文件" class="headerlink" title="保留CNAME、README.md等文件"></a>保留CNAME、README.md等文件</h2><p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29mXwhJuiPxza3DOz/root/content"></p><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><p>常见命令</p><pre><code>hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><p>缩写：</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>组合命令：</p><pre><code>hexo s -g #生成并本地预览hexo d -g #生成并上传</code></pre><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>定位到我们的hexo根目录，执行命令：</p><pre><code>hexo new 'my-first-blog'</code></pre><p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p><p><img src="http://image.liuxianan.com/201608/20160823_183047_352_1475.png" alt="img"></p><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><p><img src="http://image.liuxianan.com/201608/20160823_183325_470_9306.png" alt="img"></p><p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：</p><pre><code class="markdown">---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文</code></pre><p>那么<code>hexo new page 'postName'</code>命令和<code>hexo new 'postName'</code>有什么区别呢？</p><pre><code>hexo new page "my-second-blog"</code></pre><p>生成如下：</p><p><img src="http://image.liuxianan.com/201608/20160823_184852_854_6502.png" alt="img"></p><p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code>，但是它不会作为文章出现在博文目录。</p><h3 id="何让博文列表不显示全部内容"><a href="#何让博文列表不显示全部内容" class="headerlink" title="何让博文列表不显示全部内容"></a>何让博文列表不显示全部内容</h3><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p><pre><code class="markdown"># 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等；</code></pre><p>最终效果：</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TVTEcVa4uR_88G0/root/content"></p><h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><pre><code>hexo server</code></pre><blockquote><p>上面命令在cmd命令行执行后，打开<a class="link" href="http://localhost:4000/%EF%BC%8C%E6%89%BE%E5%88%B0%E5%88%9A%E6%89%8D%E7%BC%96%E8%BE%91%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%97%A0%E8%AF%AF%E5%90%8E%E6%89%A7%E8%A1%8C%E4%B8%8B%E4%B8%80%E6%AD%A5">http://localhost:4000/，找到刚才编辑的文章，查看无误后执行下一步<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><blockquote><p>生成静态网页</p></blockquote><pre><code>hexo generate</code></pre><blockquote><p>发布网站（推送到github或者gitee）</p></blockquote><pre><code>hexo deploy </code></pre><blockquote><p>也可简写为（一起执行上边两个命令）</p></blockquote><pre><code>hexo g -d或hexo d -g</code></pre><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a class="link" href="http://www.cnblogs.com/zhcncn/p/4097881.html">http://www.cnblogs.com/zhcncn/p/4097881.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="http://www.jianshu.com/p/05289a4bc8b2">http://www.jianshu.com/p/05289a4bc8b2<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是&lt;code&gt;F:\Workspaces\hexo&lt;/cod</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>图片文件压缩并上传至阿里云OSS</title>
    <link href="http://example.com/2021/06/22/%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E5%B9%B6%E4%B8%8A%E4%BC%A0%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    <id>http://example.com/2021/06/22/%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E5%B9%B6%E4%B8%8A%E4%BC%A0%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91OSS/</id>
    <published>2021-06-22T06:07:51.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h1><h2 id="Thumbnails"><a href="#Thumbnails" class="headerlink" title="Thumbnails"></a>Thumbnails</h2><p>在进行Java开发时可以使用Thumbnails工具类对图片进行处理，旋转、裁剪、格式转换、加水印等。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;net.coobird&lt;/groupId&gt;    &lt;artifactId&gt;thumbnailator&lt;/artifactId&gt;    &lt;version&gt;0.4.8&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="1-读入源图片"><a href="#1-读入源图片" class="headerlink" title="1.读入源图片"></a>1.读入源图片</h5><p>能够批量处理，多个文件或者文件夹:</p><p><code>Thumbnails.of(BufferedImage... images)</code> 从<code>BufferedImage</code>读入源；</p><p><code>Thumbnails.of(File... files)</code> 从文件或者文件夹读入源；</p><p><code>Thumbnails.of(InputStream... inputStreams)</code> 从流读入源；</p><p><code>Thumbnails.of(String... files)</code> </p><p><code>Thumbnails.of(URL... urls)</code> </p><h5 id="2-设置大小，按比例或者拉伸"><a href="#2-设置大小，按比例或者拉伸" class="headerlink" title="2.设置大小，按比例或者拉伸"></a>2.设置大小，按比例或者拉伸</h5><p><code>.size(int width, int height)</code> 按比例，使原图撑满size大小；</p><p><code>.width(int width)</code> 设置宽，高按比例；</p><p><code>.height(int height)</code> 设置高，宽按比例；</p><p><code>.forceSize(int width, int height)</code> 设置宽高，不按比例，会按照设置的宽高拉伸；</p><p><code>.scale(double scale)</code> 按比例缩放，0~1缩小，1原比例，&gt;1放大；</p><p><code>.scale(double scaleWidth, double scaleHeight)</code> 长宽各自设置比例，会拉伸；</p><p><code>.scalingMode(ScalingMode config)</code> 缩放模式（ScalingMode枚举BICUBIC、BILINEAR、PROGRESSIVE_BILINEAR）；</p><p><code>.keepAspectRatio(boolean keep)</code> 设置是否按比例，false不按比例；</p><p><strong>注</strong>：size、width/height、scale、forceSize不能并用；size至关于width+height；forceSize关于设置长款+keepAspectRatio=false，因此forceSize不能跟其余设置长款属性、keepAspectRatio并用；</p><h5 id="3-剪裁"><a href="#3-剪裁" class="headerlink" title="3.剪裁"></a>3.剪裁</h5><p><code>.sourceRegion(int x, int y, int width, int height)</code> 剪裁原图，坐标x,y起始，剪裁出宽度width高度height的图像，x向右为正，y向下为正，width（向右）和height（向下）必须大于0；</p><p><code>.sourceRegion(Position position, int width, int height)</code> 剪裁原图，区域位置position可用Positions枚举的9个位置或者实现Position接口的实现类；</p><p><code>.sourceRegion(Position position, Size size)</code> </p><p><code>.sourceRegion(Rectangle region)</code> </p><p><code>.sourceRegion(Region sourceRegion)</code> </p><p><code>.crop(Position position)</code> 剪裁生成的缩略图，按照size设定剪裁；</p><h5 id="4-旋转"><a href="#4-旋转" class="headerlink" title="4.旋转"></a>4.旋转</h5><p><code>.rotate(double angle)</code> 旋转角度，顺时针为正；</p><h5 id="5-水印"><a href="#5-水印" class="headerlink" title="5.水印"></a>5.水印</h5><p><code>.watermark(BufferedImage image)</code> 中心位置50%透明度设置水印；</p><p><code>.watermark(BufferedImage image, float opacity)</code> 中心位置，opacity的不透明度设置水印（0.0&lt;=opacity&lt;=1.0）；</p><p><code>.watermark(Position position, BufferedImage image, float opacity)</code> 在position位置，opacity不透明度设置水印；</p><p><code>.watermark(Watermark w)</code> </p><h5 id="6-质量"><a href="#6-质量" class="headerlink" title="6.质量"></a>6.质量</h5><p><code>.outputQuality(double quality)</code> 质量0.0&lt;=quality&lt;=1.0；</p><p><code>.outputQuality(float quality)</code> </p><h5 id="7-输出格式"><a href="#7-输出格式" class="headerlink" title="7.输出格式"></a>7.输出格式</h5><p><code>.outputFormat(String format)</code> 设置输出格式（可用<code>ImageIO.getWriterFormatNames()</code>得到支持的格式），[JPG, jpg, bmp, BMP, gif, GIF, WBMP, png, PNG, wbmp, jpeg, JPEG]；</p><p><code>.outputFormatType(String formatType)</code> </p><p><code>.useOriginalFormat()</code> 使用原图格式；</p><h5 id="8-输出图片"><a href="#8-输出图片" class="headerlink" title="8.输出图片"></a>8.输出图片</h5><p><code>.asBufferedImage()</code> 返回<code>BufferedImage</code>对象；</p><p><code>.asBufferedImages()</code> 返回多个<code>BufferedImage</code>对象；</p><p><code>.asFiles(Rename rename)</code> 返回文件列表，并按照重命名规则生成文件（Rename抽象类属性：Rename.NO_CHANGE 名称不变，Rename.PREFIX_DOT_THUMBNAIL 名称前缀“thumbnail.”，Rename.PREFIX_HYPHEN_THUMBNAIL 名称前缀“thumbnail-”，Rename.SUFFIX_DOT_THUMBNAIL 名称后缀“.thumbnail”，Rename.SUFFIX_HYPHEN_THUMBNAIL 名称后缀“-thumbnail”）；</p><p><code>.asFiles(File destinationDir, Rename rename)</code> 返回文件列表，并按照指定的重命名规则生成到指定目录里（文件夹要存在）；</p><p><code>.asFiles(Iterable&lt;File&gt; iterable)</code> </p><p><code>.toFile(File outFile)</code> 无返回，写入文件里（若是没有后缀名会自动添加，下同）；</p><p><code>.toFile(String outFilepath)</code> </p><p><code>.toFiles(File destinationDir, Rename rename)</code> 无返回，按照重命名规则生成到文件夹里；</p><p><code>.toFiles(Iterable&lt;File&gt; iterable)</code> </p><p><code>.toFiles(Rename rename)</code> </p><p><code>.toOutputStream(OutputStream os)</code> 无返回，写入outputStream里；</p><p><code>.toOutputStreams(Iterable&lt;? extends OutputStream&gt; iterable)</code> </p><p><code>.allowOverwrite(boolean allowOverwrite)</code> 设置是否覆盖已存在的文件（只对toFile、toFiles、asFiles有效）；</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><pre><code class="Java">Thumbnails.of(image).size(200, 300).toFile(filePathAndName);//指定大小进行缩放Thumbnails.of(image).scale(0.25f).toFile(filePathAndName);//指定比例进行缩放Thumbnails.of(image).size(120, 120).keepAspectRatio(false).toFile(filePathAndName);//不按照比例指定大小进行缩放.rotate(90)//旋转   rotate(角度),正数：顺时针 负数：逆时针.watermark(Positions.BOTTOM_RIGHT, ImageIO.read(new File("images/watermark.png")), 0.5f)  // watermark(位置，水印图，透明度).sourceRegion()  // 裁剪.outputFormat("png")  //转化图像格式Thumbnails.of(image).scale(0.25f).toOutputStream(os); //输出到OutputStreamThumbnails.of(image).scale(0.25f).asBufferedImage();  //输出到BufferedImage</code></pre><h1 id="阿里云OSS文件上传"><a href="#阿里云OSS文件上传" class="headerlink" title="阿里云OSS文件上传"></a>阿里云OSS文件上传</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>阿里云对象存储服务，简称 OSS，是一种面向海量数据规模的分布式存储服务。</p><h2 id="注册开通略"><a href="#注册开通略" class="headerlink" title="注册开通略"></a>注册开通略</h2><h2 id="配置OSS"><a href="#配置OSS" class="headerlink" title="配置OSS"></a>配置OSS</h2><p>AccessKey</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29XReyHZPQ03RifSc/root/content"></p><p>创建Bucket </p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29mALscR5FV7ZmMQH/root/content"></p><h2 id="学习使用API"><a href="#学习使用API" class="headerlink" title="学习使用API"></a>学习使用API</h2><p><a class="link" href="https://help.aliyun.com/document_detail/31948.html?spm=5176.208357.1107607.18.1e88390fheeEwP">https://help.aliyun.com/document_detail/31948.html?spm=5176.208357.1107607.18.1e88390fheeEwP<i class="fas fa-external-link-alt"></i></a></p><h3 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;    &lt;version&gt;3.10.2&lt;/version&gt;&lt;/dependency&gt;//如果使用的是Java 9及以上的版本，则需要添加jaxb相关依赖。添加jaxb相关依赖示例代码如下：&lt;dependency&gt;    &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;    &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;    &lt;version&gt;2.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;javax.activation&lt;/groupId&gt;    &lt;artifactId&gt;activation&lt;/artifactId&gt;    &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- no more than 2.3.3--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;    &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;    &lt;version&gt;2.3.3&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>application.properties</p><pre><code class="xml">#阿里云 OSS#不同的服务器，地址不同   ==前面后面都不能加空格！！！！！！！！！！！！！！！！！1aliyun.oss.endpoint=oss-cn-beijing.aliyuncs.comaliyun.oss.accessKeyId=LTAI5t7hmUCakcQsHTSedsfEaliyun.oss.accessKeySecret=PwAZRnMx4p5GKFFF2ksdsaffdsiG#bucket可以在控制台创建，也可以使用java代码创建aliyun.oss.bucketName=greatbrookaliyun.oss.url=https://greatbrook.oss-cn-beijing.aliyuncs.com //文件存储地址</code></pre><h3 id="以用户上传头像为例"><a href="#以用户上传头像为例" class="headerlink" title="以用户上传头像为例"></a>以用户上传头像为例</h3><p>头像链接headerUrl保存在user表中，用户在网页选择并上传头像时</p><p>1.后端接收headerImage，并判断接收文件是否为jpg或png文件，不是则返回”文件格式不正确”。</p><p>2.使用Thumbnails工具对传入的图片进行处理，压缩图片尺寸，并输出BufferedImage对象。</p><p>3.根据配置创建文件上传客户端，使用OSSClientBuilder()。</p><p>4.上传处理过后的图片inputStream，更改文件名。关闭客户端。</p><p>5.将返回的用户头像路径写入user表。</p><h4 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h4><h4 id="用户表-user"><a href="#用户表-user" class="headerlink" title="用户表 user"></a>用户表 user</h4><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键、自增</td></tr><tr><td>username</td><td>varchar</td><td>用户名，创建索引</td></tr><tr><td>password</td><td>varchar</td><td>用户密码</td></tr><tr><td>salt</td><td>varchar</td><td>加密盐值</td></tr><tr><td>email</td><td>varchar</td><td>用户邮箱，创建索引</td></tr><tr><td>type</td><td>int</td><td>用户类型：0 普通、1 管理员、2 版主</td></tr><tr><td>status</td><td>int</td><td>用户状态：0 未激活、1 已激活</td></tr><tr><td>activation_code</td><td>varchar</td><td>激活码</td></tr><tr><td>header_url</td><td>varchar</td><td>用户头像地址</td></tr><tr><td>create_time</td><td>timestamp</td><td>注册时间</td></tr></tbody></table><h4 id="user-mapper-xml"><a href="#user-mapper-xml" class="headerlink" title="user_mapper.xml"></a>user_mapper.xml</h4><pre><code>&lt;update id="updateHeader"&gt;    update User set header_url = #{headerUrl} where id = #{id}&lt;/update&gt;</code></pre><h4 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h4><pre><code>@Mapperpublic interface UserMapper {    User selectById(int id);    User selectByName(String username);    User selectByEmail(String email);    int insertUser(User user);    int updateStatus(int id,int status);    int updateHeader(int id, String headerUrl);    int updatePassword(int id, String password);}</code></pre><h4 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h4><pre><code>@Servicepublic class UserService{//更新头像  引入redis缓存user所以要先更新再清除缓存 不然会引起mysql和redis的冲突    public int updateHeader(int userId, String headerUrl) {        //return userMapper.updateHeader(userId, headerUrl);  mysql实现方式        int rows = userMapper.updateHeader(userId, headerUrl);        clearCache(userId);        return rows;    }}</code></pre><h4 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4><pre><code>    private static final Logger logger = LoggerFactory.getLogger(UserController.class);//导入相关路径    @Value("${community.path.upload}")    private String uploadPath;    @Value("${community.path.domain}")    private String domain;    @Value("${server.servlet.context-path}")    private String contextPath;    @Value("${aliyun.oss.endpoint}")    private String endpoint;    @Value("${aliyun.oss.accessKeyId}")    private String accessKeyId;    @Value("${aliyun.oss.accessKeySecret}")    private String accessKeySecret;    @Value("${aliyun.oss.bucketName}")    private String bucketName;    @Value("${aliyun.oss.url}")    private String url;    //文件存储目录    private String filedir = "header/";    @Autowired    private UserService userService;    @Autowired    private HostHolder hostHolder;//上传头像    @LoginRequired    @RequestMapping(path = "/upload",method = RequestMethod.POST)    public String uploadHeader(MultipartFile headerImage, Model model){          if (headerImage.isEmpty()){            model.addAttribute("error","您还没有选择图片！");            return "/site/setting";        } //如果图片为空返回error        String fileName = headerImage.getOriginalFilename();        String suffix = fileName.substring(fileName.lastIndexOf(".") + 1 );        //只允许上传.jpg和.png文件 方法很原始 不安全可以采用头文件判断         if (StringUtils.isBlank(suffix)||!("jpg".equals(suffix)||"png".equals(suffix)||"jpeg".equalsIgnoreCase(suffix))){            model.addAttribute("error","文件格式不正确");            return "/site/setting";        }        try {            //生成随机文件名            fileName = CommunityUtil.generateUUID() + "." + suffix;           //Thumbnails处理图片            BufferedImage bi = Thumbnails.of(headerImage.getInputStream())                    .scale(0.25f)                    .asBufferedImage();            //图片处理为正方形            int init_width = bi.getWidth();            int init_height = bi.getHeight();            if (init_width != init_height){                int width_height = 0;                int x = 0;                int y = 0;                if (init_width &gt; init_height) {                    width_height = init_height;//原图是宽大于高的长方形                    x = (init_width-init_height)/2;                    y = 0;                } else if (init_width &lt; init_height) {                    width_height = init_width;//原图是高大于宽的长方形                    y = (init_height-init_width)/2;                    x = 0;                }                bi = bi.getSubimage(x, y, width_height, width_height);            }            ByteArrayOutputStream os = new ByteArrayOutputStream();            //ImageIO.write(image, "JPEG", out);            ImageIO.write(bi, suffix, os); //图片写入到 ImageOutputStream 和之前格式一致           InputStream inputStream = new ByteArrayInputStream(os.toByteArray());            //文件上传            //设置文件路径和名称            String fileUrl = filedir + fileName;            //上传文件            //阿里云文件上传客户端  创建OSSClient实例。            OSS client = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);            //调用oss方法实现上传            //参数1：Bucket名称            //参数2：上传到oss的文件路径和文件名            //参数3：上传文件输入流            client.putObject(bucketName, fileUrl, inputStream);            //删除旧头像            User user = hostHolder.getUser();            if ( user.getHeaderUrl() != null){                String[] objectNames = user.getHeaderUrl().split("/");                String objectName = filedir + objectNames[4];                if (objectName != null) {                    client.deleteObject(bucketName, objectName);                    logger.info("删除旧头像成功"+objectName);                }            }            // 关闭OSSClient            client.shutdown();            //更新当前用户头像的路径（web访问 Http://loacalhost:8080/community/user/header/xxx.png）            User user = hostHolder.getUser();            //String headerUrl = domain + contextPath +"/user/header/" +fileName;            String headerUrl = url + "/" + fileUrl;            userService.updateHeader(user.getId(),headerUrl);                 return "redirect:/index";        } catch (IOException e) {            model.addAttribute("error",e.getMessage());            return "/site/setting";        }}</code></pre><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29mFFJ4BqEqPIIqph/root/content"></p><p>原图片2.07MB</p><p>上传成功并获取返回链接写入user表</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29mKz81o6_SPTQHZ4/root/content"></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29mMsnWVsGGXKKw6m/root/content"></p><p>查看OSS中图片确实上传成功 且图片是压缩过后的21.97kb</p><p>而且Thumbnails的一系列处理也杜绝了shell等文件通过修改后缀名为jpg和png等格式绕过检测上传到服务器的问题。</p><p>以上就是对图片文件处理并上传到阿里云OSS的简单介绍，如果有疑问或者纠错可以通过邮件与我联系。</p><blockquote><p>引用：</p><p><a class="link" href="https://www.shangmayuan.com/a/24fb08cae151401f973f0f60.html">https://www.shangmayuan.com/a/24fb08cae151401f973f0f60.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/qq_41950447/article/details/115962254">https://blog.csdn.net/qq_41950447/article/details/115962254<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://bbs.csdn.net/topics/392077729?list=lz">https://bbs.csdn.net/topics/392077729?list=lz<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://help.aliyun.com/document_detail/32008.html?spm=5176.208357.1107607.21.331b390f9Z4W5C">https://help.aliyun.com/document_detail/32008.html?spm=5176.208357.1107607.21.331b390f9Z4W5C<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图片处理&quot;&gt;&lt;a href=&quot;#图片处理&quot; class=&quot;headerlink&quot; title=&quot;图片处理&quot;&gt;&lt;/a&gt;图片处理&lt;/h1&gt;&lt;h2 id=&quot;Thumbnails&quot;&gt;&lt;a href=&quot;#Thumbnails&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="aliyun" scheme="http://example.com/tags/aliyun/"/>
    
    <category term="oss" scheme="http://example.com/tags/oss/"/>
    
    <category term="project" scheme="http://example.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>论坛项目总结</title>
    <link href="http://example.com/2021/06/20/%E8%AE%BA%E5%9D%9B%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/06/20/%E8%AE%BA%E5%9D%9B%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2021-06-20T12:57:04.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>涉及到Spring、SpringMVC、Mybatis的整合，以及SpringBoot去简化Spring的配置开发</p><p>主要的技术点：</p><p>登录注册功能：使用kaptcha去生成验证码，使用邮件完成注册，Redis优化验证码的保存，解决分布式session问题</p><p>使用拦截器拦截用户请求，将用户信息绑定在ThreadLocal上</p><p>构建Trie数据结构，实现对发表帖子评论的敏感词过滤</p><p>支持对帖子评论，也支持对评论进行回复</p><p>利用AOP对service的业务代码实现日志记录</p><p>利用Redis的zset并结合Redis实现点赞关注的功能</p><p>点赞关注后的系统通知，实时性不需要特别高，使用kafka实现异步的发送系统通知</p><p>使用ElasticSearch实现对帖子的搜索功能，以及结果的高亮显示</p><p>SpringQuartz实现定时任务，完成热门帖子的分数计算模块</p><p>使用本地缓存Quartz缓存热门帖子优化热门帖子页面，提高了QPS（10 - 200） <a href="https://user-images.githubusercontent.com/39627757/115350664-f7181500-a1e7-11eb-90df-d3b38eea2991.png"><img src="https://user-images.githubusercontent.com/39627757/115350664-f7181500-a1e7-11eb-90df-d3b38eea2991.png" alt="image"></a> <a href="https://user-images.githubusercontent.com/39627757/115350723-06975e00-a1e8-11eb-821f-1352b36bef15.png"><img src="https://user-images.githubusercontent.com/39627757/115350723-06975e00-a1e8-11eb-821f-1352b36bef15.png" alt="image"></a> <a href="https://user-images.githubusercontent.com/39627757/115350746-0eef9900-a1e8-11eb-90d8-7e37992131fb.png"><img src="https://user-images.githubusercontent.com/39627757/115350746-0eef9900-a1e8-11eb-90d8-7e37992131fb.png" alt="image"></a> <a href="https://user-images.githubusercontent.com/39627757/115350771-19aa2e00-a1e8-11eb-99df-68c08d23ae56.png"><img src="https://gitee.com/brook2bubble/pic-go/raw/master/img/115350771-19aa2e00-a1e8-11eb-99df-68c08d23ae56.png" alt="image"></a> <a href="https://user-images.githubusercontent.com/39627757/115350801-2169d280-a1e8-11eb-8dfc-7b1431c8953a.png"><img src="https://gitee.com/brook2bubble/pic-go/raw/master/img/115350801-2169d280-a1e8-11eb-8dfc-7b1431c8953a.png" alt="image"></a></p><p>处理服务器请求SpringMVC 处理数据库 MyBatis</p><p>SSM框架</p><p>构建工具：Apache Maven</p><p>集成开发工具：IDEA</p><p>数据库：Mysql Redis</p><p>应用服务器：Tomcat</p><p>版本控制工具：Git</p><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><h4 id="用户表-user"><a href="#用户表-user" class="headerlink" title="用户表 user"></a>用户表 user</h4><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键、自增</td></tr><tr><td>username</td><td>varchar</td><td>用户名，创建索引</td></tr><tr><td>password</td><td>varchar</td><td>用户密码</td></tr><tr><td>salt</td><td>varchar</td><td>加密盐值</td></tr><tr><td>email</td><td>varchar</td><td>用户邮箱，创建索引</td></tr><tr><td>type</td><td>int</td><td>用户类型：0 普通、1 管理员、2 版主</td></tr><tr><td>status</td><td>int</td><td>用户状态：0 未激活、1 已激活</td></tr><tr><td>activation_code</td><td>varchar</td><td>激活码</td></tr><tr><td>header_url</td><td>varchar</td><td>用户头像地址</td></tr><tr><td>create_time</td><td>timestamp</td><td>注册时间</td></tr></tbody></table><h4 id="评论表-comment"><a href="#评论表-comment" class="headerlink" title="评论表 comment"></a>评论表 comment</h4><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键、自增</td></tr><tr><td>user_id</td><td>int</td><td>评论的用户 id，创建索引</td></tr><tr><td>entity_id</td><td>int</td><td>评论实体 id，创建索引</td></tr><tr><td>entity_type</td><td>int</td><td>评论实体类型：1 帖子评论、2 评论回复</td></tr><tr><td>target_id</td><td>int</td><td>评论目标 id</td></tr><tr><td>content</td><td>text</td><td>评论内容</td></tr><tr><td>status</td><td>int</td><td>评论状态：0 有效、1 无效</td></tr><tr><td>create_time</td><td>timestamp</td><td>评论发表时间</td></tr></tbody></table><h4 id="帖子表-discuss-post"><a href="#帖子表-discuss-post" class="headerlink" title="帖子表 discuss_post"></a>帖子表 discuss_post</h4><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键、自增</td></tr><tr><td>user_id</td><td>int</td><td>发帖的用户 id，创建索引</td></tr><tr><td>title</td><td>varchar</td><td>帖子表标题</td></tr><tr><td>content</td><td>text</td><td>帖子内容</td></tr><tr><td>type</td><td>int</td><td>帖子类型：0 普通、1 置顶</td></tr><tr><td>comment_count</td><td>int</td><td>评论数量</td></tr><tr><td>status</td><td>int</td><td>帖子状态：0 普通、1 精华、2 拉黑</td></tr><tr><td>create_time</td><td>timestamp</td><td>评论发表时间</td></tr></tbody></table><h4 id="用户登录凭证表-login-ticket"><a href="#用户登录凭证表-login-ticket" class="headerlink" title="用户登录凭证表 login_ticket"></a>用户登录凭证表 login_ticket</h4><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键、自增</td></tr><tr><td>user_id</td><td>int</td><td>登录用户 id</td></tr><tr><td>ticket</td><td>varchar</td><td>登录凭证，随机字符串</td></tr><tr><td>status</td><td>int</td><td>登录状态：0 有效、1 无效</td></tr><tr><td>expired</td><td>timestamp</td><td>过期时间</td></tr></tbody></table><h4 id="消息表-message"><a href="#消息表-message" class="headerlink" title="消息表 message"></a>消息表 message</h4><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键、自增</td></tr><tr><td>from_id</td><td>int</td><td>发消息的 id，创建索引</td></tr><tr><td>to_id</td><td>int</td><td>收消息的 id，创建索引</td></tr><tr><td>conversation_id</td><td>varchar</td><td>会话 id，由通信双方 id 拼接，创建索引</td></tr><tr><td>content</td><td>text</td><td>消息内容</td></tr><tr><td>status</td><td>int</td><td>消息状态：0 未读、1 已读、2 删除</td></tr><tr><td>create_time</td><td>timestamp</td><td>消息发送时间</td></tr></tbody></table><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>帮助构建项目管理项目中的jar包</p><p>Maven仓库：存放构件的位置</p><p>   -本地仓库：默认是~/.m2/repository</p><p>   -远程仓库：中央仓库，镜像仓库，私服仓库</p><p><a class="link" href="https://maven.apache.org/">https://maven.apache.org/<i class="fas fa-external-link-alt"></i></a></p><h2 id="Maven-构建-Java-项目"><a href="#Maven-构建-Java-项目" class="headerlink" title="Maven 构建 Java 项目"></a>Maven 构建 Java 项目</h2><p>Maven 使用原型 <strong>archetype</strong> 插件创建项目。要创建一个简单的 Java 应用，我们将使用 <strong>maven-archetype-quickstart</strong> 插件。</p><p>在下面的例子中，我们将在 C:\MVN 文件夹下创建一个基于 maven 的 java 应用项目。</p><p>命令格式如下：</p><pre><code>mvn archetype:generate "-DgroupId=com.companyname.bank" "-DartifactId=consumerBanking" "-DarchetypeArtifactId=maven-archetype-quickstart" "-DinteractiveMode=false"</code></pre><p>参数说明：</p><ul><li><strong>-DgroupId</strong>: 组织名，公司网址的反写 + 项目名称</li><li><strong>-DartifactId</strong>: 项目名-模块名</li><li><strong>-DarchetypeArtifactId</strong>: 指定 ArchetypeId，maven-archetype-quickstart，创建一个简单的 Java 应用</li><li><strong>-DinteractiveMode</strong>: 是否使用交互模式</li></ul><p>本地仓库地址：E:\Javastudy\maven-repository\repository</p><p>配置文件地址：C:\Program Files\Java\apache-maven-3.8.1\conf\settings.xml</p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>Spring框架的核心功能有两个：</p><ul><li>Spring容器作为超级大工厂，负责创建、管理所有的Java对象，这些Java对象被称为Bean。</li><li>Spring容器管理容器中Bean之间的依赖关系，Spring使用一种被称为”依赖注入”的方式来管理Bean之间的依赖关系。</li></ul><p>使用依赖注入，不仅可以为Bean注入普通的属性值，还可以注入其他Bean的引用。依赖注入是一种优秀的解耦方式，其可以让Bean以配置文件组织在一起，而不是以硬编码的方式耦合在一起。</p><p>Rod Johnson是第一个高度重视以配置文件来管理Java实例的协作关系的人，他给这种方式起了一个名字：<strong>控制反转（Inverse of Control，IoC）</strong>。后来Martine Fowler为这种方式起了另一个名称：<strong>依赖注入（Dependency Injection）</strong>，因此不管是依赖注入，还是控制反转，<strong>其含义完全相同</strong>。当某个Java对象（调用者）需要调用另一个Java对象（被依赖对象）的方法时，在传统模式下通常有两种做法：</p><ol><li>原始做法: 调用者<strong>主动</strong>创建被依赖对象，然后再调用被依赖对象的方法。</li><li>简单工厂模式: 调用者先找到被依赖对象的工厂，然后<strong>主动</strong>通过工厂去获取被依赖对象，最后再调用被依赖对象的方法。</li></ol><h2 id="IoC-Inversion-of-Control"><a href="#IoC-Inversion-of-Control" class="headerlink" title="IoC Inversion of Control"></a>IoC Inversion of Control</h2><p>控制反转，面向对象编程。</p><p>在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TZHi5ApTE14Fcxh/root/content"></p><p>图1-1 传统应用程序示意图</p><p>　　当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TdaS3TyMx33Wm6w/root/content"></p><p>图1-2有IoC/DI容器后程序结构示意图</p><p>传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p><strong>对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。</strong></p><p><strong>Spring所倡导的开发方式</strong>就是如此，<strong>所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</strong></p><h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h2><p><strong>DI—Dependency Injection，即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。<strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><p><strong>“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”</strong></p><p>　　●<strong>谁依赖于谁：</strong>当然是<strong>应用程序依赖于IoC容器</strong>；</p><p>　　●<strong>为什么需要依赖：****应用程序需要IoC容器来提供对象需要的外部资源</strong>；</p><p>　　●<strong>谁注入谁：</strong>很明显是<strong>IoC容器注入应用程序某个对象，应用程序依赖的对象</strong>；</p><p>　　<strong>●注入了什么：</strong>就是<strong>注入某个对象所需要的外部资源（包括对象、资源、常量数据）</strong>。</p><h2 id="IoC和DI由什么关系呢？"><a href="#IoC和DI由什么关系呢？" class="headerlink" title="IoC和DI由什么关系呢？"></a><strong>IoC和DI</strong>由什么<strong>关系</strong>呢？</h2><p>其实它们<strong>是同一个概念的不同角度描述</strong>，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系）。</p><h2 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h2><p>实现依赖注入的关键，本质上就是一个工厂。</p><h2 id="设值注入"><a href="#设值注入" class="headerlink" title="设值注入"></a>设值注入</h2><p>设值注入是指IoC容器通过成员变量的setter方法来注入被依赖对象。这种注入方式简单、直观，因而在Spring的依赖注入里大量使用。</p><h2 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h2><p>利用构造器来设置依赖关系的方式，被称为构造注入。通俗来说，就是驱动Spring在底层以反射方式执行带指定参数的构造器，当执行带参数的构造器时，就可利用构造器参数对成员变量执行初始化——这就是构造注入的本质。</p><h2 id="两种注入方式的对比"><a href="#两种注入方式的对比" class="headerlink" title="两种注入方式的对比"></a>两种注入方式的对比</h2><p>设值注入有如下优点：</p><ul><li>与传统的JavaBean的写法更相似，程序开发人员更容易理解、接受。通过setter方法设定依赖关系显得更加直观、自然。</li><li>对于复杂的依赖关系，如果采用构造注入，会导致构造器过于臃肿，难以阅读。Spring在创建Bean实例时，需要同时实例化其依赖的全部实例，因而导致性能下降。而使用设值注入，则能避免这些问题。</li><li>尤其在某些成员变量可选的情况下，多参数的构造器更加笨重。</li></ul><p>构造注入优势如下：</p><ul><li>构造注入可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入。</li><li>对于依赖关系无需变化的Bean，构造注入更有用处。因为没有setter方法，所有的依赖关系全部在构造器内设定，无须担心后续的代码对依赖关系产生破坏。</li><li>依赖关系只能在构造器中设定，则只有组件的创建者才能改变组件的依赖关系，对组件的调用者而言，组件内部的依赖关系完全透明，更符合高内聚的原则。</li></ul><p>注意：<br>建议采用设值注入为主，构造注入为辅的注入策略。对于依赖关系无须变化的注入，尽量采用构造注入；而其他依赖关系的注入，则考虑采用设值注入。</p><h1 id="Spring容器中的Bean"><a href="#Spring容器中的Bean" class="headerlink" title="Spring容器中的Bean"></a>Spring容器中的Bean</h1><p>对于开发者来说，开发者使用Spring框架主要是做两件事：①开发Bean；②配置Bean。对于Spring框架来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成”依赖注入”——这就是所谓IoC的本质。</p><h2 id="容器中Bean的作用域"><a href="#容器中Bean的作用域" class="headerlink" title="容器中Bean的作用域"></a>容器中Bean的作用域</h2><p>当通过Spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下五种作用域：</p><ol><li>singleton: 单例模式，在整个Spring IoC容器中，singleton作用域的Bean将只生成一个实例。</li><li>prototype: 每次通过容器的getBean()方法获取prototype作用域的Bean时，都将产生一个新的Bean实例。</li><li>request: 对于一次HTTP请求，request作用域的Bean将只生成一个实例，这意味着，在同一次HTTP请求内，程序每次请求该Bean，得到的总是同一个实例。只有在Web应用中使用Spring时，该作用域才真正有效。</li><li>session：该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。</li><li>global session: 每个全局的HTTP Session对应一个Bean实例。在典型的情况下，仅在使用portlet context的时候有效，同样只在Web应用中有效。</li></ol><p>如果不指定Bean的作用域，Spring默认使用singleton作用域。prototype作用域的Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成果，就可以重复使用。因此，应该尽量避免将Bean设置成prototype作用域。</p><h2 id="使用自动装配注入合作者Bean"><a href="#使用自动装配注入合作者Bean" class="headerlink" title="使用自动装配注入合作者Bean"></a>使用自动装配注入合作者Bean</h2><p>Spring能自动装配Bean与Bean之间的依赖关系，即无须使用ref显式指定依赖Bean，而是由Spring容器检查XML配置文件内容，根据某种规则，为调用者Bean注入被依赖的Bean。<br>Spring自动装配可通过<code>&lt;beans/&gt;</code>元素的<code>default-autowire</code>属性指定，该属性对配置文件中所有的Bean起作用；也可通过对<code>&lt;bean/&gt;</code>元素的<code>autowire</code>属性指定，该属性只对该Bean起作用。</p><p><code>autowire</code>和<code>default-autowire</code>可以接受如下值：</p><ul><li><code>no</code>: 不使用自动装配。Bean依赖必须通过ref元素定义。这是默认配置，在较大的部署环境中不鼓励改变这个配置，显式配置合作者能够得到更清晰的依赖关系。</li><li><code>byName</code>: 根据setter方法名进行自动装配。Spring容器查找容器中全部Bean，找出其id与setter方法名去掉set前缀，并小写首字母后同名的Bean来完成注入。如果没有找到匹配的Bean实例，则Spring不会进行任何注入。</li><li><code>byType</code>: 根据setter方法的形参类型来自动装配。Spring容器查找容器中的全部Bean，如果正好有一个Bean类型与setter方法的形参类型匹配，就自动注入这个Bean；如果找到多个这样的Bean，就抛出一个异常；如果没有找到这样的Bean，则什么都不会发生，setter方法不会被调用。</li><li><code>constructor</code>: 与byType类似，区别是用于自动匹配构造器的参数。如果容器不能恰好找到一个与构造器参数类型匹配的Bean，则会抛出一个异常。</li><li><code>autodetect</code>: Spring容器根据Bean内部结构，自行决定使用constructor或byType策略。如果找到一个默认的构造函数，那么就会应用byType策略。</li></ul><p><strong>当一个Bean既使用自动装配依赖，又使用ref显式指定依赖时，则显式指定的依赖覆盖自动装配依赖；对于大型的应用，不鼓励使用自动装配。虽然使用自动装配可减少配置文件的工作量，但大大将死了依赖关系的清晰性和透明性。依赖关系的装配依赖于源文件的属性名和属性类型，导致Bean与Bean之间的耦合降低到代码层次，不利于高层次解耦。</strong></p><pre><code>&lt;!--通过设置可以将Bean排除在自动装配之外--&gt;&lt;bean id="" autowire-candidate="false"/&gt;&lt;!--除此之外，还可以在beans元素中指定，支持模式字符串，如下所有以abc结尾的Bean都被排除在自动装配之外--&gt;&lt;beans default-autowire-candidates="*abc"/&gt;</code></pre><h1 id="创建Bean的3种方式"><a href="#创建Bean的3种方式" class="headerlink" title="创建Bean的3种方式"></a>创建Bean的3种方式</h1><h2 id="使用构造器创建Bean实例"><a href="#使用构造器创建Bean实例" class="headerlink" title="使用构造器创建Bean实例"></a>使用构造器创建Bean实例</h2><p>使用构造器来创建Bean实例是最常见的情况，如果不采用构造注入，Spring底层会调用Bean类的无参数构造器来创建实例，因此要求该Bean类提供无参数的构造器。</p><p>采用默认的构造器创建Bean实例，Spring对Bean实例的所有属性执行默认初始化，即所有的基本类型的值初始化为0或false；所有的引用类型的值初始化为null。</p><h2 id="使用静态工厂方法创建Bean"><a href="#使用静态工厂方法创建Bean" class="headerlink" title="使用静态工厂方法创建Bean"></a>使用静态工厂方法创建Bean</h2><p>使用静态工厂方法创建Bean实例时，class属性也必须指定，但此时class属性并不是指定Bean实例的实现类，而是静态工厂类，Spring通过该属性知道由哪个工厂类来创建Bean实例。</p><p>除此之外，还需要使用factory-method属性来指定静态工厂方法，Spring将调用静态工厂方法返回一个Bean实例，一旦获得了指定Bean实例，Spring后面的处理步骤与采用普通方法创建Bean实例完全一样。如果静态工厂方法需要参数，则使用<code>&lt;constructor-arg.../&gt;</code>元素指定静态工厂方法的参数。</p><h2 id="调用实例工厂方法创建Bean"><a href="#调用实例工厂方法创建Bean" class="headerlink" title="调用实例工厂方法创建Bean"></a>调用实例工厂方法创建Bean</h2><p>实例工厂方法与静态工厂方法只有一个不同：调用静态工厂方法只需使用工厂类即可，而调用实例工厂方法则需要工厂实例。使用实例工厂方法时，配置Bean实例的<code>&lt;bean.../&gt;</code>元素无须class属性，配置实例工厂方法使用<code>factory-bean</code>指定工厂实例。<br>采用实例工厂方法创建Bean的<code>&lt;bean.../&gt;</code>元素时需要指定如下两个属性：</p><ul><li>factory-bean: 该属性的值为工厂Bean的id。</li><li>factory-method: 该属性指定实例工厂的工厂方法。</li></ul><p>若调用实例工厂方法时需要传入参数，则使用<code>&lt;constructor-arg.../&gt;</code>元素确定参数值。</p><h1 id="协调作用域不同步的Bean"><a href="#协调作用域不同步的Bean" class="headerlink" title="协调作用域不同步的Bean"></a>协调作用域不同步的Bean</h1><p>当singleton作用域的Bean依赖于prototype作用域的Bean时，会产生不同步的现象，原因是因为当Spring容器初始化时，容器会预初始化容器中所有的<code>singleton Bean</code>，由于<code>singleton Bean</code>依赖于<code>prototype Bean</code>，因此Spring在初始化<code>singleton Bean</code>之前，会先创建<code>prototypeBean</code>——然后才创建<code>singleton Bean</code>，接下里将<code>prototype Bean</code>注入<code>singleton Bean</code>。<br>解决不同步的方法有两种：</p><ul><li>放弃依赖注入: singleton作用域的Bean每次需要prototype作用域的Bean时，主动向容器请求新的Bean实例，即可保证每次注入的<code>prototype Bean</code>实例都是最新的实例。</li><li>利用方法注入: 方法注入通常使用lookup方法注入，使用lookup方法注入可以让Spring容器重写容器中Bean的抽象或具体方法，返回查找容器中其他Bean的结果，被查找的Bean通常是一个<code>non-singleton Bean</code>。Spring通过使用JDK动态代理或cglib库修改客户端的二进制码，从而实现上述要求。</li></ul><p>建议采用第二种方法，使用方法注入。为了使用lookup方法注入，大致需要如下两步：</p><ol><li>将调用者Bean的实现类定义为抽象类，并定义一个抽象方法来获取被依赖的Bean。</li><li>在<code>&lt;bean.../&gt;</code>元素中添加<code>&lt;lookup-method.../&gt;</code>子元素让Spring为调用者Bean的实现类实现指定的抽象方法。</li></ol><p>*<strong>注意：*</strong></p><blockquote><p>Spring会采用运行时动态增强的方式来实现<code>&lt;lookup-method.../&gt;</code>元素所指定的抽象方法，如果目标抽象类实现过接口，Spring会采用JDK动态代理来实现该抽象类，并为之实现抽象方法；如果目标抽象类没有实现过接口，Spring会采用cglib实现该抽象类，并为之实现抽象方法。Spring4.0的spring-core-xxx.jar包中已经集成了cglib类库。</p></blockquote><h1 id="两种后处理器"><a href="#两种后处理器" class="headerlink" title="两种后处理器"></a>两种后处理器</h1><p>Spring提供了两种常用的后处理器：</p><ul><li>Bean后处理器: 这种后处理器会对容器中Bean进行后处理，对Bean进行额外加强。</li><li>容器后处理器: 这种后处理器会对IoC容器进行后处理，用于增强容器功能。</li></ul><h2 id="Bean后处理器"><a href="#Bean后处理器" class="headerlink" title="Bean后处理器"></a>Bean后处理器</h2><p>Bean后处理器是一种特殊的Bean，这种特殊的Bean并不对外提供服务，它甚至可以无须id属性，它主要负责对容器中的其他Bean执行后处理，例如为容器中的目标Bean生成代理等，这种Bean称为Bean后处理器。Bean后处理器会在Bean实例创建成功之后，对Bean实例进行进一步的增强处理。Bean后处理器必须实现<code>BeanPostProcessor</code>接口，同时必须实现该接口的两个方法。</p><ol><li><code>Object postProcessBeforeInitialization(Object bean, String name) throws BeansException</code>: 该方法的第一个参数是系统即将进行后处理的Bean实例，第二个参数是该Bean的配置id</li><li><code>Object postProcessAfterinitialization(Object bean, String name) throws BeansException</code>: 该方法的第一个参数是系统即将进行后处理的Bean实例，第二个参数是该Bean的配置id</li></ol><p>容器中一旦注册了Bean后处理器，Bean后处理器就会自动启动，在容器中每个Bean创建时自动工作，Bean后处理器两个方法的回调时机如下图：</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TjcHIDsNajtK1_w/root/content"></p><p>注意一点，如果使用<code>BeanFactory</code>作为Spring容器，则必须手动注册Bean后处理器，程序必须获取Bean后处理器实例，然后手动注册。</p><pre><code>BeanPostProcessor bp = (BeanPostProcessor)beanFactory.getBean("bp");beanFactory.addBeanPostProcessor(bp);Person p = (Person)beanFactory.getBean("person");</code></pre><h2 id="容器后处理器"><a href="#容器后处理器" class="headerlink" title="容器后处理器"></a>容器后处理器</h2><p>Bean后处理器负责处理容器中的所有Bean实例，而容器后处理器则负责处理容器本身。容器后处理器必须实现<code>BeanFactoryPostProcessor</code>接口，并实现该接口的一个方法<code>postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)</code>实现该方法的方法体就是对Spring容器进行的处理，这种处理可以对Spring容器进行自定义扩展，当然也可以对Spring容器不进行任何处理。</p><p>类似于<code>BeanPostProcessor</code>，<code>ApplicationContext</code>可自动检测到容器中的容器后处理器，并且自动注册容器后处理器。但若使用<code>BeanFactory</code>作为Spring容器，则必须手动调用该容器后处理器来处理<code>BeanFactory</code>容器。</p><h1 id="SpringBoot配置文件-amp-运行原理"><a href="#SpringBoot配置文件-amp-运行原理" class="headerlink" title="SpringBoot配置文件&amp;运行原理"></a>SpringBoot配置文件&amp;运行原理</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><strong>1. 前言</strong></h2><p>SpringBoot最核心的就是自动配置类，而自动配置类需要读取配置文件的信息，来自动创建实例，因此配置文件就显得非常重要了。本文主要介绍SpringBoot的配置文件、以及自动配置类和配置文件之间的关系，即SpringBoot的运行原理。</p><h2 id="2-SpringBoot-配置文件"><a href="#2-SpringBoot-配置文件" class="headerlink" title="2. SpringBoot 配置文件"></a><strong>2. SpringBoot 配置文件</strong></h2><p>SpringBoot<strong>默认加载</strong>的配置文件是在classpath根目录的<strong>application.properties</strong>或者</p><p><strong>application.yml</strong>配置文件。</p><p><strong>–注意：</strong></p><blockquote><p>[1] 文件名不能写错，因为默认的文件名写死在SpringBoot配置代码中。<br>[2] SpringBoot支持properties和yml两个格式的配置文件。</p></blockquote><h2 id="2-1-配置-Web-服务器"><a href="#2-1-配置-Web-服务器" class="headerlink" title="2.1. 配置 Web 服务器"></a><strong>2.1. 配置 Web 服务器</strong></h2><p>–问题1：为什么SpringBoot明明是一个jar项目而且没有选择服务器组件，但是仍然可以启动项目？</p><blockquote><p>因为SpringBoot默认内嵌了一个Web服务器（Tomcat）</p></blockquote><p>–问题2：那么我们如何修改内嵌的Web服务器的参数呢？</p><blockquote><p>既然已经内嵌在程序里面了，我们也知道SpringBoot的参数就是配置在SpringBoot配置文件里面的。那么当然就是在 SpringBoot配置文件里面配置。</p></blockquote><h3 id="2-1-1-properties-格式配置"><a href="#2-1-1-properties-格式配置" class="headerlink" title="2.1.1. properties 格式配置"></a><strong>2.1.1. properties 格式配置</strong></h3><p><strong>–Properties 文件的属性，使用的平铺方式书写</strong></p><pre><code class="text">## 设置server参数## 端口server.port=8080## 设置下上文路径server.servlet.context-path=/community</code></pre><h3 id="2-1-2-yml-格式配置"><a href="#2-1-2-yml-格式配置" class="headerlink" title="2.1.2. yml 格式配置"></a><strong>2.1.2. yml 格式配置</strong></h3><p><strong>–Yml 文件的属性使用折叠的方式书写</strong></p><pre><code class="text">## 设置server参数## 注意事项：## [1] 冒号和参数值之间必须要隔一个空格，否则报错## [2] 属性设置是有层级之分的server:  port: 8080  servlet:    context-path: /community</code></pre><h2 id="2-2-多配置文件"><a href="#2-2-多配置文件" class="headerlink" title="2.2. 多配置文件"></a><strong>2.2. 多配置文件</strong></h2><p>需求：希望可以配置多个配置文件，分类存放配置信息。</p><h3 id="2-2-1-Properties-配置步骤"><a href="#2-2-1-Properties-配置步骤" class="headerlink" title="2.2.1. Properties 配置步骤"></a><strong>2.2.1. Properties 配置步骤</strong></h3><h3 id="第一步：编写三个配置文件"><a href="#第一步：编写三个配置文件" class="headerlink" title="第一步：编写三个配置文件"></a><strong>第一步：编写三个配置文件</strong></h3><p><img src="https://pic4.zhimg.com/80/v2-adee1ecaccfbe79d0f9eb259023d5237_720w.jpg" alt="img"></p><h3 id="第二步：编写配置文件内容"><a href="#第二步：编写配置文件内容" class="headerlink" title="第二步：编写配置文件内容"></a><strong>第二步：编写配置文件内容</strong></h3><p><strong>–注意：</strong></p><blockquote><p>[1] SpringBoot启动的时候加载的是 application.properties配置文件，再通过application.properties配置文件的<strong>spring.profiles.active属性</strong>指定加载的其他配置文件。<br>[2] 其他配置文件的文件名格式为：<strong>application-XXX.properties。</strong></p></blockquote><p><img src="https://pic1.zhimg.com/80/v2-68966117de00d740cadefb0031bccbf8_720w.jpg" alt="img"></p><p><strong>–application.properties</strong></p><pre><code class="text">## 指定加载其他配置文件spring.profiles.active=server1,server2</code></pre><p><strong>–application-server1.properties</strong></p><pre><code class="text">## 端口server.port=8083</code></pre><p><strong>–application-server2.properties</strong></p><pre><code class="text">## 设置下上文路径server.servlet.context-path=/springboot-quickStart-properties</code></pre><h3 id="第三步：运行项目"><a href="#第三步：运行项目" class="headerlink" title="第三步：运行项目"></a><strong>第三步：运行项目</strong></h3><p><strong>–成功结果</strong></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TH7kmeZMw-HMKJ3/root/content"></p><h3 id="2-2-2-Yml-配置步骤"><a href="#2-2-2-Yml-配置步骤" class="headerlink" title="2.2.2. Yml 配置步骤"></a><strong>2.2.2. Yml 配置步骤</strong></h3><h3 id="第一步：编写三个-yml-配置文件"><a href="#第一步：编写三个-yml-配置文件" class="headerlink" title="第一步：编写三个 yml 配置文件"></a><strong>第一步：编写三个 yml 配置文件</strong></h3><p><img src="https://pic2.zhimg.com/80/v2-a1d4921cb76e1fa9d5abc9d664382b11_720w.jpg" alt="img"></p><h3 id="第二步：分别编写配置信息"><a href="#第二步：分别编写配置信息" class="headerlink" title="第二步：分别编写配置信息"></a><strong>第二步：分别编写配置信息</strong></h3><p><strong>–注意：</strong></p><blockquote><p>[1] SpringBoot启动的时候加载的是 application.yml 配置文件，再通过application.yml配置文件的<strong>spring.profiles.active属性</strong>指定加载的其他配置文件。<br>[2] 其他配置文件的文件名格式为：<strong>application-.yml。</strong></p></blockquote><p><img src="https://pic2.zhimg.com/80/v2-fd0296faf2d4504d7d407e539584f305_720w.jpg" alt="img"></p><p><strong>–application.yml</strong></p><pre><code class="text">## 指定加载其他配置文件spring:  profiles:    active: server1,server2</code></pre><p><strong>–application-server1.yml</strong></p><pre><code class="text">## 端口server:  port: 8084</code></pre><p><strong>–application-server2.yml</strong></p><pre><code class="text">## 设置下上文路径server:  servlet:    context-path: /springboot-quickStart-yml</code></pre><h3 id="第三步：启动测试"><a href="#第三步：启动测试" class="headerlink" title="第三步：启动测试"></a><strong>第三步：启动测试</strong></h3><p><strong>–成功结果</strong></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TouymBo9qdwo6PW/root/content"></p><h2 id="3-SpringBoot-运行原理"><a href="#3-SpringBoot-运行原理" class="headerlink" title="3. SpringBoot 运行原理"></a><strong>3. SpringBoot 运行原理</strong></h2><blockquote><p>通过理解<strong>SpringBoot运行流程图</strong>，来理解功能组件的属性是放在哪里的，通过边学边找的方式来记忆规律。</p></blockquote><p><strong>–如图所示：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-945cd56e31bd68dc2db05472ed7f692c_720w.jpg" alt="img"></p><p><strong>启动流程：</strong></p><blockquote><p>第一步：SpringBoot通过加载贴在入口执行类上面的@SpringBootApplication注解，来启动 SpringBoot 项目。<br>第二步：根据贴在@SpringBootApplication注解上的三个注@SpringBootConfiguraton、 @EnableAutoConfiguration、@ComponentScan，来加载SpringBoot配置类、自动加载的配置类、组件类。</p></blockquote><p><strong>3个注解的功能如下：</strong></p><blockquote><p><strong>@SpringBootConfiguraton：</strong>标识一个类是配置类。<br><strong>@EnableAutoConfiguration：</strong>标识这是一个自动加载的配置类，在SpringBoot启动的时候就自动加载配置类中的组件到容器中。<br><strong>@ComponentScan：</strong>标识需要组件扫描的包，在SpringBoot中，包扫描给入口类所在包及其入口类的子包。</p></blockquote><p><em><strong>*注意事项：</strong>SpringBoot内置支持的组件在</em><em>spring-boot-autoconfigure-2.2.2.RELEASE.jar</em>* 里面。如该<strong>包下的jdbc分包下的DataSourceAutoConfiguration：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-424af7413e15f2657999b7ccde2a2996_720w.png" alt="img"></p><p><strong>其中的EnableConfigurationProperties注解用于加载用户配置的参数信息。</strong></p><p><strong>DataSourceProperties的作用就是标识配置文件中那些信息是DataSource使用的，标识的方式就是使用“spring.datasource”前缀。</strong></p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TkABG0mIjpwsukG/root/content"></p><p><strong>–根据分析，可以得出结论：</strong>自动加载的配置类信息都在 Xxx<strong>AutoConfiguration</strong>里面，配</p><p>置的属性参数都在Xxxxx<strong>Properties</strong>里面。</p><p><strong>–执行原理图</strong>：</p><p><img src="https://pic4.zhimg.com/80/v2-98fdaa5758d40191cf671ac792d39593_720w.jpg" alt="img"></p><p><strong>总结：通过执行原理图，可以知道SpringBoot是如何实现自动配置的。</strong></p><h1 id="Spring的”零配置”支持"><a href="#Spring的”零配置”支持" class="headerlink" title="Spring的”零配置”支持"></a>Spring的”零配置”支持</h1><h2 id="搜索Bean类"><a href="#搜索Bean类" class="headerlink" title="搜索Bean类"></a>搜索Bean类</h2><p>Spring提供如下几个Annotation来标注Spring Bean：</p><ul><li><code>@Component</code>: 标注一个普通的Spring Bean类</li><li><code>@Controller</code>: 标注一个控制器组件类</li><li><code>@Service</code>: 标注一个业务逻辑组件类</li><li><code>@Repository</code>: 标注一个DAO组件类</li></ul><p>在Spring配置文件中做如下配置，指定自动扫描的包：</p><pre><code>&lt;context:component-scan base-package="edu.shu.spring.domain"/&gt;</code></pre><h2 id="使用-Resource配置依赖"><a href="#使用-Resource配置依赖" class="headerlink" title="使用@Resource配置依赖"></a>使用@Resource配置依赖</h2><p><code>@Resource</code>位于<code>javax.annotation</code>包下，是来自JavaEE规范的一个<code>Annotation</code>，Spring直接借鉴了该<code>Annotation</code>，通过使用该<code>Annotation</code>为目标Bean指定协作者Bean。使用<code>@Resource</code>与<code>&lt;property.../&gt;</code>元素的ref属性有相同的效果。<br><code>@Resource</code>不仅可以修饰setter方法，也可以直接修饰实例变量，如果使用<code>@Resource</code>修饰实例变量将会更加简单，此时Spring将会直接使用JavaEE规范的Field注入，此时连setter方法都可以不要。</p><h2 id="使用-PostConstruct和-PreDestroy定制生命周期行为"><a href="#使用-PostConstruct和-PreDestroy定制生命周期行为" class="headerlink" title="使用@PostConstruct和@PreDestroy定制生命周期行为"></a>使用@PostConstruct和@PreDestroy定制生命周期行为</h2><p><code>@PostConstruct</code>和<code>@PreDestroy</code>同样位于javax.annotation包下，也是来自JavaEE规范的两个Annotation，Spring直接借鉴了它们，用于定制Spring容器中Bean的生命周期行为。它们都用于修饰方法，无须任何属性。其中前者修饰的方法时Bean的初始化方法；而后者修饰的方法时Bean销毁之前的方法。</p><h2 id="Spring4-0增强的自动装配和精确装配"><a href="#Spring4-0增强的自动装配和精确装配" class="headerlink" title="Spring4.0增强的自动装配和精确装配"></a>Spring4.0增强的自动装配和精确装配</h2><p>Spring提供了<code>@Autowired</code>注解来指定自动装配，<code>@Autowired</code>可以修饰setter方法、普通方法、实例变量和构造器等。当使用<code>@Autowired</code>标注setter方法时，默认采用byType自动装配策略。在这种策略下，符合自动装配类型的候选Bean实例常常有多个，这个时候就可能引起异常，为了实现精确的自动装配，Spring提供了<code>@Qualifier</code>注解，通过使用<code>@Qualifier</code>，允许根据Bean的id来执行自动装配。</p><h1 id="异步请求ajax"><a href="#异步请求ajax" class="headerlink" title="异步请求ajax"></a>异步请求ajax</h1><p> * asynchronous javascript and xml：异步的js和xml</p><p> * 它能使用js访问服务器，而且是异步访问</p><p> * 服务器给客户端的响应一般是整个页面，一个html完整页面！但在ajax中因为是局部刷新，那么服务器就不用再响应整个页面！而只是数据</p><p>  &gt; text：纯文本</p><p>  &gt; xml：大家都熟悉</p><p>  &gt; json：它是js提供的数据交互格式，它在ajax中最受欢迎</p><h2 id="四个步骤"><a href="#四个步骤" class="headerlink" title="四个步骤"></a>四个步骤</h2><h3 id="1-创建Ajax对象（得到XMLHttpRequest）"><a href="#1-创建Ajax对象（得到XMLHttpRequest）" class="headerlink" title="1.创建Ajax对象（得到XMLHttpRequest）"></a>1.创建Ajax对象（得到XMLHttpRequest）</h3><p>* ajax其实只需要学习一个对象：XMLHttpRequest，如果掌握了它，就掌握了ajax！</p><pre><code>var request=new XMLHttpRequest();注意：如果要兼容IE6以下浏览器则需要编写如下代码var request;if(window.XMLRequest){request=new XMLRequestHttpRequest();  //IE7、IE8、360等}else{request=new ActiveXObject("Microsoft.XMLHTTP");//IE5、IE6}</code></pre><h3 id="2-链接到服务器（打开与服务器的连接）"><a href="#2-链接到服务器（打开与服务器的连接）" class="headerlink" title="2.链接到服务器（打开与服务器的连接）"></a>2.链接到服务器（打开与服务器的连接）</h3><h3 id="3-发送请求（发送请求）"><a href="#3-发送请求（发送请求）" class="headerlink" title="3.发送请求（发送请求）"></a>3.发送请求（发送请求）</h3><p>如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法。</p><p>语法：open(method,url,async)和xmlhttp.send()。</p><h3 id="4-接受返回值"><a href="#4-接受返回值" class="headerlink" title="4.接受返回值"></a>4.接受返回值</h3><p>* xmlHttp对象一共有5个状态：</p><p>  &gt; 0状态：刚创建，还没有调用open()方法; </p><p>  &gt; 1状态：请求开始：调用了open()方法，但还没有调用send()方法</p><p>  &gt; 2状态：调用完了send()方法了；</p><p>  &gt; 3状态：服务器已经开始响应，但不表示响应结束了！</p><p>  &gt; 4状态：服务器响应结束！（通常我们只关心这个状态！！！）</p><h1 id="Spring的AOP"><a href="#Spring的AOP" class="headerlink" title="Spring的AOP"></a>Spring的AOP</h1><h2 id="为什么需要AOP"><a href="#为什么需要AOP" class="headerlink" title="为什么需要AOP"></a>为什么需要AOP</h2><p>AOP（Aspect Orient Programming）也就是面向切面编程，作为面向对象编程的一种补充，已经成为一种比较成熟的编程方式,面向切面编程将程序运行过程分解成各个切面。</p><p>AOP专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在JavaEE应用中，常常通过AOP来处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等，AOP已经成为一种非常常用的解决方案。</p><h2 id="使用AspectJ实现AOP"><a href="#使用AspectJ实现AOP" class="headerlink" title="使用AspectJ实现AOP"></a>使用AspectJ实现AOP</h2><p>AspectJ是一个基于Java语言的AOP框架，提供了强大的AOP功能，其他很多AOP框架都借鉴或采纳其中的一些思想。其主要包括两个部分：一个部分定义了如何表达、定义AOP编程中的语法规范，通过这套语法规范，可以方便地用AOP来解决Java语言中存在的交叉关注点的问题；另一个部分是工具部分，包括编译、调试工具等。</p><p>AOP实现可分为两类：</p><ol><li>静态AOP实现: AOP框架在编译阶段对程序进行修改，即实现对目标类的增强，生成静态的AOP代理类，以AspectJ为代表。</li><li>动态AOP实现: AOP框架在运行阶段动态生成AOP代理，以实现对目标对象的增强，以Spring AOP为代表。</li></ol><p>一般来说，静态AOP实现具有较好的性能，但需要使用特殊的编译器。动态AOP实现是纯Java实现，因此无须特殊的编译器，但是通常性能略差。</p><h2 id="AOP的基本概念"><a href="#AOP的基本概念" class="headerlink" title="AOP的基本概念"></a>AOP的基本概念</h2><p>关于面向切面编程的一些术语：</p><ul><li>切面（Aspect）: 切面用于组织多个Advice，Advice放在切面中定义。</li><li>连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用，或者异常的抛出。在Spring AOP中，连接点总是方法的调用。</li><li>增强处理（Advice）: AOP框架在特定的切入点执行的增强处理。处理有”around”、”before”和”after”等类型</li><li>切入点（Pointcut）: 可以插入增强处理的连接点。简而言之，当某个连接点满足指定要求时，该连接点将被添加增强处理，该连接点也就变成了切入点。</li></ul><h2 id="Spring的AOP支持"><a href="#Spring的AOP支持" class="headerlink" title="Spring的AOP支持"></a>Spring的AOP支持</h2><p>Spring中的AOP代理由Spring的IoC容器负责生成、管理，其依赖关系也由IoC容器负责管理。<br>为了在应用中使用<code>@AspectJ</code>支持，Spring需要添加三个库：</p><ul><li><code>aspectjweaver.jar</code></li><li><code>aspectjrt.jar</code></li><li><code>aopalliance.jar</code></li></ul><p>并在Spring配置文件中做如下配置：</p><pre><code>&lt;!--启动@AspectJ支持--&gt;&lt;aop:aspectj-autoproxy/&gt;&lt;!--指定自动搜索Bean组件、自动搜索切面类--&gt;&lt;context:component-scan base-package="edu.shu.sprint.service"&gt;    &lt;context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/&gt;&lt;/context:component-scan&gt;</code></pre><h1 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h1><p>@Repository和@Controller、@Service、@Component的作用差不多，都是把对象交给spring管理。@Repository用在持久层的接口上，这个注解是将接口的一个实现类交给spring管理。</p><h2 id="Spring的核心机制"><a href="#Spring的核心机制" class="headerlink" title="Spring的核心机制"></a>Spring的核心机制</h2><h3 id="管理Bean"><a href="#管理Bean" class="headerlink" title="管理Bean"></a>管理Bean</h3><p>程序主要是通过Spring容器来访问容器中的Bean，ApplicationContext是Spring容器最常用的接口，该接口有如下两个实现类：</p><ul><li>ClassPathXmlApplicationContext: 从类加载路径下搜索配置文件，并根据配置文件来创建Spring容器。</li><li>FileSystemXmlApplicationContext: 从文件系统的相对路径或绝对路径下去搜索配置文件，并根据配置文件来创建Spring容器。</li></ul><pre><code>public class BeanTest{    public static void main(String args[]) throws Exception{        ApplicationContext ctx = new ClassPathXmlApplicationContext("beans.xml");        Person p = ctx.getBean("person", Person.class);        p.say();    }</code></pre><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a>AOP 面向切面编程</h2><p>​    面向切面编程思想，是对OOP的补充 进一步提高编程效率。web层级设计中，web层-&gt;网关层-&gt;服务层-&gt;数据层，每一层之间也是一个切面。编程中，对象与对象之间，方法与方法之间，模块与模块之间都是一个个切面。能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="Aspect（切面）："><a href="#Aspect（切面）：" class="headerlink" title="Aspect（切面）："></a>Aspect（切面）：</h4><p> Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</p><h4 id="Joint-point（连接点）："><a href="#Joint-point（连接点）：" class="headerlink" title="Joint point（连接点）："></a>Joint point（连接点）：</h4><p>表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</p><h4 id="Pointcut（切点）："><a href="#Pointcut（切点）：" class="headerlink" title="Pointcut（切点）："></a>Pointcut（切点）：</h4><p>表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</p><h4 id="Advice（增强）："><a href="#Advice（增强）：" class="headerlink" title="Advice（增强）："></a>Advice（增强）：</h4><p>Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</p><h4 id="Target（目标对象）："><a href="#Target（目标对象）：" class="headerlink" title="Target（目标对象）："></a>Target（目标对象）：</h4><p>织入 Advice 的目标对象.。</p><h4 id="Weaving（织入）："><a href="#Weaving（织入）：" class="headerlink" title="Weaving（织入）："></a>Weaving（织入）：</h4><p>将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</p><h3 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h3><h4 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h4><p>​            AspectJ是语言级的实现，它扩展了Java语言，定义了AOP语法<br>​            AspectJ在编译期织入代码，他有一个专门的编译器，用来生成遵守Java字节码规范的class文件，基于字节码操作</p><h4 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h4><p>​            Spring AOP 使用纯Java实现，不需要专门的编译过程，也不需要特殊的类装载器。<br>​            Spring AOP在运行时通过代理的方式织入代码，只支持方法类型的连接点<br>​            Spring支持对AspectJ的集成</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p><strong>Spring AOP就是基于动态代理的</strong>，如果要代理的对象，实现了某个接口，那么Spring AOP会使用<strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候Spring AOP会使用<strong>Cglib</strong> ，这时候Spring AOP会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：</p><p><img src="https://gitee.com/brook2bubble/pic-go/raw/master/img/SpringAOPProcess.jpg" alt="SpringAOPProcess"></p><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p>​                    Java提供的动态代理技术 可以在运行时创建接口的代理事例<br>​                    Spring　AOP 默认采用此种技术 在接口的代理实例中织入代码</p><h4 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h4><p>​                    采用底层的字节码技术 在运行时创建子类代理实例<br>​                    当目标对象不存在接口时 SpringAOP会采用此种方式 在子类实例中织入代码</p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><p>redis是一种高级的key:value存储系统，其中value支持五种数据类型：</p><p>1.字符串（strings）<br>2.字符串列表（lists）<br>3.字符串集合（sets）<br>4.有序字符串集合（sorted sets）<br>5.哈希（hashes）</p><p>而关于key，有几个点要提醒大家：</p><p>1.key不要太长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率；<br>2.key也不要太短，太短的话，key的可读性会降低；<br>3.在一个项目中，key最好使用统一的命名模式，例如user:10000:passwd。</p><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a>典型应用场景</h2><p>缓存，排行榜，计数器，社交网络，消息队列等</p><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><p><a class="link" href="https://github.com/MicrosoftArchive/redis/releases">https://github.com/MicrosoftArchive/redis/releases<i class="fas fa-external-link-alt"></i></a></p><p>安装后最好配置一下系统环境变量</p><h3 id="使用-cmd"><a href="#使用-cmd" class="headerlink" title="使用 cmd"></a>使用 cmd</h3><pre><code class="shell">C:\Users\dgx19&gt;redis-cli  //启动127.0.0.1:6379&gt; select 1 //选择数据库OK127.0.0.1:6379[1]&gt; select 0 //选择默认数据库OK127.0.0.1:6379&gt; flushdb  //清除缓冲区OK1.字符串（strings）2.字符串列表（lists）3.字符串集合（sets）4.有序字符串集合（sorted sets）5.哈希（hashes）//Strings类型 127.0.0.1:6379&gt; set test:count 1  //设置String键值OK127.0.0.1:6379&gt; get test:count  //获取键值"1"127.0.0.1:6379&gt; incr test:count  //值加1(integer) 2127.0.0.1:6379&gt; decr test:count  //值减1(integer) 0//hashes类型127.0.0.1:6379&gt; hset test:user id 1 //设置Hash键值(integer) 1127.0.0.1:6379&gt; hset test:user username zhangsan(integer) 1127.0.0.1:6379&gt; hget test:user id  //获取hash键值"1"127.0.0.1:6379&gt; hget test:user username"zhangsan"//Lists类型127.0.0.1:6379&gt; lpush test:ids 101 102 103 104 //左进(integer) 4127.0.0.1:6379&gt; llen test:ids  //list长度查询(integer) 4127.0.0.1:6379&gt; lindex test:ids 0  //左部索引"104"127.0.0.1:6379&gt; lrange test:ids 0 2 //区域元素索引1) "104"2) "103"3) "102"127.0.0.1:6379&gt; rpop test:ids  //右出为先进先出队列 左出为先进后出栈"101"127.0.0.1:6379&gt; rpop test:ids "102"//集合sets127.0.0.1:6379&gt; sadd test:teachers aaa bbb vvv ccc //集合添加元素(integer) 4127.0.0.1:6379&gt; scard test:teachers  //统计元素数量(integer) 4127.0.0.1:6379&gt; spop test:teachers  //随即弹出一个元素"vvv"127.0.0.1:6379&gt; spop test:teachers"bbb"127.0.0.1:6379&gt; smembers test:teachers  //显示当前集合所有元素1) "aaa"2) "ccc"//sorted sets 有序集合 按照score排序127.0.0.1:6379&gt;zadd test:students 01 aaa 02 bbb 03 ccc127.0.0.1:6379&gt;zcard test:students127.0.0.1:6379&gt;zscore test:students aaa127.0.0.1:6379&gt;zrank test:students aaa 127.0.0.1:6379&gt;zrange test:students 0 3//全局命令keys * 查询当前库里共有多少keykey test* 查询当前库里test开头的keytype test:user  查询test：user是什么类型的keyexists test:user 查询是否存在此keydel test:user  删除keyexpire test:students n 设置key存在时间 n秒</code></pre><h2 id="Spring整合Redis"><a href="#Spring整合Redis" class="headerlink" title="Spring整合Redis"></a>Spring整合Redis</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>spring-boot-starter-data-redis</p><h3 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h3><p>配置数据库参数</p><p>编写配置类，构造RedisTemplate</p><h3 id="访问Redis"><a href="#访问Redis" class="headerlink" title="访问Redis"></a>访问Redis</h3><p>redisTemplate.opsForValue()</p><p>redisTemplate.opsForHash()</p><p>redisTemplate.opsForList()</p><p>redisTemplate.opsForSet()</p><p>redisTemplate.opsForZSet()</p><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><pre><code>// 编程式事务    @Test    public void testTransaction() {        Object result = redisTemplate.execute(new SessionCallback() {            @Override            public Object execute(RedisOperations redisOperations) throws DataAccessException {                String redisKey = "text:tx";                // 启用事务                redisOperations.multi();               redisOperations.opsForSet().add(redisKey, "zhangsan");              redisOperations.opsForSet().add(redisKey, "lisi");             redisOperations.opsForSet().add(redisKey, "wangwu");               System.out.println(redisOperations.opsForSet().members(redisKey));                // 提交事务                return redisOperations.exec();            }        });        System.out.println(result);    }</code></pre><h2 id="Redis高级数据类型"><a href="#Redis高级数据类型" class="headerlink" title="Redis高级数据类型"></a>Redis高级数据类型</h2><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>采用一种基数算法，用于完成独立总数的统计<br>占据空间小，无论统计多少个数据，只占12k的内存<br>不精确的统计算法，标准误差为0.81%</p><h3 id="Bitmap（统计用户的签到情况）"><a href="#Bitmap（统计用户的签到情况）" class="headerlink" title="Bitmap（统计用户的签到情况）"></a>Bitmap（统计用户的签到情况）</h3><p>不是一种独立的数据结构，实际上就是字符串<br>支持按位存取数据，可以将其看成是byte数组<br>适合存储大量的联系的数据的布尔值\</p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="UV（Unique-Visitor）"><a href="#UV（Unique-Visitor）" class="headerlink" title="UV（Unique Visitor）"></a>UV（Unique Visitor）</h3><p>独立访客，需通过用户ip排重统计数据。<br>每次访问都要进行统计<br>HyperLogLog，性能好且存储空间小</p><h3 id="DAU（Daily-Active-User）"><a href="#DAU（Daily-Active-User）" class="headerlink" title="DAU（Daily Active User）"></a>DAU（Daily Active User）</h3><p>日活跃用户，需通过用户ID排重统计数据<br>访问过一次，则认为其活跃<br>BitMap，性能好且可以统计精确的结果</p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="消息系统介绍"><a href="#消息系统介绍" class="headerlink" title="消息系统介绍"></a>消息系统介绍</h2><p>一个消息系统负责将数据从一个应用传递到另外一个应用，应用只需关注于数据，无需关注数据在两个或多个应用间是如何传递的。分布式消息传递基于可靠的消息队列，在客户端应用和消息系统之间异步传递消息。有两种主要的消息传递模式：<strong>点对点传递模式、发布-订阅模式</strong>。大部分的消息系统选用发布-订阅模式。<strong>Kafka就是一种发布-订阅模式</strong>。</p><h3 id="点对点消息传递模式"><a href="#点对点消息传递模式" class="headerlink" title="点对点消息传递模式"></a>点对点消息传递模式</h3><p>在点对点消息系统中，消息持久化到一个队列中。此时，将有一个或多个消费者消费队列中的数据。但是一条消息只能被消费一次。当一个消费者消费了队列中的某条数据之后，该条数据则从消息队列中删除。该模式即使有多个消费者同时消费数据，也能保证数据处理的顺序。这种架构描述示意图如下：</p><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29TsMrFYg0AgY0k9-/root/content"></p><p><strong>生产者发送一条消息到queue，只有一个消费者能收到</strong>。</p><h3 id="发布-订阅消息传递模式"><a href="#发布-订阅消息传递模式" class="headerlink" title="发布-订阅消息传递模式"></a>发布-订阅消息传递模式</h3><p>在发布-订阅消息系统中，消息被持久化到一个topic中。与点对点消息系统不同的是，消费者可以订阅一个或多个topic，消费者可以消费该topic中所有的数据，同一条数据可以被多个消费者消费，数据被消费后不会立马删除。在发布-订阅消息系统中，消息的生产者称为发布者，消费者称为订阅者。该模式的示例图如下：</p><p><img src="https://gitee.com/brook2bubble/pic-go/raw/master/img/1228818-20180507190443404-1266011458.png" alt="img"></p><p><strong>发布者发送到topic的消息，只有订阅了topic的订阅者才会收到消息</strong>。</p><h2 id="Kafka的优点"><a href="#Kafka的优点" class="headerlink" title="Kafka的优点"></a>Kafka的优点</h2><p>解耦  冗余（副本） 扩展性 灵活性&amp;峰值处理能力 可恢复性　顺序保证　缓冲　异步通信</p><h2 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在深入理解Kafka之前，先介绍一下Kafka中的术语。下图展示了Kafka的相关术语以及之间的关系：</p><p><img src="https://gitee.com/brook2bubble/pic-go/raw/master/img/1228818-20180507190731172-1317551019.png" alt="img"></p><p>上图中一个topic配置了3个partition。Partition1有两个offset：0和1。Partition2有4个offset。Partition3有1个offset。副本的id和副本所在的机器的id恰好相同。</p><p>如果一个topic的副本数为3，那么Kafka将在集群中为每个partition创建3个相同的副本。集群中的每个broker存储一个或多个partition。多个producer和consumer可同时生产和消费数据。</p><h3 id="broker"><a href="#broker" class="headerlink" title="broker"></a>broker</h3><p>Kafka 集群包含一个或多个服务器，服务器节点称为broker。</p><p>broker存储topic的数据。如果某topic有N个partition，集群有N个broker，那么每个broker存储该topic的一个partition。</p><p>如果某topic有N个partition，集群有(N+M)个broker，那么其中有N个broker存储该topic的一个partition，剩下的M个broker不存储该topic的partition数据。</p><p>如果某topic有N个partition，集群中broker数目少于N个，那么一个broker存储该topic的一个或多个partition。在实际生产环境中，尽量避免这种情况的发生，这种情况容易导致Kafka集群数据不均衡。</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p><p>类似于数据库的表名</p><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a><strong>Partition</strong></h3><p>topic中的数据分割为一个或多个partition。每个topic至少有一个partition。每个partition中的数据使用多个segment文件存储。partition中的数据是有序的，不同partition间的数据丢失了数据的顺序。如果topic有多个partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将partition数目设为1。</p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>生产者即数据的发布者，该角色将消息发布到Kafka的topic中。broker接收到生产者发送的消息后，broker将该消息<strong>追加</strong>到当前用于追加数据的segment文件中。生产者发送的消息，存储到一个partition中，生产者也可以指定数据存储的partition。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消费者可以从broker中读取数据。消费者可以消费多个topic中的数据。</p><h3 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h3><p>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p><h3 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h3><p>每个partition有多个副本，其中有且仅有一个作为Leader，Leader是当前负责数据的读写的partition。</p><h3 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h3><p>Follower跟随Leader，所有写请求都通过Leader路由，数据变更会广播给所有Follower，Follower与Leader保持数据同步。如果Leader失效，则从Follower中选举出一个新的Leader。当Follower与Leader挂掉、卡住或者同步太慢，leader会把这个follower从“in sync replicas”（ISR）列表中删除，重新创建一个Follower。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>E:\Javastudy\kafka\kafka_2.13-2.8.0\config</p><p>zookeeper.properties  server.properties 更改存储位置</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h3><pre><code>e:\Javastudy\kafka\kafka_2.13-2.8.0&gt;bin\windows\zookeeper-server-start.bat config\zookeeper.properties</code></pre><h3 id="启动kafka-server"><a href="#启动kafka-server" class="headerlink" title="启动kafka server"></a>启动kafka server</h3><pre><code>e:\Javastudy\kafka\kafka_2.13-2.8.0&gt;bin\windows\kafka-server-start.bat config\server.properties</code></pre><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><pre><code>e:\Javastudy\kafka\kafka_2.13-2.8.0\bin\windows&gt;kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic testCreated topic test.// --replication-factor 1 用来设置主题的副本数。每个主题可以有多个副本，副本位于集群中不同的broker上，也就是说副本的数量不能超过broker的数量，否则创建主题时会失败。//localhost:9092 服务器地址  //--partitions 1   　主题分区数//--topic 主题名称</code></pre><h3 id="查看主题"><a href="#查看主题" class="headerlink" title="查看主题"></a>查看主题</h3><pre><code>e:\Javastudy\kafka\kafka_2.13-2.8.0\bin\windows&gt;kafka-topics.bat --list --bootstrap-server localhost:9092test</code></pre><h3 id="创建消息（生产者）"><a href="#创建消息（生产者）" class="headerlink" title="创建消息（生产者）"></a>创建消息（生产者）</h3><pre><code>e:\Javastudy\kafka\kafka_2.13-2.8.0\bin\windows&gt;kafka-console-producer.bat --broker-list localhost:9092 --topic test&gt;hello</code></pre><h3 id="查看消息（消费者）"><a href="#查看消息（消费者）" class="headerlink" title="查看消息（消费者）"></a>查看消息（消费者）</h3><pre><code>e:\Javastudy\kafka\kafka_2.13-2.8.0\bin\windows&gt;kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginninghello</code></pre><h1 id="spring整合kafka"><a href="#spring整合kafka" class="headerlink" title="spring整合kafka"></a>spring整合kafka</h1><h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;    &lt;version&gt;2.7.5&lt;/version&gt;&lt;/dependency&gt;pom.xml</code></pre><h2 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a>配置application.properties</h2><pre><code>#KafkaPropertiesspring.kafka.bootstrap-servers=localhost:9092spring.kafka.consumer.group-id=community-consumer-group spring.kafka.consumer.enable-auto-commit=true  //自动提交 spring.kafka.consumer.auto-commit-interval=3000  //自动提交间隔3s</code></pre><h1 id="系统消息通知"><a href="#系统消息通知" class="headerlink" title="系统消息通知"></a>系统消息通知</h1><p>点赞 评论 回复</p><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>使用kafka消息分发，message表存储消息</p><p>主要消息内容content采用json存储</p><pre><code>{"entityType":1,"entityId":280,"postId":280,"userId":149}</code></pre><h3 id="实体类Event"><a href="#实体类Event" class="headerlink" title="实体类Event"></a>实体类Event</h3><pre><code>public class Event {    private String topic;    private int userId;    private int entityType;    private int entityId;    private int entityUserId;    private Map&lt;String,Object&gt; data = new HashMap&lt;&gt;();    public String getTopic() {        return topic;    }    public Event setTopic(String topic) {        this.topic = topic;        return this;    }    public int getUserId() {        return userId;    }    public Event setUserId(int userId) {        this.userId = userId;        return this;    }    public int getEntityType() {        return entityType;    }    public Event setEntityType(int entityType) {        this.entityType = entityType;        return this;    }    public int getEntityId() {        return entityId;    }    public Event setEntityId(int entityId) {        this.entityId = entityId;        return this;    }    public int getEntityUserId() {        return entityUserId;    }    public Event setEntityUserId(int entityUserId) {        this.entityUserId = entityUserId;        return this;    }    public Map&lt;String, Object&gt; getData() {        return data;    }    public Event setData(String key, Object value) {        this.data.put(key,value);        return this;    }}</code></pre><h3 id="设置kafka-eventConsumer-eventProducer"><a href="#设置kafka-eventConsumer-eventProducer" class="headerlink" title="设置kafka eventConsumer eventProducer"></a>设置kafka eventConsumer eventProducer</h3><p>在conroller层触发点赞关注回复事件时调用eventProducer.fireEvent（event）向用户发送消息</p><h3 id="用户在消息页面查看所有消息"><a href="#用户在消息页面查看所有消息" class="headerlink" title="用户在消息页面查看所有消息"></a>用户在消息页面查看所有消息</h3><pre><code>查看系统通知详情页 分类显示但是原项目查看点赞回复时是直接到相应帖子首页后续想实现直接跳转到具体点赞和回复所在的页面</code></pre><pre><code>1.新加查询 通过message表中消息create_time在comment中查询相应的排序数 通过（i-1）/5 +1 为sortNo值然后通过controller传递给页面，页面因为本身还要传递postId 就需要th：href解析两个变量之前是th:href="@{|/discuss/detail/${map.postId}|}"解析后地址http://localhost:8080/community/discuss/detail/283实现方式为th:href="${'/community/discuss/detail/'}+${map.postId}+${'?current='}+${map.sortNo}"解析后地址http://localhost:8080/community/discuss/detail/283?current=1但是由于点赞关注采用Redis实现 两个表的相关数据创建时间出现了偏差，导致系统查询排序数返回null 导致500错误，只能从底层改造</code></pre><p>2.在消息content中加入sortNo</p><p>CommentController</p><pre><code>//触发评论事件        Event event = new Event()                .setTopic(TOPIC_COMMENT)                .setUserId(hostHolder.getUser().getId())                .setEntityType(comment.getEntityType())                .setEntityId(comment.getEntityId())                .setData("postId",discussPostId);        if (comment.getEntityType()== ENTITY_TYPE_POST){            DiscussPost target = discussPostService.findDiscussPostById(comment.getEntityId());            event.setEntityUserId(target.getUserId())                    .setData("sortNo",commentService.findIdFromCreateDate(comment.getCreateTime()));        }        eventProducer.fireEvent(event);</code></pre><p>MessageController</p><pre><code>/**                 * 如果topic是评论帖子或者回复就返回到该评论所在页数                 * 如果topic是点赞帖子 返回帖子 点赞对象是评论就返回到评论所在页数                 */                if(topic.equals(TOPIC_COMMENT)){                    int sortNo = 0;                    if ((Integer)data.get("entityType")==ENTITY_TYPE_POST){                       sortNo= commentService.findCommentSortById(ENTITY_TYPE_POST, (Integer) data.get("postId"), (Integer) data.get("sortNo"));                    }else if ((Integer)data.get("entityType")==ENTITY_TYPE_COMMENT){                        sortNo= commentService.findCommentSortById(ENTITY_TYPE_POST, (Integer) data.get("postId"), (Integer) data.get("entityId"));                    }                    sortNo = (sortNo - 1) / 5 + 1;                        map.put("sortNo",sortNo);                }                if(topic.equals(TOPIC_LIKE)){                    int sortNo = 0;                    if ((Integer)data.get("entityType")==ENTITY_TYPE_COMMENT){                        Comment comment = commentService.findCommentById((Integer) data.get("entityId"));                        if (comment.getEntityType() == ENTITY_TYPE_POST){                            sortNo= commentService.findCommentSortById(ENTITY_TYPE_POST, (Integer) data.get("postId"), (Integer) data.get("entityId"));                        }else if (comment.getEntityType() == ENTITY_TYPE_COMMENT){                            sortNo= commentService.findCommentSortById(ENTITY_TYPE_POST, (Integer) data.get("postId"), comment.getEntityId());                        }                        sortNo = (sortNo - 1) / 5 + 1;                    }                    map.put("sortNo",sortNo);                }</code></pre><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><pre><code>https://zhuanlan.zhihu.com/p/358744225</code></pre><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><pre><code>https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.14.0-windows-x86_64.zip</code></pre><p>直接解压到文件夹Javastudy/elasticSearch</p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>config/elasticsearch.yml</p><pre><code>cluster.name: brooknode.name: node01path.data: e:\Javastudy\data\elasticsearch-7.12.1\datapath.logs: e:\Javastudy\data\elasticsearch-7.12.1\logscluster.initial_master_nodes: ["node01"]</code></pre><h2 id="添加中文的分词插件"><a href="#添加中文的分词插件" class="headerlink" title="添加中文的分词插件"></a>添加中文的分词插件</h2><p>默认是英文分词</p><pre><code>https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.12.1</code></pre><p>解压到</p><pre><code>E:\Javastudy\elasticsearch-7.12.1\plugins\ik</code></pre><h2 id="启动与使用"><a href="#启动与使用" class="headerlink" title="启动与使用"></a>启动与使用</h2><p>bin目录 .bat</p><p>查看健康状况</p><pre><code>curl -X GET "localhost:9200/_cat/health?v"</code></pre><pre><code>查看节点数C:\Users\dgx19&gt;curl -X GET "localhost:9200/_cat/nodes?v"ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name127.0.0.1           28          60  23                          cdfhilmrstw *      BROOK</code></pre><pre><code>创建和查看索引C:\Users\dgx19&gt;curl -X PUT "localhost:9200/test"{"acknowledged":true,"shards_acknowledged":true,"index":"test"}C:\Users\dgx19&gt;curl -X GET "localhost:9200/_cat/indices?v"health status index uuid                   pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   test  f1n0-1QkQjOB8aDSiEGFOA   1   1          0            0       208b           208b</code></pre><pre><code>删除索引C:\Users\dgx19&gt;curl -X DELETE "localhost:9200/test"{"acknowledged":true}</code></pre><h2 id="Postman安装与使用"><a href="#Postman安装与使用" class="headerlink" title="Postman安装与使用"></a>Postman安装与使用</h2><p>Postman一款非常流行的API调试工具。其实，开发人员用的更多。因为测试人员做接口测试会有更多选择，例如Jmeter、soapUI等。不过，对于开发过程中去调试接口，Postman确实足够的简单方便，而且功能强大</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、Postman最早是作用chrome浏览器插件存在的，所以，你可以到chrome商店搜索下载安装，因为重所周知的原因，所以，大家都会找别人共享的postman插件文件来安装。由于2018年初Chrome停止对Chrome应用程序的支持。</p><p>2、Postman提供了独立的安装包，不再依赖于Chrome浏览器了。同时支持MAC、Windows和Linux，推荐你使用这种方式安装。</p><pre><code>https://dl.pstmn.io/download/latest/win64</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre><code>DELETE　　　　　　localhost:9200/test</code></pre><h4 id="创建表数据"><a href="#创建表数据" class="headerlink" title="创建表数据"></a>创建表数据</h4><p>localhost:9200/test/_doc/1　　test下id为1的数据提交   __doc是占位符</p><h4 id="查询表数据"><a href="#查询表数据" class="headerlink" title="查询表数据"></a>查询表数据</h4><pre><code>GET      localhost:9200/_search?q=content:个人 关键词“个人”查询 单选项查询</code></pre><h4 id="多个索引"><a href="#多个索引" class="headerlink" title="多个索引"></a>多个索引</h4><p>在body中用json格式查询</p><pre><code>GET  localhost:9200/_searchbody:{    "query":{        "multi_match":{            "query":"论坛",            "fields":["title","content"]        }    }}</code></pre><h1 id="Spring整合ElasticeSearch"><a href="#Spring整合ElasticeSearch" class="headerlink" title="Spring整合ElasticeSearch"></a>Spring整合ElasticeSearch</h1><p><a class="link" href="https://www.freesion.com/article/41621087939/">https://www.freesion.com/article/41621087939/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.12/java-rest-high-getting-started-initialization.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.12/java-rest-high-getting-started-initialization.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://cloud.tencent.com/developer/article/1795660?from=article.detail.1757034">https://cloud.tencent.com/developer/article/1795660?from=article.detail.1757034<i class="fas fa-external-link-alt"></i></a></p><p>引入依赖</p><p>   -spring-boot-start-data-elasticsearch</p><p>配置Elasticsearch</p><p>  -cluster-name、cluster-nodes</p><p>Spring Data Elasticsearch</p><p>  -ElastcsearchTemple  过时了 不再使用 使用ElasticsearchRestTemplate</p><p>  -ElasticsearchRespository search方法也过时了改用ElasticsearchRestTemplate的search()方法</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>ElasticsearchTemplate不建议使用了，改为使用ElasticsearchRestTemplate，ElasticsearchRepository实现复杂查询的方法也不建议使用了。从此我们简单的数据操作可以使用ElasticsearchRepository，而复杂的数据操作只能使用ElasticsearchRestTemplate了</p><h2 id="Maven引入依赖"><a href="#Maven引入依赖" class="headerlink" title="Maven引入依赖"></a>Maven引入依赖</h2><pre><code> &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;            &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;            &lt;version&gt;7.12.1&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;            &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><p>cluster-nodes=</p><p>cluster-name=  不再使用</p><pre><code>#ElasticsearchProperties//端口配置spring.elasticsearch.rest.uris=localhost:9200spring.data.elasticsearch.repositories.enabled = true</code></pre><pre><code>@Repositorypublic interface DiscussPostRepository extends ElasticsearchRepository&lt;DiscussPost,Integer&gt; {}</code></pre><h3 id="接口需要继承ElasticSearchRepository"><a href="#接口需要继承ElasticSearchRepository" class="headerlink" title="接口需要继承ElasticSearchRepository"></a>接口需要继承ElasticSearchRepository</h3><pre><code class="java">@Repositorypublic interface ItemRepository extends ElasticsearchRepository&lt;Item, Long&gt; {}</code></pre><h3 id="接口基础用法"><a href="#接口基础用法" class="headerlink" title="接口基础用法"></a>接口基础用法</h3><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><pre><code class="java">@Document(indexName = "discusspost")public class DiscussPost {    @Id    private int id;    @Field(type = FieldType.Integer)    private int userId;    @Field(type = FieldType.Text,analyzer = "ik_max_word",searchAnalyzer = "ik_smart")    private  String title;    @Field(type = FieldType.Text,analyzer = "ik_max_word",searchAnalyzer = "ik_smart")    private  String content;    @Field(type = FieldType.Integer)    private int type;    @Field(type = FieldType.Integer)    private int status;    @Field(type =FieldType.Date)    private Date createTime;    @Field(type = FieldType.Integer)    private int commentCount;    @Field(type = FieldType.Double)    private  int score;}</code></pre><h4 id="ElasticSearchRepository已封装方法"><a href="#ElasticSearchRepository已封装方法" class="headerlink" title="ElasticSearchRepository已封装方法"></a>ElasticSearchRepository已封装方法</h4><pre><code class="java">  @Autowired    private DiscussPostRepository discussPostRepository; @Autowired    private ElasticsearchRestTemplate elasticsearchRestTemplate; public void saveDiscussPost(DiscussPost post){        discussPostRepository.save(post);    }    public void deleteDiscussPost(int id){        discussPostRepository.deleteById(id);    }//保存 或 更新itemRepository.save(item);//删除itemRepository.deleteById(id);/**     * 通过id获取信息     *     * @param id id     * @return {@link Item}     */public Item esGetInfoById(Long id){     Optional&lt;Item&gt; item = itemRepository.findById(id);      return  item.get();}</code></pre><p>基于SPRINGBOOT解决ELASTICSEARCH与REDIS的NETTY冲突问题<a class="link" href="https://www.freesion.com/article/59921236212/">https://www.freesion.com/article/59921236212/<i class="fas fa-external-link-alt"></i></a></p><h1 id="项目进阶"><a href="#项目进阶" class="headerlink" title="项目进阶"></a>项目进阶</h1><h2 id="Spring-Scurity"><a href="#Spring-Scurity" class="headerlink" title="Spring Scurity"></a>Spring Scurity</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。提供了完善的<strong>认证机制</strong>和方法级的<strong>授权功能</strong>。是一款非常优秀的权限管理框架。它的核心是一组过滤器链，不同的功能经由不同的过滤器。</p><p>一般来说，常见的安全管理技术栈的组合是这样的：</p><ul><li>SSM + Shiro</li><li>Spring Boot/Spring Cloud + Spring Security</li></ul><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>  身份的认证和授权</p><p>  防止各种攻击</p><p>  支持与Servlet API Spring MVC 等web技术集成</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>底层使用Filter（javaEE标准）进行拦截</li><li>Filter–&gt;DispatchServlet–&gt;Interceptor–&gt;Controller(后三者属于Spring MVC)</li></ul><h2 id="任务的执行和调度"><a href="#任务的执行和调度" class="headerlink" title="任务的执行和调度"></a>任务的执行和调度</h2><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29T4SYDBj70musnkc/root/content"></p><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p><img src="https://api.onedrive.com/v1.0/shares/s!AtrhubmDW-n29T_o0NVF6rCvlfok/root/content"></p><h1 id="项目问题解决"><a href="#项目问题解决" class="headerlink" title="项目问题解决"></a>项目问题解决</h1><h2 id="1-AOP没生效"><a href="#1-AOP没生效" class="headerlink" title="1.AOP没生效"></a>1.AOP没生效</h2><h3 id="解决：没有引入aop依赖，不需要引入aspectJ"><a href="#解决：没有引入aop依赖，不需要引入aspectJ" class="headerlink" title="解决：没有引入aop依赖，不需要引入aspectJ"></a>解决：没有引入aop依赖，不需要引入aspectJ</h3><pre><code> &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><a class="link" href="https://www.yimipuzi.com/1156.html">https://www.yimipuzi.com/1156.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;涉及到Spring、SpringMVC、Mybatis的整合，以及SpringBoot去简化Spring的配置开发&lt;/p&gt;
&lt;p&gt;主要的技术</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="project" scheme="http://example.com/tags/project/"/>
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="spring-boot" scheme="http://example.com/tags/spring-boot/"/>
    
    <category term="Maven" scheme="http://example.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>口水鸡</title>
    <link href="http://example.com/2021/02/11/%E5%8F%A3%E6%B0%B4%E9%B8%A1/"/>
    <id>http://example.com/2021/02/11/%E5%8F%A3%E6%B0%B4%E9%B8%A1/</id>
    <published>2021-02-11T10:35:29.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><p>制作口水鸡需要的材料：</p><p>土鸡一只，大葱两根，生姜3块，大蒜6颗，青花椒十几个，料酒30克，小米辣4个，食用盐适量，白糖3克，生抽酱油10克，香醋2克，煮鸡的原汤5克，辣椒红油适量，青花椒面适量。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>1、将土鸡整个清理干净，将大葱切成段，生姜拍碎，净锅装满清水，然后将准备好的葱姜下锅，加入食用盐10克，料酒30克，然后将整个鸡下入锅中开大火烧开，中途再加入十几个青花椒去除异味，水开之后关火盖上锅盖将鸡浸泡40分钟，这样可以使鸡肉浸泡熟透，40分钟以后将鸡捞出放入冷水中冷却透凉，这样鸡肉的皮会更紧实滑嫩。</p><p>2、我们开始准备料汁：石臼中加入去皮生姜15克，大蒜15克，加入4个小米辣，然后用石臼捣碎，如果想捣的容易一点，可以把生姜、大蒜和小米辣切的碎一点再捣，捣碎以后放入一个干净的碗中，然后加入食用盐2克、白糖3克、生抽酱油10克、香醋2克、煮鸡的原汤5克搅拌均匀备用，然后加入适量的辣椒红油、适量的青花椒面搅拌均匀备用。</p><p>3、将冷却好的鸡腿和鸡翅膀取下，然后将鸡肉剁成大小均匀的小块放入盘中备用，然后将调好的料汁均匀的淋到鸡肉上面，然后撒上适量的葱花即可上菜，一道美味的口水鸡就做好了。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>制作口水鸡需要注意的事项：</p><p>1、鸡的品种可以自由选择，也可以用三黄鸡来制作，也可以买鲜鸡腿或者冻鸡腿。</p><p>2、料汁加红油可以适量加多一点。</p><p>3、用石臼捣碎可以使材料的香味更浓郁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;材料&quot;&gt;&lt;a href=&quot;#材料&quot; class=&quot;headerlink&quot; title=&quot;材料&quot;&gt;&lt;/a&gt;材料&lt;/h1&gt;&lt;p&gt;制作口水鸡需要的材料：&lt;/p&gt;
&lt;p&gt;土鸡一只，大葱两根，生姜3块，大蒜6颗，青花椒十几个，料酒30克，小米辣4个，食用盐适量，白糖3克，生</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="美食" scheme="http://example.com/tags/%E7%BE%8E%E9%A3%9F/"/>
    
    <category term="记录" scheme="http://example.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据库</title>
    <link href="http://example.com/2020/01/26/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2020/01/26/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-01-26T03:21:54.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><p>模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p><p>主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。</p><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p><p><strong>DDL：Data Definition Language</strong></p><p>DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。</p><p><strong>DML：Data Manipulation Language</strong></p><p>DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</p><p><strong>DQL：Data Query Language</strong></p><p>DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。</p><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p>SQL 支持以下三种注释：</p><pre><code class="sql">## 注释SELECT *FROM mytable; -- 注释/* 注释1   注释2 */</code></pre><p>数据库创建与使用：</p><pre><code class="sql">CREATE DATABASE test;USE test;</code></pre><h2 id="二、创建表"><a href="#二、创建表" class="headerlink" title="二、创建表"></a>二、创建表</h2><pre><code class="sql">CREATE TABLE mytable (  # int 类型，不为空，自增  id INT NOT NULL AUTO_INCREMENT,  # int 类型，不可为空，默认值为 1，不为空  col1 INT NOT NULL DEFAULT 1,  # 变长字符串类型，最长为 45 个字符，可以为空  col2 VARCHAR(45) NULL,  # 日期类型，可为空  col3 DATE NULL,  # 设置主键为 id  PRIMARY KEY (`id`));</code></pre><h2 id="三、修改表"><a href="#三、修改表" class="headerlink" title="三、修改表"></a>三、修改表</h2><p>添加列</p><pre><code class="sql">ALTER TABLE mytableADD col CHAR(20);</code></pre><p>删除列</p><pre><code class="sql">ALTER TABLE mytableDROP COLUMN col;</code></pre><p>删除表</p><pre><code class="sql">DROP TABLE mytable;</code></pre><h2 id="四、插入"><a href="#四、插入" class="headerlink" title="四、插入"></a>四、插入</h2><p>普通插入</p><pre><code class="sql">INSERT INTO mytable(col1, col2)VALUES(val1, val2);</code></pre><p>插入检索出来的数据</p><pre><code class="sql">INSERT INTO mytable1(col1, col2)SELECT col1, col2FROM mytable2;</code></pre><p>将一个表的内容插入到一个新表</p><pre><code class="sql">CREATE TABLE newtable ASSELECT * FROM mytable;</code></pre><h2 id="五、更新"><a href="#五、更新" class="headerlink" title="五、更新"></a>五、更新</h2><pre><code class="sql">UPDATE mytableSET col = valWHERE id = 1;</code></pre><h2 id="六、删除"><a href="#六、删除" class="headerlink" title="六、删除"></a>六、删除</h2><pre><code class="sql">DELETE FROM mytableWHERE id = 1;</code></pre><p><strong>TRUNCATE TABLE</strong> 可以清空表，也就是删除所有行。</p><pre><code class="sql">TRUNCATE TABLE mytable;</code></pre><p>使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。</p><h2 id="七、查询"><a href="#七、查询" class="headerlink" title="七、查询"></a>七、查询</h2><h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</p><pre><code class="sql">SELECT DISTINCT col1, col2FROM mytable;</code></pre><h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p><p>返回前 5 行：</p><pre><code class="sql">SELECT *FROM mytableLIMIT 5;SELECT *FROM mytableLIMIT 0, 5;</code></pre><p>返回第 3 ~ 5 行：</p><pre><code class="sql">SELECT *FROM mytableLIMIT 2, 3;</code></pre><h2 id="八、排序"><a href="#八、排序" class="headerlink" title="八、排序"></a>八、排序</h2><ul><li><strong>ASC</strong> ：升序（默认）</li><li><strong>DESC</strong> ：降序</li></ul><p>可以按多个列进行排序，并且为每个列指定不同的排序方式：</p><pre><code class="sql">SELECT *FROM mytableORDER BY col1 DESC, col2 ASC;</code></pre><h2 id="九、过滤"><a href="#九、过滤" class="headerlink" title="九、过滤"></a>九、过滤</h2><p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p><pre><code class="sql">SELECT *FROM mytableWHERE col IS NULL;</code></pre><p>下表显示了 WHERE 子句可用的操作符</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;&gt; !=</td><td align="center">不等于</td></tr><tr><td align="center">&lt;= !&gt;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;= !&lt;</td><td align="center">大于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在两个值之间</td></tr><tr><td align="center">IS NULL</td><td align="center">为 NULL 值</td></tr></tbody></table><p>应该注意到，NULL 与 0、空字符串都不同。</p><p><strong>AND 和 OR</strong> 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p><p><strong>IN</strong> 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p><p><strong>NOT</strong> 操作符用于否定一个条件。</p><h2 id="十、通配符"><a href="#十、通配符" class="headerlink" title="十、通配符"></a>十、通配符</h2><p>通配符也是用在过滤语句中，但它只能用于文本字段。</p><ul><li><strong>%</strong> 匹配 &gt;=0 个任意字符；</li><li><strong>_</strong> 匹配 ==1 个任意字符；</li><li><strong>[ ]</strong> 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</li></ul><p>使用 Like 来进行通配符匹配。</p><pre><code class="sql">SELECT *FROM mytableWHERE col LIKE '[^AB]%'; -- 不以 A 和 B 开头的任意文本</code></pre><p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p><h2 id="十一、计算字段"><a href="#十一、计算字段" class="headerlink" title="十一、计算字段"></a>十一、计算字段</h2><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p><p>计算字段通常需要使用 <strong>AS</strong> 来取别名，否则输出的时候字段名为计算表达式。</p><pre><code class="sql">SELECT col1 * col2 AS aliasFROM mytable;</code></pre><p><strong>CONCAT()</strong> 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 <strong>TRIM()</strong> 可以去除首尾空格。</p><pre><code class="sql">SELECT CONCAT(TRIM(col1), '(', TRIM(col2), ')') AS concat_colFROM mytable;</code></pre><h2 id="十二、函数"><a href="#十二、函数" class="headerlink" title="十二、函数"></a>十二、函数</h2><p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">AVG()</td><td align="center">返回某列的平均值</td></tr><tr><td align="center">COUNT()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">MAX()</td><td align="center">返回某列的最大值</td></tr><tr><td align="center">MIN()</td><td align="center">返回某列的最小值</td></tr><tr><td align="center">SUM()</td><td align="center">返回某列值之和</td></tr></tbody></table><p>AVG() 会忽略 NULL 行。</p><p>使用 DISTINCT 可以汇总不同的值。</p><pre><code class="sql">SELECT AVG(DISTINCT col1) AS avg_colFROM mytable;</code></pre><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LEFT()</td><td align="center">左边的字符</td></tr><tr><td align="center">RIGHT()</td><td align="center">右边的字符</td></tr><tr><td align="center">LOWER()</td><td align="center">转换为小写字符</td></tr><tr><td align="center">UPPER()</td><td align="center">转换为大写字符</td></tr><tr><td align="center">LTRIM()</td><td align="center">去除左边的空格</td></tr><tr><td align="center">RTRIM()</td><td align="center">去除右边的空格</td></tr><tr><td align="center">LENGTH()</td><td align="center">长度</td></tr><tr><td align="center">SOUNDEX()</td><td align="center">转换为语音值</td></tr></tbody></table><p>其中， <strong>SOUNDEX()</strong> 可以将一个字符串转换为描述其语音表示的字母数字模式。</p><pre><code class="sql">SELECT *FROM mytableWHERE SOUNDEX(col1) = SOUNDEX('apple')</code></pre><h3 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h3><ul><li>日期格式：YYYY-MM-DD</li><li>时间格式：HH:<zero-width space="">MM:SS</zero-width></li></ul><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">ADDDATE()</td><td align="center">增加一个日期（天、周等）</td></tr><tr><td align="center">ADDTIME()</td><td align="center">增加一个时间（时、分等）</td></tr><tr><td align="center">CURDATE()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CURTIME()</td><td align="center">返回当前时间</td></tr><tr><td align="center">DATE()</td><td align="center">返回日期时间的日期部分</td></tr><tr><td align="center">DATEDIFF()</td><td align="center">计算两个日期之差</td></tr><tr><td align="center">DATE_ADD()</td><td align="center">高度灵活的日期运算函数</td></tr><tr><td align="center">DATE_FORMAT()</td><td align="center">返回一个格式化的日期或时间串</td></tr><tr><td align="center">DAY()</td><td align="center">返回一个日期的天数部分</td></tr><tr><td align="center">DAYOFWEEK()</td><td align="center">对于一个日期，返回对应的星期几</td></tr><tr><td align="center">HOUR()</td><td align="center">返回一个时间的小时部分</td></tr><tr><td align="center">MINUTE()</td><td align="center">返回一个时间的分钟部分</td></tr><tr><td align="center">MONTH()</td><td align="center">返回一个日期的月份部分</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">SECOND()</td><td align="center">返回一个时间的秒部分</td></tr><tr><td align="center">TIME()</td><td align="center">返回一个日期时间的时间部分</td></tr><tr><td align="center">YEAR()</td><td align="center">返回一个日期的年份部分</td></tr></tbody></table><pre><code class="sql">mysql&gt; SELECT NOW();2018-4-14 20:25:11</code></pre><h3 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">SIN()</td><td align="center">正弦</td></tr><tr><td align="center">COS()</td><td align="center">余弦</td></tr><tr><td align="center">TAN()</td><td align="center">正切</td></tr><tr><td align="center">ABS()</td><td align="center">绝对值</td></tr><tr><td align="center">SQRT()</td><td align="center">平方根</td></tr><tr><td align="center">MOD()</td><td align="center">余数</td></tr><tr><td align="center">EXP()</td><td align="center">指数</td></tr><tr><td align="center">PI()</td><td align="center">圆周率</td></tr><tr><td align="center">RAND()</td><td align="center">随机数</td></tr></tbody></table><h2 id="十三、分组"><a href="#十三、分组" class="headerlink" title="十三、分组"></a>十三、分组</h2><p>把具有相同的数据值的行放在同一组中。</p><p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p><p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p><pre><code class="sql">SELECT col, COUNT(*) AS numFROM mytableGROUP BY col;</code></pre><p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p><pre><code class="sql">SELECT col, COUNT(*) AS numFROM mytableGROUP BY colORDER BY num;</code></pre><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p><pre><code class="sql">SELECT col, COUNT(*) AS numFROM mytableWHERE col &gt; 2GROUP BY colHAVING num &gt;= 2;</code></pre><p>分组规定：</p><ul><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li><li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li><li>NULL 的行会单独分为一组；</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li></ul><h2 id="十四、子查询"><a href="#十四、子查询" class="headerlink" title="十四、子查询"></a>十四、子查询</h2><p>子查询中只能返回一个字段的数据。</p><p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p><pre><code class="sql">SELECT *FROM mytable1WHERE col1 IN (SELECT col2               FROM mytable2);</code></pre><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p><pre><code class="sql">SELECT cust_name, (SELECT COUNT(*)                   FROM Orders                   WHERE Orders.cust_id = Customers.cust_id)                   AS orders_numFROM CustomersORDER BY cust_name;</code></pre><h2 id="十五、连接"><a href="#十五、连接" class="headerlink" title="十五、连接"></a>十五、连接</h2><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p><p>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接又称等值连接，使用 INNER JOIN 关键字。</p><pre><code class="sql">SELECT A.value, B.valueFROM tablea AS A INNER JOIN tableb AS BON A.key = B.key;</code></pre><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p><pre><code class="sql">SELECT A.value, B.valueFROM tablea AS A, tableb AS BWHERE A.key = B.key;</code></pre><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p><p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p><p>子查询版本</p><pre><code class="sql">SELECT nameFROM employeeWHERE department = (      SELECT department      FROM employee      WHERE name = "Jim");</code></pre><p>自连接版本</p><pre><code class="sql">SELECT e1.nameFROM employee AS e1 INNER JOIN employee AS e2ON e1.department = e2.department      AND e2.name = "Jim";</code></pre><h3 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h3><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p><p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p><pre><code class="sql">SELECT A.value, B.valueFROM tablea AS A NATURAL JOIN tableb AS B;</code></pre><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p><p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p><pre><code class="sql">SELECT Customers.cust_id, Customer.cust_name, Orders.order_idFROM Customers LEFT OUTER JOIN OrdersON Customers.cust_id = Orders.cust_id;</code></pre><p>customers 表：</p><table><thead><tr><th align="center">cust_id</th><th align="center">cust_name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td></tr><tr><td align="center">2</td><td align="center">b</td></tr><tr><td align="center">3</td><td align="center">c</td></tr></tbody></table><p>orders 表：</p><table><thead><tr><th align="center">order_id</th><th align="center">cust_id</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">3</td></tr></tbody></table><p>结果：</p><table><thead><tr><th align="center">cust_id</th><th align="center">cust_name</th><th align="center">order_id</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">a</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">c</td><td align="center">3</td></tr><tr><td align="center">3</td><td align="center">c</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">b</td><td align="center">Null</td></tr></tbody></table><h2 id="十六、组合查询"><a href="#十六、组合查询" class="headerlink" title="十六、组合查询"></a>十六、组合查询</h2><p>使用 <strong>UNION</strong> 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p><p>每个查询必须包含相同的列、表达式和聚集函数。</p><p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p><p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p><pre><code class="sql">SELECT colFROM mytableWHERE col = 1UNIONSELECT colFROM mytableWHERE col =2;</code></pre><h2 id="十七、视图"><a href="#十七、视图" class="headerlink" title="十七、视图"></a>十七、视图</h2><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p><p>对视图的操作和对普通表的操作一样。</p><p>视图具有如下好处：</p><ul><li>简化复杂的 SQL 操作，比如复杂的连接；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul><pre><code class="sql">CREATE VIEW myview ASSELECT Concat(col1, col2) AS concat_col, col3*col4 AS compute_colFROM mytableWHERE col5 = val;</code></pre><h2 id="十八、存储过程"><a href="#十八、存储过程" class="headerlink" title="十八、存储过程"></a>十八、存储过程</h2><p>存储过程可以看成是对一系列 SQL 操作的批处理。</p><p>使用存储过程的好处：</p><ul><li>代码封装，保证了一定的安全性；</li><li>代码复用；</li><li>由于是预先编译，因此具有很高的性能。</li></ul><p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p><p>包含 in、out 和 inout 三种参数。</p><p>给变量赋值都需要用 select into 语句。</p><p>每次只能给一个变量赋值，不支持集合的操作。</p><pre><code class="sql">delimiter //create procedure myprocedure( out ret int )    begin        declare y int;        select sum(col1)        from mytable        into y;        select y*y into ret;    end //delimiter ;call myprocedure(@ret);select @ret;</code></pre><p>##十九、游标</p><p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>使用游标的四个步骤：</p><ol><li>声明游标，这个过程没有实际检索出数据；</li><li>打开游标；</li><li>取出数据；</li><li>关闭游标；</li></ol><pre><code class="sql">delimiter //create procedure myprocedure(out ret int)    begin        declare done boolean default 0;        declare mycursor cursor for        select col1 from mytable;        # 定义了一个 continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1        declare continue handler for sqlstate '02000' set done = 1;        open mycursor;        repeat            fetch mycursor into ret;            select ret;        until done end repeat;        close mycursor;    end // delimiter ;</code></pre><h2 id="二十、触发器"><a href="#二十、触发器" class="headerlink" title="二十、触发器"></a>二十、触发器</h2><p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p><p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p><p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p><pre><code class="sql">CREATE TRIGGER mytrigger AFTER INSERT ON mytableFOR EACH ROW SELECT NEW.col into @result;SELECT @result; -- 获取结果</code></pre><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p><p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p><p>##二十一、事务管理</p><p>基本术语：</p><ul><li>事务（transaction）指一组 SQL 语句；</li><li>回退（rollback）指撤销指定 SQL 语句的过程；</li><li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li><li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</li></ul><p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p><p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p><p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p><pre><code class="sql">START TRANSACTION// ...SAVEPOINT delete1// ...ROLLBACK TO delete1// ...COMMIT</code></pre><p>##二十二、字符集</p><p>基本术语：</p><ul><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部表示；</li><li>校对字符指定如何比较，主要用于排序和分组。</li></ul><p>除了给表指定字符集和校对外，也可以给列指定：</p><pre><code class="sql">CREATE TABLE mytable(col VARCHAR(10) CHARACTER SET latin COLLATE latin1_general_ci )DEFAULT CHARACTER SET hebrew COLLATE hebrew_general_ci;</code></pre><p>可以在排序、分组时指定校对：</p><pre><code class="sql">SELECT *FROM mytableORDER BY col COLLATE latin1_general_ci;</code></pre><p>##二十三、权限管理</p><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><pre><code class="sql">USE mysql;SELECT user FROM user;</code></pre><p><strong>创建账户</strong></p><p>新创建的账户没有任何权限。</p><pre><code class="sql">CREATE USER myuser IDENTIFIED BY 'mypassword';</code></pre><p><strong>修改账户名</strong></p><pre><code class="sql">RENAME USER myuser TO newuser;</code></pre><p><strong>删除账户</strong></p><pre><code class="sql">DROP USER myuser;</code></pre><p><strong>查看权限</strong></p><pre><code class="sql">SHOW GRANTS FOR myuser;</code></pre><p><strong>授予权限</strong></p><p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p><pre><code class="sql">GRANT SELECT, INSERT ON mydatabase.* TO myuser;</code></pre><p><strong>删除权限</strong></p><p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><pre><code class="sql">REVOKE SELECT, INSERT ON mydatabase.* FROM myuser;</code></pre><p><strong>更改密码</strong></p><p>必须使用 Password() 函数进行加密。</p><pre><code class="sql">SET PASSWROD FOR myuser = Password('new_password');</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、基础&quot;&gt;&lt;a href=&quot;#一、基础&quot; class=&quot;headerlink&quot; title=&quot;一、基础&quot;&gt;&lt;/a&gt;一、基础&lt;/h2&gt;&lt;p&gt;模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。&lt;/p&gt;
&lt;p&gt;主键的值不允许修改，也不</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="learn" scheme="http://example.com/tags/learn/"/>
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://example.com/2020/01/25/Linux/"/>
    <id>http://example.com/2020/01/25/Linux/</id>
    <published>2020-01-25T13:21:54.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的概述"><a href="#Linux的概述" class="headerlink" title="Linux的概述"></a>Linux的概述</h1><p>Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;T的贝尔实验室开发。UNIX的商标权由国际开放标准组织（The Open Group）所拥有。UNIX操作系统是商业版，需要收费，价格比Microsoft Windows正版要贵一些。</p><p>Linux是基于Unix的，Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机 诞生于1991 年10 月5 日。是由芬兰赫尔辛基大学学生Linus Torvalds和后来加入的众多爱好者共同开发完成。</p><h1 id="Linux系统的应用"><a href="#Linux系统的应用" class="headerlink" title="Linux系统的应用"></a>Linux系统的应用</h1><p>服务器系统</p><p>​            Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等； </p><p>嵌入式系统</p><p>​       路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等，</p><p>高性能运算、计算密集型应用</p><p>​        Linux有强大的运算能力。</p><p>桌面应用系统</p><p>移动手持系统</p><h1 id="Linux的目录结构-centos7"><a href="#Linux的目录结构-centos7" class="headerlink" title="Linux的目录结构 centos7"></a>Linux的目录结构 centos7</h1><p>├── bin -&gt; usr/bin ………………………. #：存放着一百多个Linux下常用的命令、工具<br>├── boot …………………………………… #： Linux就是从这里启动的<br>├── dev …………………………………….. #：存放着Linux下所有的设备文件!<br>├── etc ……………………………………… #：这里存放在Linux大部分的配置文件<br>├── home ………………………………….. #：普通用户的家目录<br>├── lib -&gt; usr/lib …………………………. #：静态链接库<br>├── lib64 -&gt; usr/lib64 …………………. #：库文件<br>├── media ……………………………………#：媒体<br>├── mnt ………………………………………. #：用于存放挂在储存设备的挂载目录<br>├── opt ………………………………………. #：空目录<br>├── proc …………………………………….. #：存放进程文件<br>├── root ………………………………………. #:超级用户root的家目录<br>├── run ……………………………………….. #：一些进程产生的临时文件，重启会消失<br>├── sbin -&gt; usr/sbin ………………………..#：超级用户命令所在地<br>├── srv ………………………………………….#：空目录 存放一些服务产生的文件<br>├── sys …………………………………………#：存放一些内核文件<br>├── tmp ……………………………………… #：临时目录<br>├── usr …………………………………….. #： 应用程序存放目录<br>└── var ……………………………………. #：通常用来存放一些变化中的东西!</p><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="切换目录-cd"><a href="#切换目录-cd" class="headerlink" title="切换目录 cd"></a>切换目录 cd</h2><h2 id="列出文件列表-ls-ll"><a href="#列出文件列表-ls-ll" class="headerlink" title="列出文件列表 ls ll"></a>列出文件列表 ls ll</h2><h2 id="创建和移除目录-mkdir-rmdir"><a href="#创建和移除目录-mkdir-rmdir" class="headerlink" title="创建和移除目录 mkdir rmdir"></a>创建和移除目录 mkdir rmdir</h2><h2 id="浏览文件-cat-more-less-tail"><a href="#浏览文件-cat-more-less-tail" class="headerlink" title="浏览文件 cat more less tail"></a>浏览文件 cat more less tail</h2><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="删除文件rm"><a href="#删除文件rm" class="headerlink" title="删除文件rm"></a>删除文件rm</h3><h3 id="复制文件cp"><a href="#复制文件cp" class="headerlink" title="复制文件cp"></a>复制文件cp</h3><h3 id="移动文件mv"><a href="#移动文件mv" class="headerlink" title="移动文件mv"></a>移动文件mv</h3><h3 id="创建文件touch"><a href="#创建文件touch" class="headerlink" title="创建文件touch"></a>创建文件touch</h3><h3 id="打包文件tar"><a href="#打包文件tar" class="headerlink" title="打包文件tar"></a>打包文件tar</h3><p>常用参数：</p><p>-c：创建一个新tar文件</p><p>-v：显示运行过程的信息</p><p>-f：指定文件名</p><p>-z：调用gzip压缩命令进行压缩</p><p>-t：查看压缩文件的内容</p><p>-x：解开tar文件</p><p>打包：</p><p>tar –cvf xxx.tar ./*</p><p>打包并且压缩：</p><p>tar –zcvf xxx.tar.gz ./* </p><p> 解压 </p><p>tar –xvf xxx.tar</p><p>tar -xvf xxx.tar.gz -C /usr/aaa</p><h2 id="查找-grep"><a href="#查找-grep" class="headerlink" title="查找 grep"></a>查找 grep</h2><h3 id="显示当前目录-pwd"><a href="#显示当前目录-pwd" class="headerlink" title="显示当前目录 pwd"></a>显示当前目录 pwd</h3><h1 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h1><h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h2><p>在Linux下一般使用vi编辑器来编辑文件。vi既可以查看文件也可以编辑文件。</p><p>三种模式：命令行、插入、底行模式。</p><p>切换到命令行模式：按Esc键；</p><p>切换到插入模式：按 i 、o、a键；</p><p>  i 在当前位置生前插入</p><p>  I 在当前行首插入</p><p>  a 在当前位置后插入</p><p>  A 在当前行尾插入</p><p>  o 在当前行之后插入一行</p><p>  O 在当前行之前插入一行</p><p>切换到底行模式：按 :（冒号）；更多详细用法，查询文档《Vim命令合集.docx》和《vi使用方法详细介绍.docx》</p><p>打开文件：vim file</p><p>退出：esc  : q</p><p>修改文件：输入i进入插入模式</p><p>保存并退出：es :wq</p><p>不保存退出：es :q!</p><p>3中进入插入模式：</p><p>i:在当前的光标所在处插入</p><p>o:在当前光标所在的行的下一行插入</p><p>a:在光标所在的下一个字符插入</p><p>快捷键：</p><p>dd – 快速删除一行</p><p>R – 替换</p><h2 id="重定向输出-gt-和-gt-gt"><a href="#重定向输出-gt-和-gt-gt" class="headerlink" title="重定向输出>和>>"></a>重定向输出&gt;和&gt;&gt;</h2><p>&gt; 重定向输出，覆盖原有内容；&gt;&gt; 重定向输出，又追加功能；示例：</p><p>cat /etc/passwd &gt; a.txt  将输出定向到a.txt中</p><p>cat /etc/passwd &gt;&gt; a.txt  输出并且追加</p><p>ifconfig &gt; ifconfig.txt</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h2><p>管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。示例</p><p>ls –help | more  分页查询帮助信息</p><p>ps –ef | grep java  查询名称中包含java的进程</p><p>ifconfig | more</p><p>cat index.html | more</p><p>ps –ef | grep aio</p><h2 id="amp-amp-命令执行控制："><a href="#amp-amp-命令执行控制：" class="headerlink" title="&amp;&amp;命令执行控制："></a>&amp;&amp;命令执行控制：</h2><p>命令之间使用 &amp;&amp; 连接，实现逻辑与的功能。  </p><p>只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才会被执行。 </p><p>只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。</p><p>mkdir test &amp;&amp; cd test</p><h2 id="网络通讯命令"><a href="#网络通讯命令" class="headerlink" title="网络通讯命令"></a>网络通讯命令</h2><p>ifconfig  显示或设置网络设备。</p><p>ifconfig  显示网络设备</p><p>ifconfig eth0 up 启用eth0网卡</p><p>ifconfig eth0 down  停用eth0网卡</p><p>ping  探测网络是否通畅。</p><p>​        ping 192.168.0.1</p><p>netstat 查看网络端口。</p><p>​       netstat -an | grep 3306 查询3306端口占用情况</p><h2 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h2><p>date 显示或设置系统时间</p><p>date  显示当前系统时间</p><p>date -s “2014-01-01 10:10:10“  设置系统时间df 显示磁盘信息</p><p>df –h  友好显示大小free 显示内存状态</p><p>free –m 以mb单位显示内存组昂头top 显示，管理执行中的程序</p><p>clear 清屏幕 </p><p>ps 正在运行的某个进程的状态</p><p>ps –ef  查看所有进程</p><p>ps –ef | grep ssh 查找某一进程kill 杀掉某一进程</p><p>kill 2868  杀掉2868编号的进程</p><p>kill -9 2868  强制杀死进程</p><p>du 显示目录或文件的大小。</p><p>du –h 显示当前目录的大小</p><p>who 显示目前登入系统的用户信息。 </p><p>hostname 查看当前主机名</p><p>修改：vi /etc/sysconfig/network </p><p>uname 显示系统信息。</p><p>uname -a 显示本机详细信息。依次为：内核名称(类别)，主机名，内核版本号，内核版本，内核编译日期，硬件名，处理器类型，硬件平台类型，操作系统名称</p><h1 id="Linux的用户和组"><a href="#Linux的用户和组" class="headerlink" title="Linux的用户和组"></a>Linux的用户和组</h1><h2 id="用户的管理"><a href="#用户的管理" class="headerlink" title="用户的管理"></a>用户的管理</h2><p>useradd 添加一个用户</p><p>useradd test 添加test用户</p><p>useradd test -d /home/t1  指定用户home目录 </p><p>passwd  设置、修改密码</p><p>passwd test  为test用户设置密码</p><p>切换登录：</p><p>ssh -l test -p 22 192.168.19.128</p><p>su – 用户名</p><p> userdel 删除一个用户</p><p>userdel test 删除test用户(不会删除home目录)</p><p>userdel –r test  删除用户以及home目录</p><h2 id="组管理："><a href="#组管理：" class="headerlink" title="组管理："></a>组管理：</h2><p>当在创建一个新用户user时，若没有指定他所属于的组，就建立一个和该用户同名的私有组 </p><p>创建用户时也可以指定所在组 </p><p>groupadd  创建组</p><p>groupadd public  创建一个名为public的组</p><p>useradd u1 –g public  创建用户指定组groupdel 删除组，如果该组有用户成员，必须先删除用户才能删除组。</p><p>groupdel public</p><h2 id="id，su命令"><a href="#id，su命令" class="headerlink" title="id，su命令"></a>id，su命令</h2><p>【id命令】</p><p>功能：查看一个用户的UID和GID用法：id [选项]… [用户名]</p><p>直接使用id</p><p>直接使用id 用户名</p><p>【su命令】</p><p>功能：切换用户。用法：su [选项]… [-] [用户 [参数]… ]</p><p>示例：</p><p>​      su u1  切换到u1用户</p><p>​      su - u1 切换到u1用户，并且将环境也切换到u1用户的环境（推荐使用）</p><p>【账户文件】</p><p>/etc/passwd  用户文件</p><p>/etc/shadow  密码文件</p><p>/etc/group  组信息文件</p><p>【用户文件】</p><p>root<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>0:0:root:/root:/bin/bash</p><p>账号名称：        在系统中是唯一的</p><p>用户密码：        此字段存放加密口令</p><p>用户标识码(User ID)：  系统内部用它来标示</p><p>用户组标识码(Group ID)：  系统内部用它来标识用户属性</p><p>用户相关信息：        例如用户全名等</p><p>用户目录：        用户登录系统后所进入的目录</p><p>用户环境:        用户工作的环境</p><p>【密码文件】</p><p>shadow文件中每条记录用冒号间隔的9个字段组成.</p><p>用户名：用户登录到系统时使用的名字，而且是惟一的</p><p>口令：  存放加密的口令</p><p>最后一次修改时间:  标识从某一时刻起到用户最后一次修改时间</p><p>最大时间间隔:  口令保持有效的最大天数，即多少天后必须修改口令</p><p>最小时间间隔：    再次修改口令之间的最小天数</p><p>警告时间：从系统开始警告到口令正式失效的天数不</p><p>活动时间：    口令过期少天后，该账号被禁用</p><p>失效时间：指示口令失效的绝对天数(从1970年1月1日开始计算)</p><p>标志：未使用 </p><p>【组文件】</p><p>root<span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>0:</p><p>组名：用户所属组</p><p>组口令：一般不用</p><p>GID：组ID</p><p>用户列表：属于该组的所有用户</p><h1 id="Linux的权限命令"><a href="#Linux的权限命令" class="headerlink" title="Linux的权限命令"></a>Linux的权限命令</h1><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><table><thead><tr><th><em><strong>*属主（user）*</strong></em></th><th><em><strong>*属组（group）*</strong></em></th><th><em><strong>*其他用户*</strong></em></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>r</td><td>w</td><td>x</td><td>r</td><td>w</td><td>x</td><td>r</td><td>w</td><td>x</td></tr><tr><td>4</td><td>2</td><td>1</td><td>4</td><td>2</td><td>1</td><td>4</td><td>2</td><td>1</td></tr></tbody></table><h3 id="Linux三种文件类型："><a href="#Linux三种文件类型：" class="headerlink" title="Linux三种文件类型："></a>Linux三种文件类型：</h3><p>普通文件： 包括文本文件、数据文件、可执行的二进制程序文件等。 </p><p> 目录文件： Linux系统把目录看成是一种特殊的文件，利用它构成文件系统的树型结构。  </p><p>设备文件： Linux系统把每一个设备都看成是一个文件</p><h3 id="文件类型标识"><a href="#文件类型标识" class="headerlink" title="文件类型标识"></a>文件类型标识</h3><p>普通文件（-）</p><p>目录（d）</p><p>符号链接（l）</p><p>* 进入etc可以查看，相当于快捷方式</p><p>字符设备文件（c）</p><p>块设备文件（s）</p><p>套接字（s）</p><p>命名管道（p）</p><h3 id="文件权限管理："><a href="#文件权限管理：" class="headerlink" title="文件权限管理："></a>文件权限管理：</h3><p>chmod 变更文件或目录的权限。</p><p>chmod 755 a.txt </p><p>chmod u=rwx,g=rx,o=rx a.txt</p><p>chmod 000 a.txt  / chmod 777 a.txtchown 变更文件或目录改文件所属用户和组</p><p>chown u1:public a.txt    ：变更当前的目录或文件的所属用户和组</p><p>chown -R u1:public dir    ：变更目录中的所有的子目录及文件的所属用户和组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的概述&quot;&gt;&lt;a href=&quot;#Linux的概述&quot; class=&quot;headerlink&quot; title=&quot;Linux的概述&quot;&gt;&lt;/a&gt;Linux的概述&lt;/h1&gt;&lt;p&gt;Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;amp;T的贝尔实验室开发。</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="learn" scheme="http://example.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2019/09/11/Git/"/>
    <id>http://example.com/2019/09/11/Git/</id>
    <published>2019-09-11T08:32:14.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><h2 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h2><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统.Git有一个存储在服务器上的远程存储库和一个存储在每个开发人员的计算机中的本地存储库。这意味着代码不仅存储在中央服务器上，而且代码的完整副本也存在于所有开发人员的计算机中。因为每个节点都有一个本地副本，所以几乎所有对Git的操作都是本地的（Pull和Push命令除外）。这意味着您不必一直连接到远程存储库即可进行工作。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。</p><p>要使用Git，第一步当然是安装Git了。根据你当前使用的平台来阅读下面的文字：</p><h3 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h3><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：</p><pre><code>$ gitThe program 'git' is currently not installed. You can install it by typing:sudo apt-get install git</code></pre><p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。</p><p>如果你碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。</p><p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p><p><code>centos ： yum install git</code></p><h3 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h3><p>在Windows上使用Git，可以从Git官网直接<a class="link" href="https://git-scm.com/downloads">下载安装程序<i class="fas fa-external-link-alt"></i></a>，然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919018718363424/0" alt="install-git-on-windows"></p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><pre><code>$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"</code></pre><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p>所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p><pre><code>$ mkdir learngit$ cd learngit$ pwd/Users/michael/learngit</code></pre><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p> 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><pre><code>$ git initInitialized empty Git repository in /Users/michael/learngit/.git/</code></pre><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p><p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><p>现在我们编写一个<code>readme.txt</code>文件，内容如下：</p><pre><code>Git is a version control system.Git is free software.</code></pre><p>一定要放到<code>learngit</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><pre><code>$ git add readme.txt</code></pre><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><pre><code>$ git commit -m "wrote a readme file"[master (root-commit) eaadf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt</code></pre><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m "xxx"</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><pre><code>$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m "add 3 files."</code></pre><h3 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h3><p>Q：输入<code>git add readme.txt</code>，得到错误：<code>fatal: not a git repository (or any of the parent directories)</code>。</p><p>A：Git命令必须在Git仓库目录内执行（<code>git init</code>除外），在仓库目录外执行是没有意义的。</p><p>Q：输入<code>git add readme.txt</code>，得到错误<code>fatal: pathspec 'readme.txt' did not match any files</code>。</p><p>A：添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。</p><h1 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h1><p>我们已经成功地添加并提交了一个readme.txt文件，现在，是时候继续工作了，于是，我们继续修改readme.txt文件，改成如下内容：</p><pre><code>Git is a distributed version control system.Git is free software.</code></pre><p>现在，运行<code>git status</code>命令看看结果：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    modified:   readme.txtno changes added to commit (use "git add" and/or "git commit -a")</code></pre><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p><p>虽然Git告诉我们<code>readme.txt</code>被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用<code>git diff</code>这个命令看看：</p><pre><code>$ git diff readme.txt diff --git a/readme.txt b/readme.txtindex 46d49bf..9247db6 100644--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@-Git is a version control system.+Git is a distributed version control system. Git is free software.</code></pre><p><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个<code>distributed</code>单词。</p><p>知道了对<code>readme.txt</code>作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是<code>git add</code>：</p><pre><code>$ git add readme.txt</code></pre><p>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态：</p><pre><code>$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD &lt;file&gt;..." to unstage)    modified:   readme.txt</code></pre><p><code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，就可以放心地提交了：</p><pre><code>$ git commit -m "add distributed"[master e475afc] add distributed 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p><pre><code>$ git statusOn branch masternothing to commit, working tree clean</code></pre><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>现在，你已经学会了修改文件，然后把修改提交到Git版本库，现在，再练习一次，修改readme.txt文件如下：</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.</code></pre><p>然后尝试提交：</p><pre><code>$ git add readme.txt$ git commit -m "append GPL"[master 1094adb] append GPL 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><p>现在，我们回顾一下<code>readme.txt</code>文件一共有几个版本被提交到Git仓库里了：</p><p>版本1：wrote a readme file</p><pre><code>Git is a version control system.Git is free software.</code></pre><p>版本2：add distributed</p><pre><code>Git is a distributed version control system.Git is free software.</code></pre><p>版本3：append GPL</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.</code></pre><p>当然了，在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用<code>git log</code>命令查看：</p><pre><code>$ git logcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:06:15 2018 +0800    append GPLcommit e475afc93c209a690c39c13a46716e8fa000c366Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:03:36 2018 +0800    add distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 20:59:18 2018 +0800    wrote a readme file</code></pre><p><code>git log</code>命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次是<code>wrote a readme file</code>。</p><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p><pre><code>$ git log --pretty=oneline1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPLe475afc93c209a690c39c13a46716e8fa000c366 add distributedeaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</code></pre><p>需要友情提示的是，你看到的一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号），和SVN不一样，Git的<code>commit id</code>不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的<code>commit id</code>和我的肯定不一样，以你自己的为准。为什么<code>commit id</code>需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919019707114272/0" alt="git-log-timeline"></p><p>好了，现在我们启动时光穿梭机，准备把<code>readme.txt</code>回退到上一个版本，也就是<code>add distributed</code>的那个版本，怎么做呢？</p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p><pre><code>$ git reset --hard HEAD^HEAD is now at e475afc add distributed</code></pre><p><code>--hard</code>参数有啥意义？这个后面再讲，现在你先放心使用。</p><p>看看<code>readme.txt</code>的内容是不是版本<code>add distributed</code>：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software.</code></pre><p>果然被还原了。</p><p>还可以继续回退到上一个版本<code>wrote a readme file</code>，不过且慢，让我们用<code>git log</code>再看看现在版本库的状态：</p><pre><code>$ git logcommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:03:36 2018 +0800    add distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 20:59:18 2018 +0800    wrote a readme file</code></pre><p>最新的那个版本<code>append GPL</code>已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？</p><p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是就可以指定回到未来的某个版本：</p><pre><code>$ git reset --hard 1094aHEAD is now at 83b0afe append GPL</code></pre><p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p><p>再小心翼翼地看看<code>readme.txt</code>的内容：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.</code></pre><p>果然，我胡汉三又回来了。</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><pre><code class="ascii">┌────┐│HEAD│└────┘   │   └──&gt; ○ append GPL        │        ○ add distributed        │        ○ wrote a readme file</code></pre><p>改为指向<code>add distributed</code>：</p><pre><code class="ascii">┌────┐│HEAD│└────┘   │   │    ○ append GPL   │    │   └──&gt; ○ add distributed        │        ○ wrote a readme file</code></pre><p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><pre><code>$ git refloge475afc HEAD@{1}: reset: moving to HEAD^1094adb (HEAD -&gt; master) HEAD@{2}: commit: append GPLe475afc HEAD@{3}: commit: add distributedeaadf4e HEAD@{4}: commit (initial): wrote a readme file</code></pre><p>终于舒了口气，从输出可知，<code>append GPL</code>的commit id是<code>1094adb</code>，现在，你又可以乘坐时光机回到未来了。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>现在总结一下：</p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><p>先来看名词解释。</p><h3 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h3><p>就是你在电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021113952544/0" alt="working-dir"></p><h3 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h3><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p><p>分支和<code>HEAD</code>的概念我们以后再讲。</p><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p>俗话说，实践出真知。现在，我们再练习一遍，先对<code>readme.txt</code>做个修改，比如加上一行内容：</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.</code></pre><p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p><p>先用<code>git status</code>查看一下状态：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    modified:   readme.txtUntracked files:  (use "git add &lt;file&gt;..." to include in what will be committed)    LICENSEno changes added to commit (use "git add" and/or "git commit -a")</code></pre><p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p><p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p><pre><code>$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD &lt;file&gt;..." to unstage)    new file:   LICENSE    modified:   readme.txt</code></pre><p>现在，暂存区的状态就变成这样了：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020074026336/0" alt="git-stage"></p><p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><pre><code>$ git commit -m "understand how stage works"[master e43a48b] understand how stage works 2 files changed, 2 insertions(+) create mode 100644 LICENSE</code></pre><p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p><pre><code>$ git statusOn branch masternothing to commit, working tree clean</code></pre><p>现在版本库变成了这样，暂存区就没有任何内容了：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020100829536/0" alt="git-stage-after-commit"></p><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>现在，假定你已经完全掌握了暂存区的概念。下面，我们要讨论的就是，为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p><p>你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p><p>为什么说Git管理的是修改，而不是文件呢？我们还是做实验。第一步，对readme.txt做一个修改，比如加一行内容：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes.</code></pre><p>然后，添加：</p><pre><code>$ git add readme.txt$ git status# On branch master# Changes to be committed:#   (use "git reset HEAD &lt;file&gt;..." to unstage)##       modified:   readme.txt#</code></pre><p>然后，再修改readme.txt：</p><pre><code>$ cat readme.txt Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.</code></pre><p>提交：</p><pre><code>$ git commit -m "git tracks changes"[master 519219b] git tracks changes 1 file changed, 1 insertion(+)</code></pre><p>提交后，再看看状态：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    modified:   readme.txtno changes added to commit (use "git add" and/or "git commit -a")</code></pre><p>咦，怎么第二次的修改没有被提交？</p><p>别激动，我们回顾一下操作过程：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p><p>你看，我们前面讲了，Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>提交后，用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p><pre><code>$ git diff HEAD -- readme.txt diff --git a/readme.txt b/readme.txtindex 76d770f..a9c5755 100644--- a/readme.txt+++ b/readme.txt@@ -1,4 +1,4 @@ Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage.-Git tracks changes.+Git tracks changes of files.</code></pre><p>可见，第二次修改确实没有被提交。</p><p>那怎么提交第二次修改呢？你可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p><p>好，现在，把第二次修改提交了，然后开始小结。</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用<code>git status</code>查看一下：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    modified:   readme.txtno changes added to commit (use "git add" and/or "git commit -a")</code></pre><p>你可以发现，Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：</p><pre><code>$ git checkout -- readme.txt</code></pre><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>现在，看看<code>readme.txt</code>的文件内容：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.</code></pre><p>文件内容果然复原了。</p><p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p><p>现在假定是凌晨3点，你不但写了一些胡话，还<code>git add</code>到暂存区了：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.My stupid boss still prefers SVN.$ git add readme.txt</code></pre><p>庆幸的是，在<code>commit</code>之前，你发现了这个问题。用<code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交：</p><pre><code>$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD &lt;file&gt;..." to unstage)    modified:   readme.txt</code></pre><p>Git同样告诉我们，用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><pre><code>$ git reset HEAD readme.txtUnstaged changes after reset:M    readme.txt</code></pre><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>再用<code>git status</code>查看一下，现在暂存区是干净的，工作区有修改：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    modified:   readme.txt</code></pre><p>还记得如何丢弃工作区的修改吗？</p><pre><code>$ git checkout -- readme.txt$ git statusOn branch masternothing to commit, working tree clean</code></pre><p>整个世界终于清静了！</p><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得<a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退<i class="fas fa-external-link-alt"></i></a>一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把<code>stupid boss</code>提交推送到远程版本库，你就真的惨了……</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>又到了小结时间。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退<i class="fas fa-external-link-alt"></i></a>一节，不过前提是没有推送到远程库。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件<code>test.txt</code>到Git并且提交：</p><pre><code>$ git add test.txt$ git commit -m "add test.txt"[master b84166e] add test.txt 1 file changed, 1 insertion(+) create mode 100644 test.txt</code></pre><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p><pre><code>$ rm test.txt</code></pre><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use "git add/rm &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    deleted:    test.txtno changes added to commit (use "git add" and/or "git commit -a")</code></pre><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p><pre><code>$ git rm test.txtrm 'test.txt'$ git commit -m "remove test.txt"[master d46f35e] remove test.txt 1 file changed, 1 deletion(-) delete mode 100644 test.txt</code></pre><p>现在，文件就从版本库中被删除了。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</p><p>你肯定会想，至少需要两台机器才能玩远程库不是？但是我只有一台电脑，怎么玩？</p><p>其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。不过，现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库。</p><p>实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p><p>完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫<a class="link" href="https://github.com/">GitHub<i class="fas fa-external-link-alt"></i></a>的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p><p>在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><pre><code>$ ssh-keygen -t rsa -C "youremail@example.com"</code></pre><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021379029408/0" alt="github-addkey-1"></p><p>点“Add Key”，你就应该看到已经添加的Key：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021395420160/0" alt="github-addkey-2"></p><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021631860000/0" alt="github-create-repo-1"></p><p>在Repository name填入<code>learngit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021652277920/0" alt="github-create-repo-2"></p><p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p><pre><code>$ git remote add origin git@github.com:michaelliao/learngit.git</code></pre><p>请千万注意，把上面的<code>michaelliao</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><pre><code>$ git push -u origin masterCounting objects: 20, done.Delta compression using up to 4 threads.Compressing objects: 100% (15/15), done.Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.Total 20 (delta 5), reused 0 (delta 0)remote: Resolving deltas: 100% (5/5), done.To github.com:michaelliao/learngit.git * [new branch]      master -&gt; masterBranch 'master' set up to track remote branch 'master' from 'origin'.</code></pre><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021675995552/0" alt="github-repo"></p><p>从现在起，只要本地作了提交，就可以通过命令：</p><pre><code>$ git push origin master</code></pre><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h3 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h3><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><pre><code>The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.RSA key fingerprint is xx.xx.xx.xx.xx.Are you sure you want to continue connecting (yes/no)?</code></pre><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><pre><code>Warning: Permanently added 'github.com' (RSA) to the list of known hosts.</code></pre><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a class="link" href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/">GitHub的RSA Key的指纹信息<i class="fas fa-external-link-alt"></i></a>是否与SSH连接给出的一致。</p><h3 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p><pre><code>$ git remote -vorigin  git@github.com:michaelliao/learn-git.git (fetch)origin  git@github.com:michaelliao/learn-git.git (push)</code></pre><p>然后，根据名字删除，比如删除<code>origin</code>：</p><pre><code>$ git remote rm origin</code></pre><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联一个远程库时必须给远程库指定一个名字，<code>origin</code>是默认习惯命名；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p><p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><p>首先，登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021808263616/0" alt="github-init-repo"></p><p>我们勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到<code>README.md</code>文件：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021836828288/0" alt="github-init-repo-2"></p><p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库：</p><pre><code>$ git clone git@github.com:michaelliao/gitskills.gitCloning into 'gitskills'...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3Receiving objects: 100% (3/3), done.</code></pre><p>注意把Git库的地址换成你自己的，然后进入<code>gitskills</code>目录看看，已经有<code>README.md</code>文件了：</p><pre><code>$ cd gitskills$ lsREADME.md</code></pre><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p><p>你也许还注意到，GitHub给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>在<a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退<i class="fas fa-external-link-alt"></i></a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022325462368/0" alt="git-br-initial"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022363210080/l" alt="git-br-create"></p><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022387118368/l" alt="git-br-dev-fd"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022412005504/0" alt="git-br-ff-merge"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022479428512/0" alt="git-br-rm"></p><p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？</p><p>下面开始实战。</p><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><pre><code>$ git checkout -b devSwitched to a new branch 'dev'</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><pre><code>$ git branch dev$ git checkout devSwitched to branch 'dev'</code></pre><p>然后，用<code>git branch</code>命令查看当前分支：</p><pre><code>$ git branch* dev  master</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：</p><pre><code>Creating a new branch is quick.</code></pre><p>然后提交：</p><pre><code>$ git add readme.txt $ git commit -m "branch test"[dev b17d20e] branch test 1 file changed, 1 insertion(+)</code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><pre><code>$ git checkout masterSwitched to branch 'master'</code></pre><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022533080576/0" alt="git-br-on-master"></p><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><pre><code>$ git merge devUpdating d46f35e..b17d20eFast-forward readme.txt | 1 + 1 file changed, 1 insertion(+)</code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><pre><code>$ git branch -d devDeleted branch dev (was b17d20e).</code></pre><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><pre><code>$ git branch* master</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</p><p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p><p>创建并切换到新的<code>dev</code>分支，可以使用：</p><pre><code>$ git switch -c dev</code></pre><p>直接切换到已有的<code>master</code>分支，可以使用：</p><pre><code>$ git switch master</code></pre><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p><p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p><pre><code>$ git switch -c feature1Switched to a new branch 'feature1'</code></pre><p>修改<code>readme.txt</code>最后一行，改为：</p><pre><code>Creating a new branch is quick AND simple.</code></pre><p>在<code>feature1</code>分支上提交：</p><pre><code>$ git add readme.txt$ git commit -m "AND simple"[feature1 14096d0] AND simple 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>切换到<code>master</code>分支：</p><pre><code>$ git switch masterSwitched to branch 'master'Your branch is ahead of 'origin/master' by 1 commit.  (use "git push" to publish your local commits)</code></pre><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p><p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p><pre><code>Creating a new branch is quick &amp; simple.</code></pre><p>提交：</p><pre><code>$ git add readme.txt $ git commit -m "&amp; simple"[master 5dc6824] &amp; simple 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023000423040/0" alt="git-br-feature1"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><pre><code>$ git merge feature1Auto-merging readme.txtCONFLICT (content): Merge conflict in readme.txtAutomatic merge failed; fix conflicts and then commit the result.</code></pre><p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p><pre><code>$ git statusOn branch masterYour branch is ahead of 'origin/master' by 2 commits.  (use "git push" to publish your local commits)You have unmerged paths.  (fix conflicts and run "git commit")  (use "git merge --abort" to abort the merge)Unmerged paths:  (use "git add &lt;file&gt;..." to mark resolution)    both modified:   readme.txtno changes added to commit (use "git add" and/or "git commit -a")</code></pre><p>我们可以直接查看readme.txt的内容：</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.=======Creating a new branch is quick AND simple.&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</code></pre><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><pre><code>Creating a new branch is quick and simple.</code></pre><p>再提交：</p><pre><code>$ git add readme.txt $ git commit -m "conflict fixed"[master cf810e4] conflict fixed</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023031831104/0" alt="git-br-conflict-merged"></p><p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit*   cf810e4 (HEAD -&gt; master) conflict fixed|\  | * 14096d0 (feature1) AND simple* | 5dc6824 &amp; simple|/  * b17d20e branch test* d46f35e (origin/master) remove test.txt* b84166e add test.txt* 519219b git tracks changes* e43a48b understand how stage works* 1094adb append GPL* e475afc add distributed* eaadf4e wrote a readme file</code></pre><p>最后，删除<code>feature1</code>分支：</p><pre><code>$ git branch -d feature1Deleted branch feature1 (was 14096d0).</code></pre><p>工作完成。</p><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p><p>首先，仍然创建并切换<code>dev</code>分支：</p><pre><code>$ git switch -c devSwitched to a new branch 'dev'</code></pre><p>修改readme.txt文件，并提交一个新的commit：</p><pre><code>$ git add readme.txt $ git commit -m "add merge"[dev f52c633] add merge 1 file changed, 1 insertion(+)</code></pre><p>现在，我们切换回<code>master</code>：</p><pre><code>$ git switch masterSwitched to branch 'master'</code></pre><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><pre><code>$ git merge --no-ff -m "merge with no-ff" devMerge made by the 'recursive' strategy. readme.txt | 1 + 1 file changed, 1 insertion(+)</code></pre><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p><p>合并后，我们用<code>git log</code>看看分支历史：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit*   e1e9c68 (HEAD -&gt; master) merge with no-ff|\  | * f52c633 (dev) add merge|/  *   cf810e4 conflict fixed...</code></pre><p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023225142304/0" alt="git-no-ff-mode"></p><h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023260793600/0" alt="git-br-policy"></p><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>Git分支十分强大，在团队开发中应该充分应用。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交：</p><pre><code>$ git statusOn branch devChanges to be committed:  (use "git reset HEAD &lt;file&gt;..." to unstage)    new file:   hello.pyChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    modified:   readme.txt</code></pre><p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><pre><code>$ git stashSaved working directory and index state WIP on dev: f52c633 add merge</code></pre><p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p><pre><code>$ git checkout masterSwitched to branch 'master'Your branch is ahead of 'origin/master' by 6 commits.  (use "git push" to publish your local commits)$ git checkout -b issue-101Switched to a new branch 'issue-101'</code></pre><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><pre><code>$ git add readme.txt $ git commit -m "fix bug 101"[issue-101 4c805e2] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p><pre><code>$ git switch masterSwitched to branch 'master'Your branch is ahead of 'origin/master' by 6 commits.  (use "git push" to publish your local commits)$ git merge --no-ff -m "merged bug fix 101" issue-101Merge made by the 'recursive' strategy. readme.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到<code>dev</code>分支干活了！</p><pre><code>$ git switch devSwitched to branch 'dev'$ git statusOn branch devnothing to commit, working tree clean</code></pre><p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p><pre><code>$ git stash liststash@{0}: WIP on dev: f52c633 add merge</code></pre><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p><pre><code>$ git stash popOn branch devChanges to be committed:  (use "git reset HEAD &lt;file&gt;..." to unstage)    new file:   hello.pyChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)    modified:   readme.txtDropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)</code></pre><p>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p><pre><code>$ git stash list</code></pre><p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p><pre><code>$ git stash apply stash@{0}</code></pre><p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p><p>那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？</p><p>有木有更简单的方法？</p><p>有！</p><p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p><pre><code>$ git branch* dev  master$ git cherry-pick 4c805e2[master 1d4b803] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p><p>有些聪明的童鞋会想了，既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从dev分支切换到master分支。</p><h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p><p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p><p>于是准备开发：</p><pre><code>$ git switch -c feature-vulcanSwitched to a new branch 'feature-vulcan'</code></pre><p>5分钟后，开发完毕：</p><pre><code>$ git add vulcan.py$ git statusOn branch feature-vulcanChanges to be committed:  (use "git reset HEAD &lt;file&gt;..." to unstage)    new file:   vulcan.py$ git commit -m "add feature vulcan"[feature-vulcan 287773e] add feature vulcan 1 file changed, 2 insertions(+) create mode 100644 vulcan.py</code></pre><p>切回<code>dev</code>，准备合并：</p><pre><code>$ git switch dev</code></pre><p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p><p>但是！</p><p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p><p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p><pre><code>$ git branch -d feature-vulcanerror: The branch 'feature-vulcan' is not fully merged.If you are sure you want to delete it, run 'git branch -D feature-vulcan'.</code></pre><p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。。</p><p>现在我们强行删除：</p><pre><code>$ git branch -D feature-vulcanDeleted branch feature-vulcan (was 287773e).</code></pre><p>终于删除成功！</p><h3 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h3><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p><p>要查看远程库的信息，用<code>git remote</code>：</p><pre><code>$ git remoteorigin</code></pre><p>或者，用<code>git remote -v</code>显示更详细的信息：</p><pre><code>$ git remote -vorigin  git@github.com:michaelliao/learngit.git (fetch)origin  git@github.com:michaelliao/learngit.git (push)</code></pre><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><pre><code>$ git push origin master</code></pre><p>如果要推送其他分支，比如<code>dev</code>，就改成：</p><pre><code>$ git push origin dev</code></pre><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p><pre><code>$ git clone git@github.com:michaelliao/learngit.gitCloning into 'learngit'...remote: Counting objects: 40, done.remote: Compressing objects: 100% (21/21), done.remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0Receiving objects: 100% (40/40), done.Resolving deltas: 100% (14/14), done.</code></pre><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p><pre><code>$ git branch* master</code></pre><p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p><pre><code>$ git checkout -b dev origin/dev</code></pre><p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p><pre><code>$ git add env.txt$ git commit -m "add env"[dev 7a5e5dd] add env 1 file changed, 1 insertion(+) create mode 100644 env.txt$ git push origin devCounting objects: 3, done.Delta compression using up to 4 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git   f52c633..7a5e5dd  dev -&gt; dev</code></pre><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p><pre><code>$ cat env.txtenv$ git add env.txt$ git commit -m "add new env"[dev 7bd91f1] add new env 1 file changed, 1 insertion(+) create mode 100644 env.txt$ git push origin devTo github.com:michaelliao/learngit.git ! [rejected]        dev -&gt; dev (non-fast-forward)error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: 'git pull ...') before pushing again.hint: See the 'Note about fast-forwards' in 'git push --help' for details.</code></pre><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><pre><code>$ git pullThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details.    git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with:    git branch --set-upstream-to=origin/&lt;branch&gt; dev</code></pre><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><pre><code>$ git branch --set-upstream-to=origin/dev devBranch 'dev' set up to track remote branch 'dev' from 'origin'.</code></pre><p>再pull：</p><pre><code>$ git pullAuto-merging env.txtCONFLICT (add/add): Merge conflict in env.txtAutomatic merge failed; fix conflicts and then commit the result.</code></pre><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a class="link" href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344">解决冲突<i class="fas fa-external-link-alt"></i></a>完全一样。解决后，提交，再push：</p><pre><code>$ git commit -m "fix env conflict"[dev 57c53ab] fix env conflict$ git push origin devCounting objects: 6, done.Delta compression using up to 4 threads.Compressing objects: 100% (4/4), done.Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.Total 6 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git   7a5e5dd..57c53ab  dev -&gt; dev</code></pre><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h3><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p><pre><code>$ git branch* dev  master$ git checkout masterSwitched to branch 'master'</code></pre><p>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：</p><pre><code>$ git tag v1.0</code></pre><p>可以用命令<code>git tag</code>查看所有标签：</p><pre><code>$ git tagv1.0</code></pre><p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p><p>方法是找到历史提交的commit id，然后打上就可以了：</p><pre><code>$ git log --pretty=oneline --abbrev-commit12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 1014c805e2 fix bug 101e1e9c68 merge with no-fff52c633 add mergecf810e4 conflict fixed5dc6824 &amp; simple14096d0 AND simpleb17d20e branch testd46f35e remove test.txtb84166e add test.txt519219b git tracks changese43a48b understand how stage works1094adb append GPLe475afc add distributedeaadf4e wrote a readme file</code></pre><p>比方说要对<code>add merge</code>这次提交打标签，它对应的commit id是<code>f52c633</code>，敲入命令：</p><pre><code>$ git tag v0.9 f52c633</code></pre><p>再用命令<code>git tag</code>查看标签：</p><pre><code>$ git tagv0.9v1.0</code></pre><p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p><pre><code>$ git show v0.9commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:56:54 2018 +0800    add mergediff --git a/readme.txt b/readme.txt...</code></pre><p>可以看到，<code>v0.9</code>确实打在<code>add merge</code>这次提交上。</p><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><pre><code>$ git tag -a v0.1 -m "version 0.1 released" 1094adb</code></pre><p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：</p><pre><code>$ git show v0.1tag v0.1Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 22:48:43 2018 +0800version 0.1 releasedcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:06:15 2018 +0800    append GPLdiff --git a/readme.txt b/readme.txt...</code></pre><p> 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p><h3 id="小结-11"><a href="#小结-11" class="headerlink" title="小结"></a>小结</h3><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m "blablabla..."</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><p>如果标签打错了，也可以删除：</p><pre><code>$ git tag -d v0.1Deleted tag 'v0.1' (was f15b0dd)</code></pre><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p><p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：</p><pre><code>$ git push origin v1.0Total 0 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git * [new tag]         v1.0 -&gt; v1.0</code></pre><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><pre><code>$ git push origin --tagsTotal 0 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git * [new tag]         v0.9 -&gt; v0.9</code></pre><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p><pre><code>$ git tag -d v0.9Deleted tag 'v0.9' (was f52c633)</code></pre><p>然后，从远程删除。删除命令也是push，但是格式如下：</p><pre><code>$ git push origin :refs/tags/v0.9To github.com:michaelliao/learngit.git - [deleted]         v0.9</code></pre><p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p><h3 id="小结-12"><a href="#小结-12" class="headerlink" title="小结"></a>小结</h3><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul><h1 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h1><p>我们一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。</p><p>在GitHub出现以前，开源项目开源容易，但让广大人民群众参与进来比较困难，因为要参与，就要提交代码，而给每个想提交代码的群众都开一个账号那是不现实的，因此，群众也仅限于报个bug，即使能改掉bug，也只能把diff文件用邮件发过去，很不方便。</p><p>但是在GitHub上，利用Git极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目了。</p><p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a class="link" href="https://github.com/twbs/bootstrap%EF%BC%8C%E7%82%B9%E2%80%9CFork%E2%80%9D%E5%B0%B1%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B4%A6%E5%8F%B7%E4%B8%8B%E5%85%8B%E9%9A%86%E4%BA%86%E4%B8%80%E4%B8%AAbootstrap%E4%BB%93%E5%BA%93%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E4%BB%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B4%A6%E5%8F%B7%E4%B8%8Bclone%EF%BC%9A">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：<i class="fas fa-external-link-alt"></i></a></p><pre><code>git clone git@github.com:michaelliao/bootstrap.git</code></pre><p>一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p><p>Bootstrap的官方仓库<code>twbs/bootstrap</code>、你在GitHub上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p><pre><code class="ascii">┌─ GitHub ────────────────────────────────────┐│                                             ││ ┌─────────────────┐     ┌─────────────────┐ ││ │ twbs/bootstrap  │────&gt;│  my/bootstrap   │ ││ └─────────────────┘     └─────────────────┘ ││                                  ▲          │└──────────────────────────────────┼──────────┘                                   ▼                          ┌─────────────────┐                          │ local/bootstrap │                          └─────────────────┘</code></pre><p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。</p><p>如果你没能力修改bootstrap，但又想要试一把pull request，那就Fork一下我的仓库：<a class="link" href="https://github.com/michaelliao/learngit%EF%BC%8C%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%60your-github-id.txt%60%E7%9A%84%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%EF%BC%8C%E5%86%99%E7%82%B9%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0Git%E7%9A%84%E5%BF%83%E5%BE%97%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8E%A8%E9%80%81%E4%B8%80%E4%B8%AApull">https://github.com/michaelliao/learngit，创建一个`your-github-id.txt`的文本文件，写点自己学习Git的心得，然后推送一个pull<i class="fas fa-external-link-alt"></i></a> request给我，我会视心情而定是否接受。</p><h3 id="小结-13"><a href="#小结-13" class="headerlink" title="小结"></a>小结</h3><ul><li>在GitHub上，可以任意Fork开源仓库；</li><li>自己拥有Fork后的仓库的读写权限；</li><li>可以推送pull request给官方仓库来贡献代码。</li></ul><h1 id="使用Gitee"><a href="#使用Gitee" class="headerlink" title="使用Gitee"></a>使用Gitee</h1><p>如果我们希望体验Git飞一般的速度，可以使用国内的Git托管服务——<a class="link" href="https://gitee.com/?utm_source=blog_lxf">Gitee<i class="fas fa-external-link-alt"></i></a>（<a class="link" href="https://gitee.com/?utm_source=blog_lxf">gitee.com<i class="fas fa-external-link-alt"></i></a>）。</p><p>和GitHub相比，Gitee也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，Gitee还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。</p><p> Gitee的免费版本也提供私有库功能，只是有5人的成员上限。</p><p>使用Gitee和使用GitHub类似，我们在Gitee上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -&gt; 菜单“修改资料”，然后选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的<code>.ssh/id_rsa.pub</code>文件的内容粘贴进去：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/1163452910422880/l" alt="gitee-add-ssh-key"></p><p>点击“确定”即可完成并看到刚才添加的Key：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/1163453163108928/l" alt="gitee-key"></p><p>如果我们已经有了一个本地的git仓库（例如，一个名为learngit的本地库），如何把它关联到Gitee的远程库上呢？</p><p>首先，我们在Gitee上创建一个新的项目，选择右上角用户头像 -&gt; 菜单“控制面板”，然后点击“创建项目”：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/1163453517527296/l" alt="gitee-new-repo"></p><p>项目名称最好与本地库保持一致：</p><p>然后，我们在本地库上使用命令<code>git remote add</code>把它和Gitee的远程库关联：</p><pre><code>git remote add origin git@gitee.com:liaoxuefeng/learngit.git</code></pre><p>之后，就可以正常地用<code>git push</code>和<code>git pull</code>推送了！</p><p>如果在使用命令<code>git remote add</code>时报错：</p><pre><code>git remote add origin git@gitee.com:liaoxuefeng/learngit.gitfatal: remote origin already exists.</code></pre><p>这说明本地库已经关联了一个名叫<code>origin</code>的远程库，此时，可以先用<code>git remote -v</code>查看远程库信息：</p><pre><code>git remote -vorigin    git@github.com:michaelliao/learngit.git (fetch)origin    git@github.com:michaelliao/learngit.git (push)</code></pre><p>可以看到，本地库已经关联了<code>origin</code>的远程库，并且，该远程库指向GitHub。</p><p>我们可以删除已有的GitHub远程库：</p><pre><code>git remote rm origin</code></pre><p>再关联Gitee的远程库（注意路径中需要填写正确的用户名）：</p><pre><code>git remote add origin git@gitee.com:liaoxuefeng/learngit.git</code></pre><p>此时，我们再查看远程库信息：</p><pre><code>git remote -vorigin    git@gitee.com:liaoxuefeng/learngit.git (fetch)origin    git@gitee.com:liaoxuefeng/learngit.git (push)</code></pre><p>现在可以看到，origin已经被关联到Gitee的远程库了。通过<code>git push</code>命令就可以把本地库推送到Gitee上。</p><p>有的小伙伴又要问了，一个本地库能不能既关联GitHub，又关联Gitee呢？</p><p>答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p><p>使用多个远程库时，我们要注意，git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p><p>仍然以<code>learngit</code>本地库为例，我们先删除已关联的名为<code>origin</code>的远程库：</p><pre><code>git remote rm origin</code></pre><p>然后，先关联GitHub的远程库：</p><pre><code>git remote add github git@github.com:michaelliao/learngit.git</code></pre><p>注意，远程库的名称叫<code>github</code>，不叫<code>origin</code>了。</p><p>接着，再关联Gitee的远程库：</p><pre><code>git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</code></pre><p>同样注意，远程库的名称叫<code>gitee</code>，不叫<code>origin</code>。</p><p>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</p><pre><code>git remote -vgitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)gitee    git@gitee.com:liaoxuefeng/learngit.git (push)github    git@github.com:michaelliao/learngit.git (fetch)github    git@github.com:michaelliao/learngit.git (push)</code></pre><p>如果要推送到GitHub，使用命令：</p><pre><code>git push github master</code></pre><p>如果要推送到Gitee，使用命令：</p><pre><code>git push gitee master</code></pre><p>这样一来，我们的本地库就可以同时与多个远程库互相同步：</p><pre><code class="ascii">┌─────────┐ ┌─────────┐│ GitHub  │ │  Gitee  │└─────────┘ └─────────┘     ▲           ▲     └─────┬─────┘           │    ┌─────────────┐    │ Local Repo  │    └─────────────┘</code></pre><p>Gitee也同样提供了Pull request功能，可以让其他小伙伴参与到开源项目中来。你可以通过Fork我的仓库：<a class="link" href="https://gitee.com/liaoxuefeng/learngit?utm_source=blog_lxf">https://gitee.com/liaoxuefeng/learngit<i class="fas fa-external-link-alt"></i></a>，创建一个<code>your-gitee-id.txt</code>的文本文件， 写点自己学习Git的心得，然后推送一个pull request给我，这个仓库会在Gitee和GitHub做双向同步。</p><h1 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h1><p>有没有经常敲错命令？比如<code>git status</code>？<code>status</code>这个单词真心不好记。</p><p>如果敲<code>git st</code>就表示<code>git status</code>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p><p>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：</p><pre><code>$ git config --global alias.st status</code></pre><p>好了，现在敲<code>git st</code>看看效果。</p><p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：</p><pre><code>$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch</code></pre><p>以后提交就可以简写成：</p><pre><code>$ git ci -m "bala bala bala..."</code></pre><p><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p><p>在<a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536">撤销修改<i class="fas fa-external-link-alt"></i></a>一节中，我们知道，命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：</p><pre><code>$ git config --global alias.unstage 'reset HEAD'</code></pre><p>当你敲入命令：</p><pre><code>$ git unstage test.py</code></pre><p>实际上Git执行的是：</p><pre><code>$ git reset HEAD test.py</code></pre><p>配置一个<code>git last</code>，让其显示最后一次提交信息：</p><pre><code>$ git config --global alias.last 'log -1'</code></pre><p>这样，用<code>git last</code>就能显示最近一次的提交：</p><pre><code>$ git lastcommit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2Merge: bd6ae48 291bea8Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Thu Aug 22 22:49:22 2013 +0800    merge &amp; fix hello.py</code></pre><p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p><pre><code>git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</code></pre><p>来看看<code>git lg</code>的效果：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919059728302912/0" alt="git-lg"></p><p>为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><pre><code>$ cat .git/config [core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote "origin"]    url = git@github.com:michaelliao/learngit.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]    remote = origin    merge = refs/heads/master[alias]    last = log -1</code></pre><p>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。</p><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><pre><code>$ cat .gitconfig[alias]    co = checkout    ci = commit    br = branch    st = status[user]    name = Your Name    email = your@email.com</code></pre><p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p><h2 id="小结-14"><a href="#小结-14" class="headerlink" title="小结"></a>小结</h2><p>给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</p><h1 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h1><p>在<a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">远程仓库<i class="fas fa-external-link-alt"></i></a>一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p><p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的<code>apt</code>命令就可以完成安装。</p><p>假设你已经有<code>sudo</code>权限的用户账号，下面，正式开始安装。</p><p>第一步，安装<code>git</code>：</p><pre><code>$ sudo apt-get install git</code></pre><p>第二步，创建一个<code>git</code>用户，用来运行<code>git</code>服务：</p><pre><code>$ sudo adduser git</code></pre><p>第三步，创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><p>第四步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><pre><code>$ sudo git init --bare sample.git</code></pre><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><pre><code>$ sudo chown -R git:git sample.git</code></pre><p>第五步，禁用shell登录：</p><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code></pre><p>改为：</p><pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></pre><p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p><p>第六步，克隆远程仓库：</p><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><pre><code>$ git clone git@server:/srv/sample.gitCloning into 'sample'...warning: You appear to have cloned an empty repository.</code></pre><p>剩下的推送就简单了。</p><h2 id="管理公钥"><a href="#管理公钥" class="headerlink" title="管理公钥"></a>管理公钥</h2><p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<a class="link" href="https://github.com/res0nat0r/gitosis">Gitosis<i class="fas fa-external-link-alt"></i></a>来管理公钥。</p><p>这里我们不介绍怎么玩<a class="link" href="https://github.com/res0nat0r/gitosis">Gitosis<i class="fas fa-external-link-alt"></i></a>了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p><h2 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h2><p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<a class="link" href="https://github.com/sitaramc/gitolite">Gitolite<i class="fas fa-external-link-alt"></i></a>就是这个工具。</p><p>这里我们也不介绍<a class="link" href="https://github.com/sitaramc/gitolite">Gitolite<i class="fas fa-external-link-alt"></i></a>了，不要把有限的生命浪费到权限斗争中。</p><h2 id="小结-15"><a href="#小结-15" class="headerlink" title="小结"></a>小结</h2><ul><li>搭建Git服务器非常简单，通常10分钟即可完成；</li><li>要方便管理公钥，用<a class="link" href="https://github.com/res0nat0r/gitosis">Gitosis<i class="fas fa-external-link-alt"></i></a>；</li><li>要像SVN那样变态地控制权限，用<a class="link" href="https://github.com/sitaramc/gitolite">Gitolite<i class="fas fa-external-link-alt"></i></a>。</li></ul><blockquote><p>转载<a class="link" href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h1&gt;&lt;h2 id=&quot;集中式vs分布式&quot;&gt;&lt;a href=&quot;#集中式vs分布式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="http://example.com/2019/08/11/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2019/08/11/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2019-08-11T10:21:54.000Z</published>
    <updated>2022-07-14T01:42:11.209Z</updated>
    
    <content type="html"><![CDATA[<p>Alt+Enter </p><p>导入包，自动修正代码 </p><p>Ctrl+Y </p><p>删除光标所在行 </p><p>Ctrl+D </p><p>复制光标所在行的内容，插入光标位置下面 </p><p>Ctrl+Alt+L </p><p>格式化代码 </p><p>Ctrl+/ </p><p>单行注释 </p><p>Ctrl+Shift+/ </p><p>选中代码注释，多行注释，再按取消注释 </p><p>Alt+Ins </p><p>自动生成代码，toString，get，set等方法 </p><p>Alt+Shift+上下箭头 </p><p>移动当前代码行 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Alt+Enter &lt;/p&gt;
&lt;p&gt;导入包，自动修正代码 &lt;/p&gt;
&lt;p&gt;Ctrl+Y &lt;/p&gt;
&lt;p&gt;删除光标所在行 &lt;/p&gt;
&lt;p&gt;Ctrl+D &lt;/p&gt;
&lt;p&gt;复制光标所在行的内容，插入光标位置下面 &lt;/p&gt;
&lt;p&gt;Ctrl+Alt+L &lt;/p&gt;
&lt;p&gt;格式化代码 &lt;</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="IDEA" scheme="http://example.com/tags/IDEA/"/>
    
    <category term="tool" scheme="http://example.com/tags/tool/"/>
    
  </entry>
  
</feed>
